{"version":3,"sources":["hooks/useColorScheme.ts","constants/Colors.ts","helpers/screenSizing.ts","components/Themed.tsx","screens/ModalScreen.tsx","helpers/constants.ts","navigation/LinkingConfiguration.ts","services/emailsService.ts","services/communication/connectionService.ts","screens/authentication/services/authenticationService.ts","screens/authentication/constants.ts","screens/authentication/redux/userActions.ts","screens/authentication/models.ts","screens/authentication/pages/Register.tsx","screens/authentication/pages/Login.tsx","screens/authentication/pages/Logout.tsx","components/dropdowns/Dropdown.tsx","components/Page.tsx","redux/itemActions.ts","redux/constants.ts","redux/modalActions.ts","screens/items/AddItemScreen.tsx","helpers/extensions.ts","components/Table/MobileBody.tsx","components/Table/TableBody.tsx","components/Table/Table.tsx","components/Table/types/classes/TableModel.tsx","screens/items/BuyItemScreen.tsx","components/Table/types/classes/ItemsTable.tsx","screens/items/ItemsListScreen.tsx","redux/partnerActions.ts","screens/partners/AddPartnerScreen.tsx","components/Table/types/classes/PartnersTable.tsx","screens/partners/PartnersListScreen.tsx","redux/salesActions.ts","helpers/randomFunctions.ts","components/EditableTable.tsx","screens/sales/AddSaleScreen.tsx","components/Table/types/classes/SalesTable.tsx","screens/sales/SalesListScreen.tsx","navigation/BottomTabNavigator.tsx","navigation/index.tsx","redux/store.ts","redux/configureStore.ts","helpers/styleFunctions.ts","App.tsx","hooks/useCachedResources.ts","assets/fonts/SpaceMono-Regular.ttf"],"names":["useColorScheme","_useColorScheme","light","text","background","tint","tabIconDefault","tabIconSelected","borderColor","dark","Dimensions","get","SCREEN_WIDTH","width","getHeight","height","scale","normalize","size","newSize","Platform","OS","Math","round","PixelRatio","roundToNearestPixel","isMobileScreen","useThemeColor","props","colorName","theme","colorFromProps","Colors","Text","style","lightColor","darkColor","otherProps","color","margin","View","backgroundColor","PageContainer","paddingTop","Separator","marginVertical","Input","border","label","marginBottom","justifyContent","alignItems","borderWidth","marginLeft","maxWidth","borderRadius","padding","paddingBottom","paddingLeft","Button","onPress","TouchableOpacity","disabled","marginTop","zIndex","Environments","ModalScreen","component","route","params","flex","StatusBar","linking","prefixes","Linking","config","screens","Warehouse","path","ItemsListScreen","PartnersListScreen","Register","Modal","isValidEmail","email","test","warehouseEnvironment","Production","ssoEnvironment","warehouseWebEnvironment","API_PATH","environment","Dev","Testing","warehouseApi","SSO_API_PATH","ssoApi","WAREHOUSE_WEB_ADDRESS","warehouseWebAddress","url","a","async","isSSO","fetch","response","ok","json","put","data","method","credentials","cache","body","JSON","stringify","headers","post","deletee","id","initUser","user","getAccessToken","accessToken","getRefreshToken","refreshToken","getUserData","userData","username","storeUser","userJsonValue","AsyncStorage","setItem","value","created","Date","accessTokenJsonValue","refreshTokenJsonValue","console","log","getItem","jsonValue","token","parse","setHours","getHours","removeItem","deleteDataOnLogout","SenderType","RegistrationEnum","actionCreators","dispatch","loginResponse","login","then","type","loginUser","initUserAction","initialState","connect","onLogin","useState","setUsername","password","setPassword","useNavigation","onChangeText","placeholder","autoFocus","keyboardType","secureTextEntry","isEmail","onLogout","Pressable","FontAwesome","name","marginRight","Registration","setIsValidEmail","setIsUsernameAvailable","setEmail","isPasswordMatching","setIsPasswordMatching","isRegisterActive","setIsRegisterActive","confirmPassword","setConfirmPassword","navigation","changeIsRegisterActive","field","Email","emailsService","Username","usersService","isAvailable","Password","ConfirmPassword","display","userToInsert","callbackUrl","senderType","navigate","Dropdown","items","handleItemChosen","selectedItem","setIsOpen","title","inputText","setInputText","shownItems","setShownItems","useRef","Animated","Value","current","rowHeight","contentHeight","toggleDropdown","isOpen","timing","toValue","min","length","duration","useNativeDriver","start","maxHeight","position","alignSelf","onFocus","onBlur","setTimeout","e","filter","item","toLowerCase","includes","overflow","map","handleItemClick","Page","children","styles","container","StyleSheet","create","fontSize","fontWeight","separator","addItem","editItem","loadItems","loadAllItems","itemDTO","catch","ex","error","isUpdated","itemId","isDeleted","deleteItem","buyItem","showDeleted","setShowDeleted","changeTitle","emptyItem","basePrice","sellPrice","partnerId","qtty","state","partners","onItemAdded","onItemEdited","onModalTitleChanged","modalTitle","modalActionCreators","currentItem","find","i","navigator","partner","selectableItems","onTextChange","txt","undefined","toString","getDateFormated","date","tempDate","toTwoDigitNumber","getDate","getMonth","getFullYear","getMinutes","number","toLocaleString","minimumIntegerDigits","useGrouping","toDecimalFormat","toFixed","textToDecimalFormat","Number","MobileBody","columns","deleteProps","onEdit","additionalActions","showAdditionalMenus","setShowAdditionalMenus","translateAnim","alerts","useAlerts","createTwoButtonAlert","alertProps","alert","content","cancelBtnTxt","acceptBtnTxt","onAction","onSwipeLeft","setValue","onSwipeRight","DataTable","Row","column","Cell","isMoney","propName","flexDirection","transform","translateX","action","recoverProps","TableBody","Array","isArray","Table","Header","Title","Switch","trackColor","false","true","thumbColor","ios_backgroundColor","onValueChange","renderHeader","TableModel","React","Component","onBuyItem","itemsActions","useEffect","goBack","ItemsTable","onDelete","this","listableItems","onItemsLoaded","onItemRecovery","onAllItemsLoaded","onShowDeletedChanged","isRight","addPartner","editPartner","loadPartners","partnerDTO","er","deletePartner","sale","emptyPartner","address","vatNumber","onPartnerAdded","onPartnerEdited","currentPartner","p","setPartner","PartnersTable","onPartnersLoaded","onPartnerRecovery","addSale","editSale","loadSales","sales","saleDTO","saleId","deleteSale","randomString","random","substring","EditableTable","saleItems","setSelectedItems","setSelectedItem","itemsForDropdown","borderBottomWidth","borderBottomColor","isQttyEnough","uniqueId","price","total","textAlign","reduce","b","emptySale","description","totalAmount","onSaleAdded","salesActions","onSaleEdited","modalActions","currentSale","setSale","selectedItems","SalesTable","onSalesLoaded","onSaleRecovery","onAllSalesLoaded","partnersActions","itemActions","Drawer","createDrawerNavigator","isAuthenticatedState","setIsAuthenticated","Navigator","Group","Screen","SalesListScreen","options","headerTitleAlign","headerRight","preventDefault","opacity","pressed","navigationKey","Login","onInitUser","colorScheme","NavigationContainer","LinkingConfiguration","DarkTheme","DefaultTheme","RootNavigator","Stack","createNativeStackNavigator","BottomTabNavigator","headerShown","screenOptions","presentation","reducers","incomingAction","configureStore","middleware","thunk","rootReducer","combineReducers","enhancers","windowIfDefined","window","__REDUX_DEVTOOLS_EXTENSION__","push","createStore","compose","applyMiddleware","document","createElement","textContent","head","append","injectWebCss","App","isLoadingComplete","setLoadingComplete","SplashScreen","Font","font","require","warn","useCachedResources","store","getState","module","exports"],"mappings":"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","file":"static/js/app.48b7a98d.chunk.js","sourcesContent":["import { ColorSchemeName, useColorScheme as _useColorScheme } from 'react-native';\r\n\r\n// The useColorScheme value is always either light or dark, but the built-in\r\n// type suggests that it can be null. This will not happen in practice, so this\r\n// makes it a bit easier to work with.\r\nexport default function useColorScheme(): NonNullable<ColorSchemeName> {\r\n  return _useColorScheme() as NonNullable<ColorSchemeName>;\r\n}\r\n","const tintColorLight = \"#2f95dc\";\r\nconst tintColorDark = \"#fff\";\r\n\r\nexport default {\r\n  light: {\r\n    text: \"#000\",\r\n    background: \"#fff\",\r\n    tint: tintColorLight,\r\n    tabIconDefault: \"#ccc\",\r\n    tabIconSelected: tintColorLight,\r\n    borderColor: \"rgb(0, 255, 0)\",\r\n  },\r\n  dark: {\r\n    text: \"#fff\",\r\n    background: \"#000\",\r\n    tint: tintColorDark,\r\n    tabIconDefault: \"#ccc\",\r\n    tabIconSelected: tintColorDark,\r\n    borderColor: \"rgb(0, 255, 0)\",\r\n  },\r\n};\r\n","import { Dimensions, Platform, PixelRatio } from \"react-native\";\r\n\r\nconst { width: SCREEN_WIDTH, height: SCREEN_HEIGHT } = Dimensions.get(\"window\");\r\n\r\nexport const getHeight = () => Dimensions.get(\"window\").height;\r\nexport const getWidth = () => Dimensions.get(\"window\").width;\r\n\r\nconst scale = SCREEN_WIDTH / 320;\r\nconst heightScale = SCREEN_HEIGHT / 320;\r\n\r\nexport function normalize(size: number) {\r\n  const newSize = size * scale;\r\n  if (Platform.OS === \"ios\") {\r\n    return Math.round(PixelRatio.roundToNearestPixel(newSize));\r\n  } else {\r\n    return Math.round(PixelRatio.roundToNearestPixel(newSize)) - 2;\r\n  }\r\n}\r\n\r\nexport function normalizeHeight(size: number) {\r\n  const newSize = size * heightScale;\r\n  if (Platform.OS === \"ios\") {\r\n    return Math.round(PixelRatio.roundToNearestPixel(newSize));\r\n  } else {\r\n    return Math.round(PixelRatio.roundToNearestPixel(newSize)) - 2;\r\n  }\r\n}\r\n\r\nexport const isMobileScreen = SCREEN_WIDTH < 600;\r\n\r\nexport const isMobile = Platform.OS === \"android\" || Platform.OS === \"ios\";\r\n\r\nexport const isAndroid = Platform.OS === \"android\";\r\n\r\nexport const isIOS = Platform.OS === \"ios\";\r\n","/**\r\n * Learn more about Light and Dark modes:\r\n * https://docs.expo.io/guides/color-schemes/\r\n */\r\n\r\nimport {\r\n  Text as DefaultText,\r\n  View as DefaultView,\r\n  TextInput as DefaultTextInput,\r\n  TouchableOpacity,\r\n} from \"react-native\";\r\n\r\nimport Colors from \"../constants/Colors\";\r\nimport { normalize } from \"../helpers/screenSizing\";\r\nimport useColorScheme from \"../hooks/useColorScheme\";\r\n\r\nexport function useThemeColor(\r\n  props: { light?: string; dark?: string },\r\n  colorName: keyof typeof Colors.light & keyof typeof Colors.dark\r\n) {\r\n  const theme = useColorScheme();\r\n  const colorFromProps = props[theme];\r\n\r\n  if (colorFromProps) {\r\n    return colorFromProps;\r\n  } else {\r\n    return Colors[theme][colorName];\r\n  }\r\n}\r\n\r\ntype ThemeProps = {\r\n  lightColor?: string;\r\n  darkColor?: string;\r\n};\r\n\r\ntype DefaultLabeledInputProps = {\r\n  label?: string;\r\n  border?: boolean;\r\n};\r\n\r\ntype DefaultButtonProps = {\r\n  label: string;\r\n};\r\n\r\nexport type TextProps = ThemeProps & DefaultText[\"props\"];\r\nexport type ViewProps = ThemeProps & DefaultView[\"props\"];\r\nexport type InputProps = ThemeProps & DefaultTextInput[\"props\"];\r\nexport type ButtonProps = ThemeProps &\r\n  DefaultButtonProps &\r\n  TouchableOpacity[\"props\"];\r\nexport type LabeledInputProps = ThemeProps &\r\n  DefaultLabeledInputProps &\r\n  DefaultTextInput[\"props\"];\r\n\r\nexport function Text(props: TextProps) {\r\n  const { style, lightColor, darkColor, ...otherProps } = props;\r\n  const color = useThemeColor({ light: lightColor, dark: darkColor }, \"text\");\r\n\r\n  return (\r\n    <DefaultText style={[{ color, margin: \"auto\" }, style]} {...otherProps} />\r\n  );\r\n}\r\n\r\nexport function Header(props: TextProps) {\r\n  const { style, lightColor, darkColor, ...otherProps } = props;\r\n  const color = useThemeColor({ light: lightColor, dark: darkColor }, \"text\");\r\n\r\n  return <Text {...props} style={{ top: \"0px\" }} />;\r\n}\r\n\r\nexport function View(props: ViewProps) {\r\n  const { style, lightColor, darkColor, ...otherProps } = props;\r\n  const backgroundColor = useThemeColor(\r\n    { light: lightColor, dark: darkColor },\r\n    \"background\"\r\n  );\r\n\r\n  return <DefaultView style={[{ backgroundColor }, style]} {...otherProps} />;\r\n}\r\n\r\nexport function PageContainer(props: ViewProps) {\r\n  const { style, lightColor, darkColor, ...otherProps } = props;\r\n  const backgroundColor = useThemeColor(\r\n    { light: lightColor, dark: darkColor },\r\n    \"background\"\r\n  );\r\n\r\n  return (\r\n    <DefaultView\r\n      style={[{ backgroundColor, paddingTop: normalize(8) }, style]}\r\n      {...otherProps}\r\n    />\r\n  );\r\n}\r\n\r\nexport function Separator() {\r\n  return (\r\n    <View\r\n      style={{\r\n        marginVertical: normalize(10),\r\n        height: 1,\r\n        width: normalize(300),\r\n      }}\r\n      lightColor=\"#eee\"\r\n      darkColor=\"rgba(255,255,255,0.1)\"\r\n    />\r\n  );\r\n}\r\n\r\nexport function Input(props: LabeledInputProps) {\r\n  const { style, lightColor, darkColor, border, ...otherProps } = props;\r\n  const color = useThemeColor({ light: lightColor, dark: darkColor }, \"text\");\r\n  const { label } = props;\r\n  return label ? (\r\n    <View\r\n      style={[\r\n        {\r\n          width: normalize(300),\r\n          marginBottom: 10,\r\n          justifyContent: \"center\",\r\n          alignItems: \"center\",\r\n          borderWidth: 0,\r\n        },\r\n      ]}\r\n    >\r\n      <View\r\n        style={{\r\n          borderWidth: 0,\r\n        }}\r\n      >\r\n        <Text style={{ marginLeft: 1, marginBottom: 2 }}>{label}</Text>\r\n        <DefaultTextInput\r\n          style={[\r\n            {\r\n              color,\r\n              borderColor: color,\r\n              width: normalize(300),\r\n              maxWidth: 500,\r\n              borderRadius: 5,\r\n              padding: 3,\r\n              paddingBottom: 5,\r\n              paddingLeft: 5,\r\n              borderWidth: border ? 1 : 0,\r\n            },\r\n            style,\r\n          ]}\r\n          {...otherProps}\r\n        />\r\n      </View>\r\n    </View>\r\n  ) : (\r\n    <DefaultTextInput\r\n      style={[\r\n        {\r\n          color,\r\n          borderColor: color,\r\n          borderWidth: 0,\r\n          width: normalize(300),\r\n          maxWidth: 500,\r\n          borderRadius: 5,\r\n          padding: 3,\r\n          paddingBottom: 5,\r\n          paddingLeft: 5,\r\n        },\r\n        style,\r\n      ]}\r\n      {...otherProps}\r\n    />\r\n  );\r\n}\r\n\r\nexport function Button(props: ButtonProps) {\r\n  const { style, lightColor, darkColor, onPress, label, ...otherProps } = props;\r\n\r\n  return (\r\n    <TouchableOpacity\r\n      style={[\r\n        {\r\n          backgroundColor: otherProps.disabled\r\n            ? \"rgba(35, 134, 38, 0.45)\"\r\n            : \"rgba(35, 134, 38, 0.9)\",\r\n          borderWidth: 1,\r\n          padding: 5,\r\n          borderRadius: 5,\r\n          width: normalize(300),\r\n          maxWidth: 500,\r\n          alignItems: \"center\",\r\n          marginTop: normalize(5),\r\n          borderColor: \"rgba(240,246,252,0.1)\",\r\n          zIndex: 1,\r\n        },\r\n        style,\r\n      ]}\r\n      onPress={onPress}\r\n      {...otherProps}\r\n    >\r\n      <Text style={{ color: \"white\" }}>{label}</Text>\r\n    </TouchableOpacity>\r\n  );\r\n}\r\n","import { StatusBar } from \"expo-status-bar\";\r\nimport { Platform } from \"react-native\";\r\nimport { View } from \"../components/Themed\";\r\nimport React from \"react\";\r\nimport { RootStackScreenProps } from \"../types\";\r\n\r\nconst ModalScreen = ({ route }: RootStackScreenProps<\"Modal\">) => {\r\n  const { component } = route.params;\r\n\r\n  return (\r\n    <View style={{ flex: 1, alignItems: \"center\", justifyContent: \"center\" }}>\r\n      {component}\r\n      <StatusBar style={Platform.OS === \"ios\" ? \"light\" : \"auto\"} />\r\n    </View>\r\n  );\r\n};\r\n\r\nexport default ModalScreen;\r\n","enum Environments {\r\n  Dev,\r\n  Testing,\r\n  Production,\r\n}\r\n\r\nconst warehouseEnvironment = Environments.Production;\r\nconst ssoEnvironment = Environments.Production;\r\nconst warehouseWebEnvironment = Environments.Production;\r\n\r\nconst warehouseApi = (environment: Environments) => {\r\n  switch (environment) {\r\n    case Environments.Dev:\r\n      return \"https://localhost:5001/\";\r\n    case Environments.Testing:\r\n      return \"https://warehouse-magnus-testing.azurewebsites.net/\";\r\n    case Environments.Production:\r\n      return \"https://warehouse-magnus.azurewebsites.net/\";\r\n  }\r\n};\r\n\r\nconst ssoApi = (environment: Environments) => {\r\n  switch (environment) {\r\n    case Environments.Dev:\r\n      return \"https://localhost:7206/api\";\r\n    case Environments.Testing:\r\n      return \"https://magnus-sso.azurewebsites.net/api\";\r\n    case Environments.Production:\r\n      return \"https://magnus-sso.azurewebsites.net/api\";\r\n  }\r\n};\r\n\r\nconst warehouseWebAddress = (environment: Environments) => {\r\n  switch (environment) {\r\n    case Environments.Dev:\r\n      return \"http://192.168.0.129:19006\";\r\n    case Environments.Testing:\r\n      return \"https://magnus2311.github.io/Warehouse\";\r\n    case Environments.Production:\r\n      return \"https://magnus2311.github.io/Warehouse\";\r\n  }\r\n};\r\n\r\nexport const API_PATH = warehouseApi(warehouseEnvironment);\r\nexport const SSO_API_PATH = ssoApi(ssoEnvironment);\r\nexport const WAREHOUSE_WEB_ADDRESS = warehouseWebAddress(\r\n  warehouseWebEnvironment\r\n);\r\n","/**\r\n * Learn more about deep linking with React Navigation\r\n * https://reactnavigation.org/docs/deep-linking\r\n * https://reactnavigation.org/docs/configuring-links\r\n */\r\n\r\nimport { LinkingOptions } from \"@react-navigation/native\";\r\nimport * as Linking from \"expo-linking\";\r\nimport { RootStackParamList } from \"../types\";\r\n\r\nconst linking: LinkingOptions<RootStackParamList> = {\r\n  prefixes: [Linking.createURL(\"/Warehouse/\")],\r\n  config: {\r\n    screens: {\r\n      Warehouse: {\r\n        path: \"Warehouse\",\r\n      },\r\n      ItemsListScreen: {\r\n        path: \"ItemsListScreen\",\r\n      },\r\n      PartnersListScreen: {\r\n        path: \"PartnersListScreen\",\r\n      },\r\n      Register: \"Register\",\r\n      Modal: \"modal\",\r\n    },\r\n  },\r\n};\r\n\r\nexport default linking;\r\n","export const isValidEmail = (email: string) => {\r\n  const re =\r\n    /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\n  return re.test(email);\r\n};\r\n","import { API_PATH, SSO_API_PATH } from \"../../helpers/constants\";\r\n\r\nexport async function get<T>(url: string, isSSO = false): Promise<T> {\r\n  const response = await fetch(`${isSSO ? SSO_API_PATH : API_PATH}${url}`);\r\n  if (response.ok) {\r\n    try {\r\n      return (await response.json()) as T;\r\n    } catch (ex) {\r\n      throw ex;\r\n    }\r\n  }\r\n\r\n  return {} as T;\r\n}\r\n\r\nexport async function put<T>(url: string, data: any): Promise<boolean> {\r\n  const response = await fetch(`${API_PATH}${url}`, {\r\n    method: \"PUT\",\r\n    credentials: \"omit\",\r\n    cache: \"no-cache\",\r\n    body: JSON.stringify(data),\r\n    headers: {\r\n      \"content-type\": \"application/json\",\r\n    },\r\n  });\r\n\r\n  return response.ok;\r\n}\r\n\r\nexport async function post<T>(\r\n  url: string,\r\n  data: any,\r\n  isSSO = false\r\n): Promise<T> {\r\n  const response = await fetch(`${isSSO ? SSO_API_PATH : API_PATH}${url}`, {\r\n    method: \"POST\",\r\n    credentials: \"omit\",\r\n    cache: \"no-cache\",\r\n    body: JSON.stringify(data),\r\n    headers: {\r\n      \"content-type\": \"application/json\",\r\n    },\r\n  });\r\n\r\n  if (response.ok) {\r\n    try {\r\n      return (await response.json()) as T;\r\n    } catch (ex) {\r\n      throw ex;\r\n    }\r\n  }\r\n\r\n  return {} as T;\r\n}\r\n\r\nexport async function deletee(url: string, id: string): Promise<boolean> {\r\n  const response = await fetch(`${API_PATH}${url}`, {\r\n    method: \"DELETE\",\r\n    credentials: \"omit\",\r\n    cache: \"no-cache\",\r\n    body: JSON.stringify(id),\r\n    headers: {\r\n      \"content-type\": \"application/json\",\r\n    },\r\n  });\r\n\r\n  return response.ok;\r\n}\r\n","import AsyncStorage from \"@react-native-async-storage/async-storage\";\r\nimport {\r\n  LoginResponseDTO,\r\n  LoginUserDTO,\r\n  RegisterUserDTO,\r\n  Token,\r\n  TryLoginDTO,\r\n} from \"../models\";\r\nimport { get, post } from \"../../../services/communication/connectionService\";\r\nimport {\r\n  USER_STORAGE_ACCESS_TOKEN,\r\n  USER_STORAGE_REFRESH_TOKEN,\r\n  USER_STORAGE_VARIABLE,\r\n} from \"../constants\";\r\nimport { actionCreators, UserState } from \"../redux/userActions\";\r\n\r\ninterface ChangePasswordResponse {}\r\n\r\nexport function add(user: RegisterUserDTO) {\r\n  return post(\"/users/register\", user, true);\r\n}\r\n\r\nexport function isUsernameAvailable(username: string) {\r\n  return get<boolean>(\r\n    `/users/check-username-availability?username=${username}`,\r\n    true\r\n  );\r\n}\r\n\r\nexport async function login(user: LoginUserDTO) {\r\n  const loginResponse = await post<LoginResponseDTO>(\r\n    \"/users/login\",\r\n    {\r\n      ...user,\r\n      accessToken: await getAccessToken(),\r\n      refreshToken: await getRefreshToken(),\r\n    },\r\n    true\r\n  );\r\n  await storeUser(loginResponse);\r\n  return loginResponse;\r\n}\r\n\r\nexport const logout = async () => {\r\n  await deleteDataOnLogout();\r\n  return post(\"/users/logout\", { refreshToken: await getRefreshToken() }, true);\r\n};\r\n\r\nexport function changePassword(oldPassword: string, newPassword: string) {\r\n  return post<ChangePasswordResponse>(\r\n    \"/users/changePassword\",\r\n    {\r\n      oldPassword,\r\n      newPassword,\r\n    },\r\n    true\r\n  ).then(async (response) => {});\r\n}\r\n\r\nexport const resetPassword = (token: string, newPassword: string) => {\r\n  return post(\"/users/resetPassword\", { token, newPassword }, true);\r\n};\r\n\r\nexport const initUser = async () => {\r\n  const user = {} as UserState;\r\n\r\n  user.accessToken = (await getAccessToken()) ?? \"\";\r\n  user.refreshToken = (await getRefreshToken()) ?? \"\";\r\n  const userData = (await getUserData()) ?? ({} as UserState);\r\n  user.username = userData.username;\r\n  user.email = userData.email;\r\n\r\n  return user;\r\n};\r\n\r\nconst refreshAccessToken = async () => {\r\n  return get<TryLoginDTO>(\r\n    `/users/try-login?refreshToken=${await getRefreshToken()}`,\r\n    true\r\n  );\r\n};\r\n\r\nexport const isAccessTokenActive = async () => !!(await getAccessToken());\r\nexport const isAuthenticated = async () =>\r\n  (await isAccessTokenActive()) ? true : await isAccessTokenRefreshed();\r\n\r\nconst storeUser = async (user: LoginResponseDTO) => {\r\n  try {\r\n    const userJsonValue = JSON.stringify({\r\n      username: user.username,\r\n      email: user.email,\r\n    });\r\n    await AsyncStorage.setItem(USER_STORAGE_VARIABLE, userJsonValue);\r\n\r\n    const accessToken = {\r\n      value: user.accessToken,\r\n      created: new Date(),\r\n    } as Token;\r\n    const accessTokenJsonValue = JSON.stringify(accessToken);\r\n    await AsyncStorage.setItem(USER_STORAGE_ACCESS_TOKEN, accessTokenJsonValue);\r\n\r\n    const refreshToken = {\r\n      value: user.refreshToken,\r\n      created: new Date(),\r\n    } as Token;\r\n    const refreshTokenJsonValue = JSON.stringify(refreshToken);\r\n    await AsyncStorage.setItem(\r\n      USER_STORAGE_REFRESH_TOKEN,\r\n      refreshTokenJsonValue\r\n    );\r\n  } catch (e) {\r\n    console.log(e);\r\n  }\r\n};\r\n\r\nconst getRefreshToken = async () => {\r\n  try {\r\n    const jsonValue = await AsyncStorage.getItem(USER_STORAGE_REFRESH_TOKEN);\r\n    if (jsonValue !== null) {\r\n      const token = JSON.parse(jsonValue) as Token;\r\n      const expiryDate = new Date().setHours(\r\n        new Date(token.created).getHours() + 1\r\n      );\r\n      if (expiryDate >= new Date().getHours()) return token.value;\r\n      else await AsyncStorage.removeItem(USER_STORAGE_REFRESH_TOKEN);\r\n    }\r\n  } catch (e) {\r\n    console.log(e);\r\n  }\r\n\r\n  return null;\r\n};\r\n\r\nexport const getAccessToken = async () => {\r\n  try {\r\n    const jsonValue = await AsyncStorage.getItem(USER_STORAGE_ACCESS_TOKEN);\r\n    if (jsonValue !== null) {\r\n      const token = JSON.parse(jsonValue) as Token;\r\n      if (token.value && token.value !== \"\") {\r\n        const expiryDate = new Date().setHours(\r\n          new Date(token.created).getHours() + 1\r\n        );\r\n        if (expiryDate >= new Date().getHours()) return token.value;\r\n        else await AsyncStorage.removeItem(USER_STORAGE_ACCESS_TOKEN);\r\n      }\r\n    }\r\n  } catch (e) {\r\n    console.log(e);\r\n  }\r\n\r\n  return null;\r\n};\r\n\r\nconst getUserData = async () => {\r\n  try {\r\n    const jsonValue = await AsyncStorage.getItem(USER_STORAGE_VARIABLE);\r\n    if (jsonValue !== null) {\r\n      const user = JSON.parse(jsonValue) as UserState;\r\n      if (user) {\r\n        return user;\r\n      }\r\n    }\r\n  } catch (e) {\r\n    console.log(e);\r\n  }\r\n\r\n  return null;\r\n};\r\n\r\nconst isAccessTokenRefreshed = async () => {\r\n  const refreshToken = await getRefreshToken();\r\n  if (refreshToken) {\r\n    const accessToken = (await refreshAccessToken()).accessToken;\r\n    if (accessToken && accessToken !== \"\") {\r\n      await storeAccessToken(accessToken);\r\n      return true;\r\n    }\r\n  }\r\n\r\n  return false;\r\n};\r\n\r\nconst storeAccessToken = async (token: string) => {\r\n  const accessToken = {\r\n    value: token,\r\n    created: new Date(),\r\n  } as Token;\r\n  const accessTokenJsonValue = JSON.stringify(accessToken);\r\n  await AsyncStorage.setItem(USER_STORAGE_ACCESS_TOKEN, accessTokenJsonValue);\r\n};\r\n\r\nconst deleteDataOnLogout = async () => {\r\n  await AsyncStorage.removeItem(USER_STORAGE_VARIABLE);\r\n  await AsyncStorage.removeItem(USER_STORAGE_ACCESS_TOKEN);\r\n  await AsyncStorage.removeItem(USER_STORAGE_REFRESH_TOKEN);\r\n};\r\n","export const USER_STORAGE_VARIABLE = \"@USER_STORAGE_KEY\";\r\nexport const USER_STORAGE_ACCESS_TOKEN = \"@USER_STORAGE_ACCESS_TOKEN\";\r\nexport const USER_STORAGE_REFRESH_TOKEN = \"@USER_STORAGE_REFRESH_TOKEN\";\r\n","import { Action, Reducer } from \"redux\";\r\nimport { LoginResponseDTO, LoginUserDTO } from \"../models\";\r\nimport { AppThunk } from \"../../../redux/store\";\r\nimport { login, logout } from \"../services/authenticationService\";\r\n\r\nexport interface UserState {\r\n  username: string;\r\n  email: string;\r\n  accessToken: string;\r\n  refreshToken: string;\r\n}\r\n\r\nexport interface LoginAction {\r\n  type: \"LOGIN_USER\";\r\n  user: LoginResponseDTO;\r\n}\r\n\r\nexport interface InitUserAction {\r\n  type: \"INIT_USER\";\r\n  user: UserState;\r\n}\r\n\r\nexport interface LogoutAction {\r\n  type: \"LOGOUT\";\r\n}\r\n\r\ntype KnownActions = LoginAction | InitUserAction | LogoutAction;\r\n\r\nexport const loginUser = (user: LoginResponseDTO): KnownActions => ({\r\n  type: \"LOGIN_USER\",\r\n  user,\r\n});\r\n\r\nexport const initUserAction = (user: UserState): KnownActions => ({\r\n  type: \"INIT_USER\",\r\n  user,\r\n});\r\n\r\nexport const logoutAction = (): KnownActions => ({\r\n  type: \"LOGOUT\",\r\n});\r\n\r\nexport const actionCreators = {\r\n  login: (user: LoginUserDTO): AppThunk<void, KnownActions> => {\r\n    return (dispatch: any) => {\r\n      login(user).then((loginResponse) => {\r\n        dispatch(loginUser(loginResponse));\r\n      });\r\n    };\r\n  },\r\n  initUser: (user: UserState): AppThunk<void, KnownActions> => {\r\n    return (dispatch: any) => {\r\n      dispatch(initUserAction(user));\r\n    };\r\n  },\r\n  logout: (): AppThunk<void, KnownActions> => {\r\n    return async (dispatch: any) => {\r\n      await logout().then(() => {\r\n        dispatch(logoutAction());\r\n      });\r\n    };\r\n  },\r\n};\r\n\r\nconst initialState = {\r\n  username: \"\",\r\n  email: \"\",\r\n  accessToken: \"\",\r\n  refreshToken: \"\",\r\n};\r\n\r\nexport const reducer: Reducer<UserState> = (\r\n  state = initialState,\r\n  incomingAction: Action\r\n): UserState => {\r\n  const action = incomingAction as KnownActions;\r\n  switch (action.type) {\r\n    case \"LOGIN_USER\":\r\n      return { ...action.user };\r\n    case \"INIT_USER\":\r\n      return { ...action.user };\r\n    case \"LOGOUT\":\r\n      return { ...initialState };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","export interface RegisterUserDTO {\r\n  username: string;\r\n  password: string;\r\n  email: string;\r\n  callbackUrl: string;\r\n  senderType: SenderType;\r\n}\r\n\r\nexport interface LoginUserDTO {\r\n  username: string;\r\n  email: string;\r\n  password: string;\r\n}\r\n\r\nexport enum SenderType {\r\n  Warehouse = 1,\r\n}\r\n\r\nexport interface LoginResponseDTO {\r\n  username: string;\r\n  email: string;\r\n  accessToken: string;\r\n  refreshToken: string;\r\n}\r\n\r\nexport interface Token {\r\n  value: string;\r\n  created: Date;\r\n}\r\n\r\nexport interface TryLoginDTO {\r\n  accessToken: string;\r\n}\r\n","import React, { useState } from \"react\";\r\nimport { Button, Input, Text, View } from \"../../../components/Themed\";\r\nimport * as usersService from \"../services/authenticationService\";\r\nimport * as emailsService from \"../../../services/emailsService\";\r\nimport { SenderType, RegisterUserDTO } from \"../models\";\r\nimport { WAREHOUSE_WEB_ADDRESS } from \"../../../helpers/constants\";\r\nimport { useNavigation } from \"@react-navigation/native\";\r\n\r\nenum RegistrationEnum {\r\n  Email,\r\n  Username,\r\n  Password,\r\n  ConfirmPassword,\r\n}\r\n\r\nconst Registration = () => {\r\n  const [isValidEmail, setIsValidEmail] = useState(true);\r\n  const [isUsernameAvailable, setIsUsernameAvailable] = useState(true);\r\n  const [email, setEmail] = useState(\"\");\r\n  const [isPasswordMatching, setIsPasswordMatching] = useState(true);\r\n  const [isRegisterActive, setIsRegisterActive] = useState(false);\r\n  const [username, setUsername] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const [confirmPassword, setConfirmPassword] = useState(\"\");\r\n  const navigation = useNavigation();\r\n\r\n  const handleUsernameChange = (text: string) => {\r\n    setUsername(text);\r\n    changeIsRegisterActive(RegistrationEnum.Username, text);\r\n  };\r\n\r\n  const handleEmailChange = (text: string) => {\r\n    setEmail(text);\r\n    changeIsRegisterActive(RegistrationEnum.Email, text);\r\n  };\r\n\r\n  const handlePasswordChange = (text: string) => {\r\n    setPassword(text);\r\n    if (text === \"\" && confirmPassword === \"\") setIsPasswordMatching(true);\r\n    changeIsRegisterActive(RegistrationEnum.Password, text);\r\n  };\r\n\r\n  const handleConfirmPasswordChange = (text: string) => {\r\n    setConfirmPassword(text);\r\n    setIsPasswordMatching(text === password);\r\n    changeIsRegisterActive(RegistrationEnum.ConfirmPassword, text);\r\n  };\r\n\r\n  const changeIsRegisterActive = (field: RegistrationEnum, text: string) => {\r\n    switch (field) {\r\n      case RegistrationEnum.Email:\r\n        const isEmail = emailsService.isValidEmail(text);\r\n        setIsValidEmail(isEmail);\r\n        setIsRegisterActive(\r\n          text && text !== \"\" && isEmail && password && password !== \"\"\r\n            ? isPasswordMatching\r\n            : false\r\n        );\r\n      case RegistrationEnum.Username:\r\n        usersService\r\n          .isUsernameAvailable(text)\r\n          .then((isAvailable: boolean) => setIsUsernameAvailable(isAvailable));\r\n        break;\r\n      case RegistrationEnum.Password:\r\n        setIsRegisterActive(\r\n          text && confirmPassword && text === confirmPassword\r\n            ? isValidEmail\r\n            : false\r\n        );\r\n        break;\r\n      case RegistrationEnum.ConfirmPassword:\r\n        setIsRegisterActive(\r\n          text && password && text === password && username !== \"\"\r\n            ? isValidEmail\r\n            : false\r\n        );\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n\r\n  const handleRegister = () => {\r\n    const userToInsert = {\r\n      username,\r\n      password,\r\n      email,\r\n      callbackUrl: `${WAREHOUSE_WEB_ADDRESS}/registration/email-confirmed`,\r\n      senderType: SenderType.Warehouse,\r\n    } as RegisterUserDTO;\r\n    usersService.add(userToInsert);\r\n    navigation.navigate(\"PartnersListScreen\");\r\n  };\r\n\r\n  return (\r\n    <View\r\n      style={{ flex: 1, alignItems: \"center\", justifyContent: \"flex-start\" }}\r\n    >\r\n      {/* <img\r\n        alt=\"Life Mode logo\"\r\n        src=\"/images/logos/logo_transparent.png\"\r\n        style={{ height: \"20rem\", width: \"20rem\", alignSelf: \"baseline\" }}\r\n      /> */}\r\n      <View>\r\n        <Text>Let's get started</Text>\r\n      </View>\r\n      <View>\r\n        <Text>Sign up for free and get a lot of perks!</Text>\r\n      </View>\r\n      <Input\r\n        onChangeText={handleUsernameChange}\r\n        value={username}\r\n        label=\"Username\"\r\n        placeholder=\"Enter your username\"\r\n        autoFocus\r\n        border={true}\r\n        // isValid={isUsernameAvailable}\r\n      />\r\n      <Input\r\n        onChangeText={handleEmailChange}\r\n        value={email}\r\n        label=\"E-mail\"\r\n        placeholder=\"Enter your email\"\r\n        autoFocus\r\n        border={true}\r\n        // isValid={isValidEmail}\r\n      />\r\n      <View\r\n        style={{\r\n          display: \"flex\",\r\n        }}\r\n      >\r\n        <Input\r\n          onChangeText={handlePasswordChange}\r\n          value={password}\r\n          label=\"Password\"\r\n          placeholder=\"Enter your password\"\r\n          keyboardType=\"visible-password\"\r\n          border={true}\r\n          secureTextEntry\r\n        />\r\n        <Input\r\n          onChangeText={handleConfirmPasswordChange}\r\n          value={confirmPassword}\r\n          label=\"Confirm password\"\r\n          placeholder=\"Confirm your password\"\r\n          border={true}\r\n          secureTextEntry\r\n          // isValid={isPasswordMatching}\r\n        />\r\n      </View>\r\n      <Button\r\n        onPress={handleRegister}\r\n        style={{ width: \"100%\" }}\r\n        disabled={!isRegisterActive}\r\n        label={\"Register\"}\r\n      />\r\n    </View>\r\n  );\r\n};\r\n\r\nexport default Registration;\r\n","import { useNavigation } from \"@react-navigation/native\";\r\nimport React, { FunctionComponent, useState } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Button, Input, Text, View } from \"../../../components/Themed\";\r\nimport { LoginUserDTO } from \"../models\";\r\nimport { isValidEmail } from \"../../../services/emailsService\";\r\nimport { actionCreators } from \"../redux/userActions\";\r\nimport { AppState } from \"../../../redux/store\";\r\n\r\nconst mapDispatchToProps = (dispatch: any) => {\r\n  return {\r\n    onLogin: (user: LoginUserDTO) => {\r\n      dispatch(actionCreators.login(user));\r\n    },\r\n  };\r\n};\r\n\r\ninterface Props {\r\n  onLogin: (user: LoginUserDTO) => void;\r\n}\r\n\r\nconst Login: FunctionComponent<Props> = ({ onLogin }) => {\r\n  const [username, setUsername] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const navigation = useNavigation();\r\n\r\n  const handleUsernameChange = (text: string) => {\r\n    setUsername(text);\r\n  };\r\n\r\n  const handlePasswordChange = (text: string) => {\r\n    setPassword(text);\r\n  };\r\n\r\n  const handleLogin = () => {\r\n    const isEmail = isValidEmail(username);\r\n    const userToInsert = {\r\n      username: isEmail ? \"\" : username,\r\n      email: isEmail ? username : \"\",\r\n      password,\r\n    } as LoginUserDTO;\r\n    onLogin(userToInsert);\r\n    // navigation.navigate(\"PartnersListScreen\");\r\n  };\r\n\r\n  return (\r\n    <View\r\n      style={{ flex: 1, alignItems: \"center\", justifyContent: \"flex-start\" }}\r\n    >\r\n      {/* <img\r\n      alt=\"Life Mode logo\"\r\n      src=\"/images/logos/logo_transparent.png\"\r\n      style={{ height: \"20rem\", width: \"20rem\", alignSelf: \"baseline\" }}\r\n    /> */}\r\n      <View>\r\n        <Text>Login in Warehouse</Text>\r\n      </View>\r\n      <Input\r\n        onChangeText={handleUsernameChange}\r\n        value={username}\r\n        label=\"Username\"\r\n        placeholder=\"Enter your username\"\r\n        autoFocus\r\n        border={true}\r\n        // isValid={isUsernameAvailable}\r\n      />\r\n      <Input\r\n        onChangeText={handlePasswordChange}\r\n        value={password}\r\n        label=\"Password\"\r\n        placeholder=\"Enter your password\"\r\n        keyboardType=\"visible-password\"\r\n        border={true}\r\n        secureTextEntry\r\n      />\r\n      <Button onPress={handleLogin} style={{ width: \"100%\" }} label={\"Login\"} />\r\n    </View>\r\n  );\r\n};\r\n\r\nexport default connect(null, mapDispatchToProps)(Login);\r\n","import { FontAwesome } from \"@expo/vector-icons\";\r\nimport React, { FunctionComponent } from \"react\";\r\nimport { Pressable } from \"react-native\";\r\nimport { connect } from \"react-redux\";\r\nimport { Button } from \"../../../components/Themed\";\r\nimport { actionCreators } from \"../redux/userActions\";\r\n\r\nconst mapDispatchToProps = (dispatch: any) => {\r\n  return {\r\n    onLogout: () => {\r\n      dispatch(actionCreators.logout());\r\n    },\r\n  };\r\n};\r\n\r\ninterface Props {\r\n  onLogout: () => void;\r\n}\r\n\r\nconst Logout: FunctionComponent<Props> = ({ onLogout }) => {\r\n  return (\r\n    <Pressable onPress={onLogout}>\r\n      <FontAwesome\r\n        name=\"sign-out\"\r\n        size={30}\r\n        color=\"green\"\r\n        style={{ marginRight: 15 }}\r\n      />\r\n    </Pressable>\r\n  );\r\n};\r\n\r\nexport default connect(null, mapDispatchToProps)(Logout);\r\n","import React, { FunctionComponent, useRef, useState } from \"react\";\r\nimport { Animated, Pressable, Text } from \"react-native\";\r\nimport { normalize } from \"../../helpers/screenSizing\";\r\nimport { Input, View } from \"../Themed\";\r\n\r\ninterface DropdownProps {\r\n  items: {\r\n    id: string;\r\n    title: string;\r\n  }[];\r\n  selectedItem?:\r\n    | {\r\n        id: string;\r\n        title: string;\r\n      }\r\n    | undefined;\r\n  handleItemChosen: (itemId: string) => void;\r\n  label?: string;\r\n  border?: boolean;\r\n  style?: {\r\n    margin?: number;\r\n    marginTop?: number;\r\n    marginBottom?: number;\r\n  };\r\n  placeholder: string;\r\n}\r\n\r\nconst Dropdown: FunctionComponent<DropdownProps> = ({\r\n  items,\r\n  handleItemChosen,\r\n  selectedItem,\r\n  label,\r\n  border,\r\n  style,\r\n  placeholder,\r\n}) => {\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const [inputText, setInputText] = useState(selectedItem?.title ?? \"\");\r\n  const [shownItems, setShownItems] = useState(items);\r\n  const height = useRef(new Animated.Value(label ? 50 : 26.67)).current;\r\n  const rowHeight = useRef(new Animated.Value(26.67)).current;\r\n  const contentHeight = useRef(new Animated.Value(0)).current;\r\n\r\n  const toggleDropdown = (isOpen: boolean) => {\r\n    Animated.timing(height, {\r\n      toValue: isOpen\r\n        ? Math.min(250, 50 + shownItems.length * 26.67)\r\n        : label\r\n        ? 50\r\n        : 26.67,\r\n      duration: 200,\r\n      useNativeDriver: false,\r\n    }).start();\r\n    Animated.timing(rowHeight, {\r\n      toValue: isOpen ? 26.67 : 0,\r\n      duration: isOpen ? 400 : 200,\r\n      useNativeDriver: false,\r\n    }).start();\r\n    Animated.timing(contentHeight, {\r\n      toValue: isOpen ? 200 : 0,\r\n      duration: 200,\r\n      useNativeDriver: false,\r\n    }).start();\r\n\r\n    setIsOpen(isOpen);\r\n  };\r\n\r\n  const handleInputFocus = () => {\r\n    toggleDropdown(true);\r\n  };\r\n\r\n  const handleInputChange = (e: string) => {\r\n    setInputText(e);\r\n    setShownItems(\r\n      items.filter(item => item.title.toLowerCase().includes(e.toLowerCase()))\r\n    );\r\n  };\r\n\r\n  const handleItemClick = (item: { id: string; title: string }) => {\r\n    setInputText(item.title);\r\n    handleItemChosen(item.id);\r\n    if (selectedItem?.id === \"\") {\r\n      setInputText(\"\");\r\n    }\r\n  };\r\n\r\n  const handleOnBlur = () => {\r\n    setTimeout(() => toggleDropdown(false), 200);\r\n  };\r\n\r\n  return (\r\n    <Animated.View\r\n      style={{\r\n        height: height,\r\n        maxHeight: height,\r\n        margin: style?.margin ?? 0,\r\n        marginBottom: style?.marginBottom ?? 0,\r\n        marginTop: style?.marginTop ?? 0,\r\n        width: normalize(300),\r\n      }}\r\n    >\r\n      <View\r\n        style={{\r\n          position: \"relative\",\r\n          borderColor: \"black\",\r\n          height: 23,\r\n          alignSelf: \"stretch\",\r\n        }}\r\n      >\r\n        <Input\r\n          label={label}\r\n          onFocus={handleInputFocus}\r\n          onBlur={handleOnBlur}\r\n          value={inputText}\r\n          placeholder={placeholder}\r\n          onChangeText={handleInputChange}\r\n          style={{\r\n            borderWidth: border ? 1 : 0,\r\n          }}\r\n        />\r\n\r\n        <Animated.View\r\n          style={{\r\n            maxHeight: contentHeight,\r\n            position: \"relative\",\r\n            width: normalize(300),\r\n            maxWidth: 500,\r\n            justifyContent: \"center\",\r\n            alignItems: \"center\",\r\n            alignSelf: \"center\",\r\n          }}\r\n        >\r\n          <Animated.View\r\n            style={{\r\n              maxHeight: contentHeight,\r\n              overflow: \"scroll\",\r\n              alignSelf: \"stretch\",\r\n            }}\r\n          >\r\n            {shownItems.map(item => (\r\n              <Animated.View\r\n                key={item.id}\r\n                style={{\r\n                  maxHeight: rowHeight,\r\n                }}\r\n              >\r\n                <Pressable\r\n                  key={item.id}\r\n                  onPress={() => {\r\n                    handleItemClick(item);\r\n                  }}\r\n                  style={{\r\n                    paddingLeft: 12,\r\n                    height: 25,\r\n                  }}\r\n                >\r\n                  <Text>{item.title}</Text>\r\n                </Pressable>\r\n              </Animated.View>\r\n            ))}\r\n          </Animated.View>\r\n        </Animated.View>\r\n      </View>\r\n    </Animated.View>\r\n  );\r\n};\r\n\r\nexport default Dropdown;\r\n","import React, { Children } from \"react\";\r\nimport { PageContainer, Text, Separator } from \"./Themed\";\r\nimport { StyleSheet } from \"react-native\";\r\n\r\ninterface PageProps {\r\n  title?: string;\r\n  children: React.ReactNode | React.ReactNode[];\r\n}\r\n\r\nexport function Page({ title, children }: PageProps) {\r\n  return (\r\n    <PageContainer style={styles.container}>\r\n      {title && <Text style={styles.title}>{title}</Text>}\r\n      {title && <Separator />}\r\n      {children}\r\n    </PageContainer>\r\n  );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    alignItems: \"center\",\r\n  },\r\n  title: {\r\n    fontSize: 20,\r\n    fontWeight: \"bold\",\r\n  },\r\n  separator: {\r\n    marginVertical: 30,\r\n    height: 1,\r\n    width: \"80%\",\r\n  },\r\n});\r\n","import { Action, Reducer } from \"redux\";\r\nimport { BuyItem, Item } from \"../helpers/models\";\r\nimport { getAccessToken } from \"../screens/authentication/services/authenticationService\";\r\nimport {\r\n  deletee,\r\n  get,\r\n  post,\r\n  put,\r\n} from \"../services/communication/connectionService\";\r\nimport { ADD_ITEM, LOAD_ITEMS } from \"./constants\";\r\nimport { AppThunk } from \"./store\";\r\n\r\nexport interface ItemsState {\r\n  items: Item[];\r\n  showDeleted: boolean;\r\n}\r\n\r\ninterface AddItemAction {\r\n  type: \"ADD_ITEM\";\r\n  item: Item;\r\n}\r\n\r\ninterface EditItemAction {\r\n  type: \"EDIT_ITEM\";\r\n  item: Item;\r\n}\r\n\r\ninterface LoadItemsAction {\r\n  type: \"LOAD_ITEMS\";\r\n  items: Item[];\r\n}\r\n\r\ninterface LoadAllItemsAction {\r\n  type: \"LOAD_ALL_ITEMS\";\r\n  items: Item[];\r\n}\r\n\r\ninterface DeleteItemAction {\r\n  type: \"DELETE_ITEM\";\r\n  itemId: string;\r\n}\r\n\r\ninterface BuyItemsAction {\r\n  type: \"BUY_ITEM\";\r\n  buyItem: BuyItem;\r\n}\r\n\r\ninterface SetShowDeletedAction {\r\n  type: \"SET_SHOW_DELETED\";\r\n  showDeleted: boolean;\r\n}\r\n\r\nexport type KnownAction =\r\n  | AddItemAction\r\n  | LoadItemsAction\r\n  | LoadAllItemsAction\r\n  | EditItemAction\r\n  | DeleteItemAction\r\n  | BuyItemsAction\r\n  | SetShowDeletedAction;\r\n\r\nexport const addItem = (item: Item): AddItemAction => ({\r\n  type: ADD_ITEM,\r\n  item,\r\n});\r\n\r\nexport const editItem = (item: Item): EditItemAction => ({\r\n  type: \"EDIT_ITEM\",\r\n  item,\r\n});\r\n\r\nexport const deleteItem = (itemId: string): DeleteItemAction => ({\r\n  type: \"DELETE_ITEM\",\r\n  itemId,\r\n});\r\n\r\nexport const loadItems = (items: Item[]): LoadItemsAction => ({\r\n  type: LOAD_ITEMS,\r\n  items,\r\n});\r\n\r\nexport const loadAllItems = (items: Item[]): LoadAllItemsAction => ({\r\n  type: \"LOAD_ALL_ITEMS\",\r\n  items,\r\n});\r\n\r\nexport const buyItem = (buyItem: BuyItem): BuyItemsAction => ({\r\n  type: \"BUY_ITEM\",\r\n  buyItem,\r\n});\r\n\r\nexport const setShowDeleted = (showDeleted: boolean): SetShowDeletedAction => ({\r\n  type: \"SET_SHOW_DELETED\",\r\n  showDeleted,\r\n});\r\n\r\nexport const actionCreators = {\r\n  onAddItem: (itemDTO: Item): AppThunk<void, KnownAction> => {\r\n    return async (dispatch: any) => {\r\n      post<Item>(\"api/items/\", {\r\n        ...itemDTO,\r\n        accessToken: await getAccessToken(),\r\n      })\r\n        .then((item) => {\r\n          dispatch(addItem(item));\r\n        })\r\n        .catch((ex) => {\r\n          console.log(ex);\r\n        });\r\n    };\r\n  },\r\n  onLoadItems: (): AppThunk<void, KnownAction> => {\r\n    return async (dispatch: any) => {\r\n      get<Item[]>(`api/items?accessToken=${await getAccessToken()}`)\r\n        .then((items) => {\r\n          dispatch(loadItems(items));\r\n        })\r\n        .catch((error) => {\r\n          console.log(error);\r\n        });\r\n    };\r\n  },\r\n  onLoadAllItems: (): AppThunk<void, KnownAction> => {\r\n    return async (dispatch: any) => {\r\n      get<Item[]>(`api/items/get-all?accessToken=${await getAccessToken()}`)\r\n        .then((items) => {\r\n          dispatch(loadAllItems(items));\r\n        })\r\n        .catch((error) => {\r\n          console.log(error);\r\n        });\r\n    };\r\n  },\r\n  onEditItem: (itemDTO: Item): AppThunk<void, KnownAction> => {\r\n    return async (dispatch: any) => {\r\n      put<Item>(\"api/items/\", {\r\n        ...itemDTO,\r\n        accessToken: await getAccessToken(),\r\n      })\r\n        .then((isUpdated) => {\r\n          isUpdated && dispatch(editItem(itemDTO));\r\n        })\r\n        .catch((ex) => {\r\n          console.log(ex);\r\n        });\r\n    };\r\n  },\r\n  onDeleteItem: (itemId: string): AppThunk<void, KnownAction> => {\r\n    return (dispatch: any) => {\r\n      deletee(\"api/items/\", itemId).then((isDeleted) => {\r\n        isDeleted && dispatch(deleteItem(itemId));\r\n      });\r\n    };\r\n  },\r\n  onBuyItem: (item: BuyItem): AppThunk<void, KnownAction> => {\r\n    return async (dispatch: any) => {\r\n      post<BuyItem>(\"api/items/buy-item\", {\r\n        ...item,\r\n        accessToken: await getAccessToken(),\r\n      }).then((item) => {\r\n        dispatch(buyItem(item));\r\n      });\r\n    };\r\n  },\r\n  onItemRecovery: (itemId: string): AppThunk<void, KnownAction> => {\r\n    return async (dispatch: any) => {\r\n      post<Item>(\"api/items/item-recovery\", {\r\n        itemId,\r\n        accessToken: await getAccessToken(),\r\n      }).then((item: Item) => {\r\n        dispatch(editItem(item));\r\n      });\r\n    };\r\n  },\r\n  setShowDeleted: (showDeleted: boolean): AppThunk<void, KnownAction> => {\r\n    return (dispatch: any) => {\r\n      dispatch(setShowDeleted(showDeleted));\r\n    };\r\n  },\r\n};\r\n\r\nconst initialState = { items: [], showDeleted: false };\r\n\r\nexport const reducer: Reducer<ItemsState> = (\r\n  state = initialState,\r\n  incomingAction: Action\r\n): ItemsState => {\r\n  const action = incomingAction as KnownAction;\r\n  switch (action.type) {\r\n    case ADD_ITEM:\r\n      return { ...state, items: [...state.items, action.item] };\r\n    case LOAD_ITEMS:\r\n      return { ...state, items: action.items };\r\n    case \"LOAD_ALL_ITEMS\":\r\n      return { ...state, items: action.items };\r\n    case \"EDIT_ITEM\":\r\n      return {\r\n        ...state,\r\n        items: [\r\n          ...state.items.map((item) => {\r\n            if (item.id === action.item.id) return { ...action.item };\r\n            return item;\r\n          }),\r\n        ],\r\n      };\r\n    case \"DELETE_ITEM\":\r\n      return {\r\n        ...state,\r\n        items: state.showDeleted\r\n          ? [\r\n              ...state.items.map((item) => {\r\n                if (item.id === action.itemId)\r\n                  return { ...item, isDeleted: true };\r\n                return item;\r\n              }),\r\n            ]\r\n          : [...state.items.filter((item) => item.id !== action.itemId)],\r\n      };\r\n    case \"BUY_ITEM\":\r\n      return {\r\n        ...state,\r\n        items: [\r\n          ...state.items.map((item) => {\r\n            if (item.id === action.buyItem.itemId)\r\n              return {\r\n                ...item,\r\n                qtty: (\r\n                  Number(item.qtty) + Number(action.buyItem.qtty)\r\n                ).toString(),\r\n                basePrice: action.buyItem.basePrice,\r\n              };\r\n            return item;\r\n          }),\r\n        ],\r\n      };\r\n    case \"SET_SHOW_DELETED\":\r\n      return {\r\n        ...state,\r\n        showDeleted: action.showDeleted,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","export const ADD_ITEM = \"ADD_ITEM\";\r\nexport const LOAD_ITEMS = \"LOAD_ITEMS\";\r\n","import { Action, Reducer } from \"redux\";\r\nimport { AppThunk } from \"./store\";\r\n\r\nexport interface ModalState {\r\n  title: string;\r\n}\r\n\r\nexport interface ChangeTitleAction {\r\n  type: \"CHANGE_TITLE\";\r\n  title: string;\r\n}\r\n\r\nexport const changeTitle = (title: string): ChangeTitleAction => ({\r\n  type: \"CHANGE_TITLE\",\r\n  title,\r\n});\r\n\r\nexport const actionCreators = {\r\n  onTitleChange: (title: string): AppThunk<void, ChangeTitleAction> => {\r\n    return (dispatch) => {\r\n      dispatch<any>(changeTitle(title));\r\n    };\r\n  },\r\n};\r\n\r\nconst initialState = {\r\n  title: \"\",\r\n};\r\n\r\nexport const reducer: Reducer<ModalState> = (\r\n  state = initialState,\r\n  incomingAction: Action\r\n): ModalState => {\r\n  const action = incomingAction as ChangeTitleAction;\r\n  switch (action.type) {\r\n    case \"CHANGE_TITLE\":\r\n      return { title: action.title };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import { useNavigation } from \"@react-navigation/native\";\r\nimport React, { FunctionComponent, useState } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport Dropdown from \"../../components/dropdowns/Dropdown\";\r\nimport { Page } from \"../../components/Page\";\r\nimport { Button, Input } from \"../../components/Themed\";\r\nimport { Item, Partner } from \"../../helpers/models\";\r\nimport { actionCreators } from \"../../redux/itemActions\";\r\nimport { actionCreators as modalActionCreators } from \"../../redux/modalActions\";\r\nimport { AppState } from \"../../redux/store\";\r\n\r\ninterface Props {\r\n  itemId?: string;\r\n  items: Item[];\r\n  partners: Partner[];\r\n  onItemAdded: (item: Item) => void;\r\n  onItemEdited: (item: Item) => void;\r\n  onModalTitleChanged: (title: string) => void;\r\n}\r\n\r\nconst emptyItem = {\r\n  name: \"\",\r\n  basePrice: \"\",\r\n  sellPrice: \"\",\r\n  partnerId: \"\",\r\n  qtty: \"\",\r\n} as Item;\r\n\r\nconst AddItemScreen: FunctionComponent<Props> = ({\r\n  itemId,\r\n  items,\r\n  partners,\r\n  onItemAdded,\r\n  onModalTitleChanged,\r\n  onItemEdited,\r\n}) => {\r\n  const currentItem = items.find((i) => i.id === itemId);\r\n  const [item, setItem] = useState(currentItem ?? emptyItem);\r\n  const navigator = useNavigation();\r\n\r\n  const [selectableItems] = useState(\r\n    partners.map((partner) => ({\r\n      id: partner.id,\r\n      title: partner.name,\r\n    }))\r\n  );\r\n\r\n  if (currentItem) {\r\n    onModalTitleChanged(\"Редакция на стока\");\r\n  } else {\r\n    onModalTitleChanged(\"Добавяне на стока\");\r\n  }\r\n\r\n  const onTextChange = (name: string, value: string) => {\r\n    setItem({\r\n      ...item,\r\n      [name]: value,\r\n    });\r\n  };\r\n\r\n  const handlePartnerSelect = (partnerId: string) => {\r\n    setItem({ ...item, partnerId });\r\n  };\r\n\r\n  return (\r\n    <Page>\r\n      <Input\r\n        label=\"Име на стоката:\"\r\n        onChangeText={(txt) => onTextChange(\"name\", txt)}\r\n        value={item.name}\r\n        border={true}\r\n      />\r\n      <Dropdown\r\n        placeholder=\"Въведете име на доставчик\"\r\n        selectedItem={\r\n          currentItem\r\n            ? {\r\n                id: currentItem.partnerId,\r\n                title:\r\n                  partners.find(\r\n                    (partner) => partner.id === currentItem.partnerId\r\n                  )?.name ?? \"\",\r\n              }\r\n            : undefined\r\n        }\r\n        items={selectableItems}\r\n        handleItemChosen={handlePartnerSelect}\r\n        label=\"Име на доставчик\"\r\n        border={true}\r\n        style={{ marginBottom: 15 }}\r\n      />\r\n      {!currentItem && (\r\n        <Input\r\n          label=\"Доставна цена:\"\r\n          onChangeText={(txt) => onTextChange(\"basePrice\", txt)}\r\n          value={item.basePrice.toString()}\r\n          keyboardType=\"numeric\"\r\n          border={true}\r\n        />\r\n      )}\r\n      {!currentItem && (\r\n        <Input\r\n          label=\"Количество:\"\r\n          onChangeText={(txt) => onTextChange(\"qtty\", txt)}\r\n          value={item.qtty}\r\n          keyboardType=\"numeric\"\r\n          border={true}\r\n        />\r\n      )}\r\n      <Input\r\n        label=\"Продажна цена:\"\r\n        onChangeText={(txt) => onTextChange(\"sellPrice\", txt)}\r\n        value={item.sellPrice.toString()}\r\n        keyboardType=\"numeric\"\r\n        border={true}\r\n      />\r\n      <Button\r\n        label={currentItem ? \"Редакция на стока\" : \"Добавяне на стока\"}\r\n        onPress={() => {\r\n          currentItem ? onItemEdited(item) : onItemAdded(item);\r\n          setItem(emptyItem);\r\n          navigator.navigate(\"ItemsListScreen\");\r\n        }}\r\n      />\r\n    </Page>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state: AppState) => ({\r\n  items: state.items!.items,\r\n  partners: state.partners!.partners,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch: any) => {\r\n  return {\r\n    onItemAdded: (item: Item) => {\r\n      dispatch(actionCreators.onAddItem(item));\r\n    },\r\n    onItemEdited: (item: Item) => {\r\n      dispatch(actionCreators.onEditItem(item));\r\n    },\r\n    onModalTitleChanged: (modalTitle: string) => {\r\n      dispatch(modalActionCreators.onTitleChange(modalTitle));\r\n    },\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(AddItemScreen);\r\n","export const getDateFormated = (date: Date) => {\r\n  const tempDate = new Date(date);\r\n  return `${toTwoDigitNumber(tempDate.getDate())}.${toTwoDigitNumber(\r\n    tempDate.getMonth() + 1\r\n  )}.${tempDate.getFullYear()} ${toTwoDigitNumber(\r\n    tempDate.getHours()\r\n  )}:${toTwoDigitNumber(tempDate.getMinutes())}`;\r\n};\r\n\r\nconst toTwoDigitNumber = (number: number) => {\r\n  return number.toLocaleString(\"en-US\", {\r\n    minimumIntegerDigits: 2,\r\n    useGrouping: false,\r\n  });\r\n};\r\n\r\nexport const toDecimalFormat = (number: number) => {\r\n  return (Math.round(number * 100) / 100).toFixed(2);\r\n};\r\n\r\nexport const textToDecimalFormat = (text: string) => {\r\n  const number = Number(text);\r\n  return (Math.round(number * 100) / 100).toFixed(2);\r\n};\r\n","import { FontAwesome } from \"@expo/vector-icons\";\r\nimport React, { FunctionComponent, useRef, useState } from \"react\";\r\nimport { Animated } from \"react-native\";\r\nimport { DataTable } from \"react-native-paper\";\r\nimport { useAlerts } from \"react-native-paper-alerts\";\r\nimport { AlertsMethods } from \"react-native-paper-alerts/lib/typescript/type\";\r\nimport GestureRecognizer from \"react-native-swipe-gestures\";\r\nimport { toDecimalFormat } from \"../../helpers/extensions\";\r\nimport {\r\n  AlertModalProps,\r\n  Column,\r\n  IListable,\r\n  TableAction,\r\n} from \"../../helpers/models\";\r\n\r\ntype TableBodyProps = {\r\n  columns: Column[];\r\n  data: IListable[];\r\n  deleteProps?: AlertModalProps;\r\n  onEdit?: (itemId: string) => void;\r\n  additionalActions?: TableAction[];\r\n  showDeleted?: {\r\n    showDeleted: boolean;\r\n    setShowDeleted: (showDeleted: boolean) => void;\r\n    recoverProps: AlertModalProps;\r\n  };\r\n};\r\n\r\nconst MobileBody = ({\r\n  columns,\r\n  data,\r\n  deleteProps,\r\n  onEdit,\r\n  additionalActions,\r\n  showDeleted,\r\n}: TableBodyProps) => {\r\n  const [showAdditionalMenus, setShowAdditionalMenus] = useState(\"\");\r\n  const translateAnim = useRef(new Animated.Value(300)).current;\r\n  const alerts = useAlerts();\r\n  const createTwoButtonAlert = (\r\n    itemId: string,\r\n    alertProps: AlertModalProps,\r\n    alerts: AlertsMethods\r\n  ) =>\r\n    alerts.alert(alertProps.title, alertProps.content, [\r\n      {\r\n        text: alertProps.cancelBtnTxt,\r\n      },\r\n      {\r\n        text: alertProps.acceptBtnTxt,\r\n        onPress: () => alertProps.onAction(itemId),\r\n      },\r\n    ]);\r\n\r\n  return (\r\n    <>\r\n      {data &&\r\n        data.map((item) => {\r\n          return (\r\n            (!showDeleted ||\r\n              showDeleted.showDeleted ||\r\n              (!showDeleted.showDeleted && !item.isDeleted)) && (\r\n              <GestureRecognizer\r\n                key={item.id}\r\n                onSwipeLeft={() => {\r\n                  if (item.id !== showAdditionalMenus) {\r\n                    translateAnim.setValue(300);\r\n                    setShowAdditionalMenus(item.id);\r\n                    Animated.timing(translateAnim, {\r\n                      toValue: 0,\r\n                      duration: 200,\r\n                      useNativeDriver: true,\r\n                    }).start();\r\n                  }\r\n                }}\r\n                onSwipeRight={() => {\r\n                  Animated.timing(translateAnim, {\r\n                    toValue: 300,\r\n                    duration: 200,\r\n                    useNativeDriver: true,\r\n                  }).start(() => setShowAdditionalMenus(\"\"));\r\n                }}\r\n              >\r\n                <DataTable.Row\r\n                  style={{\r\n                    backgroundColor: item.isDeleted\r\n                      ? \"rgba(255, 0, 0, 0.05)\"\r\n                      : \"white\",\r\n                  }}\r\n                >\r\n                  {columns.map((column) => {\r\n                    return (\r\n                      <DataTable.Cell\r\n                        key={column.name}\r\n                        style={{\r\n                          flex: column.flex ?? 1,\r\n                        }}\r\n                      >\r\n                        {column.isMoney\r\n                          ? toDecimalFormat(Number(item[column.propName]))\r\n                          : item[column.propName]}\r\n                      </DataTable.Cell>\r\n                    );\r\n                  })}\r\n                  {showAdditionalMenus == item.id &&\r\n                    (onEdit ||\r\n                      deleteProps ||\r\n                      additionalActions ||\r\n                      (showDeleted && item.isDeleted)) && (\r\n                      <Animated.View\r\n                        key={item.id}\r\n                        style={{\r\n                          alignSelf: \"center\",\r\n                          flexDirection: \"row\",\r\n                          transform: [{ translateX: translateAnim }],\r\n                        }}\r\n                      >\r\n                        {additionalActions &&\r\n                          additionalActions.map((action) => (\r\n                            <FontAwesome\r\n                              name={action.name}\r\n                              size={30}\r\n                              color={action.color}\r\n                              style={{\r\n                                alignSelf: \"center\",\r\n                                marginRight: 10,\r\n                              }}\r\n                              onPress={() => {\r\n                                action.onPress(item);\r\n                                setShowAdditionalMenus(\"\");\r\n                              }}\r\n                            />\r\n                          ))}\r\n                        {onEdit && (\r\n                          <FontAwesome\r\n                            name=\"edit\"\r\n                            size={30}\r\n                            color=\"green\"\r\n                            style={{\r\n                              alignSelf: \"center\",\r\n                              marginRight: 10,\r\n                            }}\r\n                            onPress={() => {\r\n                              onEdit(item.id);\r\n                              setShowAdditionalMenus(\"\");\r\n                            }}\r\n                          />\r\n                        )}\r\n                        {deleteProps && !item.isDeleted && (\r\n                          <FontAwesome\r\n                            name=\"remove\"\r\n                            size={30}\r\n                            color=\"green\"\r\n                            style={{\r\n                              alignSelf: \"center\",\r\n                              paddingBottom: 4,\r\n                            }}\r\n                            onPress={() =>\r\n                              createTwoButtonAlert(item.id, deleteProps, alerts)\r\n                            }\r\n                          />\r\n                        )}\r\n                        {showDeleted && item.isDeleted && (\r\n                          <FontAwesome\r\n                            name=\"arrow-down\"\r\n                            size={30}\r\n                            color=\"green\"\r\n                            style={{\r\n                              alignSelf: \"center\",\r\n                              paddingBottom: 4,\r\n                            }}\r\n                            onPress={() =>\r\n                              createTwoButtonAlert(\r\n                                item.id,\r\n                                showDeleted.recoverProps,\r\n                                alerts\r\n                              )\r\n                            }\r\n                          />\r\n                        )}\r\n                      </Animated.View>\r\n                    )}\r\n                </DataTable.Row>\r\n              </GestureRecognizer>\r\n            )\r\n          );\r\n        })}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default MobileBody;\r\n","import { FontAwesome } from \"@expo/vector-icons\";\r\nimport React from \"react\";\r\nimport { Animated } from \"react-native\";\r\nimport { DataTable } from \"react-native-paper\";\r\nimport { useAlerts } from \"react-native-paper-alerts\";\r\nimport { AlertsMethods } from \"react-native-paper-alerts/lib/typescript/type\";\r\nimport { toDecimalFormat } from \"../../helpers/extensions\";\r\nimport {\r\n  AlertModalProps,\r\n  Column,\r\n  IListable,\r\n  TableAction,\r\n} from \"../../helpers/models\";\r\n\r\ntype TableBodyProps = {\r\n  columns: Column[];\r\n  data: IListable[];\r\n  deleteProps?: AlertModalProps;\r\n  onEdit?: (itemId: string) => void;\r\n  additionalActions?: TableAction[];\r\n  showDeleted?: {\r\n    showDeleted: boolean;\r\n    setShowDeleted: (showDeleted: boolean) => void;\r\n    recoverProps: AlertModalProps;\r\n  };\r\n};\r\n\r\nconst TableBody = ({\r\n  columns,\r\n  data,\r\n  deleteProps,\r\n  onEdit,\r\n  additionalActions,\r\n  showDeleted,\r\n}: TableBodyProps) => {\r\n  const alerts = useAlerts();\r\n  const createTwoButtonAlert = (\r\n    itemId: string,\r\n    alertProps: AlertModalProps,\r\n    alerts: AlertsMethods\r\n  ) =>\r\n    alerts.alert(alertProps.title, alertProps.content, [\r\n      {\r\n        text: alertProps.cancelBtnTxt,\r\n      },\r\n      {\r\n        text: alertProps.acceptBtnTxt,\r\n        onPress: () => alertProps.onAction(itemId),\r\n      },\r\n    ]);\r\n\r\n  return (\r\n    <>\r\n      {data &&\r\n        Array.isArray(data) &&\r\n        data.map((item) => {\r\n          return (\r\n            (!showDeleted ||\r\n              showDeleted.showDeleted ||\r\n              (!showDeleted.showDeleted && !item.isDeleted)) && (\r\n              <DataTable.Row\r\n                key={item.id}\r\n                style={{\r\n                  backgroundColor: item.isDeleted\r\n                    ? \"rgba(255, 0, 0, 0.05)\"\r\n                    : \"white\",\r\n                }}\r\n              >\r\n                {columns.map((column) => {\r\n                  return (\r\n                    <DataTable.Cell\r\n                      key={column.name}\r\n                      style={{\r\n                        flex: column.flex ?? 1,\r\n                      }}\r\n                    >\r\n                      {column.isMoney\r\n                        ? toDecimalFormat(Number(item[column.propName]))\r\n                        : item[column.propName]}\r\n                    </DataTable.Cell>\r\n                  );\r\n                })}\r\n                {(onEdit ||\r\n                  deleteProps ||\r\n                  additionalActions ||\r\n                  (showDeleted && item.isDeleted)) && (\r\n                  <Animated.View\r\n                    key={item.id}\r\n                    style={{\r\n                      alignSelf: \"center\",\r\n                      flexDirection: \"row\",\r\n                    }}\r\n                  >\r\n                    {additionalActions &&\r\n                      additionalActions.map((action) => (\r\n                        <FontAwesome\r\n                          name={action.name}\r\n                          size={30}\r\n                          color={action.color}\r\n                          style={{\r\n                            alignSelf: \"center\",\r\n                            marginRight: 10,\r\n                          }}\r\n                          onPress={() => action.onPress(item)}\r\n                        />\r\n                      ))}\r\n                    {onEdit && (\r\n                      <FontAwesome\r\n                        name=\"edit\"\r\n                        size={30}\r\n                        color=\"green\"\r\n                        style={{\r\n                          alignSelf: \"center\",\r\n                          marginRight: 10,\r\n                        }}\r\n                        onPress={() => onEdit(item.id)}\r\n                      />\r\n                    )}\r\n                    {deleteProps && !item.isDeleted && (\r\n                      <FontAwesome\r\n                        name=\"remove\"\r\n                        size={30}\r\n                        color=\"green\"\r\n                        style={{\r\n                          alignSelf: \"center\",\r\n                          paddingBottom: 4,\r\n                        }}\r\n                        onPress={() =>\r\n                          createTwoButtonAlert(item.id, deleteProps, alerts)\r\n                        }\r\n                      />\r\n                    )}\r\n                    {showDeleted && item.isDeleted && (\r\n                      <FontAwesome\r\n                        name=\"arrow-down\"\r\n                        size={30}\r\n                        color=\"green\"\r\n                        style={{\r\n                          alignSelf: \"center\",\r\n                          paddingBottom: 4,\r\n                        }}\r\n                        onPress={() =>\r\n                          createTwoButtonAlert(\r\n                            item.id,\r\n                            showDeleted.recoverProps,\r\n                            alerts\r\n                          )\r\n                        }\r\n                      />\r\n                    )}\r\n                  </Animated.View>\r\n                )}\r\n              </DataTable.Row>\r\n            )\r\n          );\r\n        })}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default TableBody;\r\n","import React, { FunctionComponent } from \"react\";\r\nimport { DataTable } from \"react-native-paper\";\r\nimport {\r\n  Column,\r\n  AlertModalProps as AlertModalProps,\r\n  IListable,\r\n  TableAction,\r\n} from \"../../helpers/models\";\r\nimport { isMobileScreen, normalize } from \"../../helpers/screenSizing\";\r\nimport {  Switch } from \"react-native\";\r\nimport MobileBody from \"./MobileBody\";\r\nimport TableBody from \"./TableBody\";\r\n\r\ntype RowProps = {\r\n  columns: Column[];\r\n};\r\n\r\ntype TableProps = {\r\n  columns: Column[];\r\n  data: IListable[];\r\n  deleteProps?: AlertModalProps;\r\n  onEdit?: (itemId: string) => void;\r\n  additionalActions?: TableAction[];\r\n  showDeleted?: {\r\n    showDeleted: boolean;\r\n    setShowDeleted: (showDeleted: boolean) => void;\r\n    recoverProps: AlertModalProps;\r\n  };\r\n};\r\n\r\nconst Table: FunctionComponent<TableProps> = ({\r\n  columns,\r\n  data,\r\n  deleteProps,\r\n  onEdit,\r\n  additionalActions,\r\n  showDeleted,\r\n}) => {\r\n  const renderHeader: FunctionComponent<RowProps> = ({ columns }) => {\r\n    return (\r\n      <DataTable.Header>\r\n        <>\r\n          {columns &&\r\n            columns.map((column) => {\r\n              return (\r\n                <DataTable.Title\r\n                  key={column.name}\r\n                  style={{ flex: column.flex ?? 1 }}\r\n                >\r\n                  {column.name}\r\n                </DataTable.Title>\r\n              );\r\n            })}\r\n          {showDeleted && (\r\n            <Switch\r\n              trackColor={{ false: \"#767577\", true: \"#81b0ff\" }}\r\n              thumbColor={showDeleted.showDeleted ? \"#f5dd4b\" : \"#f4f3f4\"}\r\n              ios_backgroundColor=\"#3e3e3e\"\r\n              onValueChange={showDeleted.setShowDeleted}\r\n              style={{ alignSelf: \"flex-end\", marginBottom: 14 }}\r\n              value={showDeleted.showDeleted}\r\n            />\r\n          )}\r\n        </>\r\n      </DataTable.Header>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <DataTable\r\n      style={{\r\n        width: normalize(300),\r\n      }}\r\n    >\r\n      {renderHeader({ columns })}\r\n      {isMobileScreen ? (\r\n        <MobileBody\r\n          columns={columns}\r\n          data={data}\r\n          deleteProps={deleteProps}\r\n          onEdit={onEdit}\r\n          additionalActions={additionalActions}\r\n          showDeleted={showDeleted}\r\n        />\r\n      ) : (\r\n        <TableBody\r\n          columns={columns}\r\n          data={data}\r\n          deleteProps={deleteProps}\r\n          onEdit={onEdit}\r\n          additionalActions={additionalActions}\r\n          showDeleted={showDeleted}\r\n        />\r\n      )}\r\n    </DataTable>\r\n  );\r\n};\r\n\r\nexport default Table;\r\n","import { NavigationProp } from \"@react-navigation/native\";\r\nimport React from \"react\";\r\nimport { AlertModalProps, Column, IListable } from \"../../../../helpers/models\";\r\nimport { RootStackParamList } from \"../../../../types\";\r\n\r\ntype TableModelProps = {\r\n  columns: Column[];\r\n  listableItems: IListable[];\r\n  dispatch: any;\r\n  navigation: NavigationProp<RootStackParamList>;\r\n  showDeleted?: {\r\n    showDeleted: boolean;\r\n    setShowDeleted: (showDeleted: boolean) => void;\r\n    recoverProps: AlertModalProps;\r\n  };\r\n};\r\n\r\nexport default abstract class TableModel extends React.Component<TableModelProps> {\r\n  public abstract onEdit: (listableId: string) => void;\r\n  public abstract onDelete: (listableId: string) => void;\r\n}\r\n","import { useNavigation } from \"@react-navigation/native\";\r\nimport React, { FunctionComponent, useEffect, useState } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Page } from \"../../components/Page\";\r\nimport { Button, Input, Text } from \"../../components/Themed\";\r\nimport { toDecimalFormat } from \"../../helpers/extensions\";\r\nimport { BuyItem, Item } from \"../../helpers/models\";\r\nimport { actionCreators } from \"../../redux/modalActions\";\r\nimport { actionCreators as itemsActions } from \"../../redux/itemActions\";\r\n\r\ntype Props = {\r\n  item: Item;\r\n  onModalTitleChanged: (modalTitle: string) => void;\r\n  onBuyItem: (buyItem: BuyItem) => void;\r\n};\r\n\r\nconst BuyItemScreen: FunctionComponent<Props> = ({\r\n  item,\r\n  onModalTitleChanged,\r\n  onBuyItem,\r\n}) => {\r\n  const [currentItem, setItem] = useState({ ...item, qtty: \"1\" });\r\n  const onTextChange = (name: string, value: string) => {\r\n    setItem({\r\n      ...currentItem,\r\n      [name]: value,\r\n    });\r\n  };\r\n  const navigator = useNavigation();\r\n\r\n  useEffect(() => onModalTitleChanged(\"Покупка на стока\"));\r\n\r\n  return (\r\n    <Page>\r\n      <Input label=\"Име на стоката:\" value={currentItem.name} border={true} />\r\n      <Input\r\n        label=\"Доставна цена:\"\r\n        onChangeText={txt => onTextChange(\"basePrice\", txt)}\r\n        value={currentItem.basePrice}\r\n        keyboardType=\"numeric\"\r\n        border={true}\r\n      />\r\n      <Input\r\n        label=\"Количество:\"\r\n        onChangeText={txt => onTextChange(\"qtty\", txt)}\r\n        value={currentItem.qtty}\r\n        keyboardType=\"numeric\"\r\n        border={true}\r\n      />\r\n      <Input\r\n        label=\"Продажна цена:\"\r\n        value={currentItem.sellPrice}\r\n        keyboardType=\"numeric\"\r\n        border={true}\r\n      />\r\n      <Text\r\n        style={{\r\n          margin: 0,\r\n        }}\r\n      >\r\n        Сума за покупка:{\" \"}\r\n        {toDecimalFormat(\r\n          Number(currentItem.qtty) * Number(currentItem.basePrice)\r\n        )}\r\n      </Text>\r\n      <Button\r\n        label={\"Завършване на покупка\"}\r\n        onPress={() => {\r\n          onBuyItem({\r\n            qtty: currentItem.qtty,\r\n            basePrice: currentItem.basePrice,\r\n            itemId: currentItem.id,\r\n          });\r\n          navigator.goBack();\r\n        }}\r\n      />\r\n    </Page>\r\n  );\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: any) => {\r\n  return {\r\n    onModalTitleChanged: (modalTitle: string) => {\r\n      dispatch(actionCreators.onTitleChange(modalTitle));\r\n    },\r\n    onBuyItem: (buyItem: BuyItem) => {\r\n      dispatch(itemsActions.onBuyItem(buyItem));\r\n    },\r\n  };\r\n};\r\n\r\nexport default connect(null, mapDispatchToProps)(BuyItemScreen);\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport Table from \"../../Table\";\r\nimport { actionCreators } from \"../../../../redux/itemActions\";\r\nimport { AppState } from \"../../../../redux/store\";\r\nimport TableModel from \"./TableModel\";\r\nimport AddItemScreen from \"../../../../screens/items/AddItemScreen\";\r\nimport { Item, TableAction } from \"../../../../helpers/models\";\r\nimport BuyItemScreen from \"../../../../screens/items/BuyItemScreen\";\r\n\r\nclass ItemsTable extends TableModel {\r\n  render() {\r\n    const { listableItems, columns, showDeleted } = this.props;\r\n    const additionalActions = [\r\n      {\r\n        name: \"plus\",\r\n        color: \"green\",\r\n        onPress: (item: Item) => {\r\n          const { navigation } = this.props;\r\n          navigation.navigate(\"Modal\", {\r\n            component: <BuyItemScreen item={item} />,\r\n          });\r\n        },\r\n      } as TableAction,\r\n    ];\r\n    return (\r\n      <Table\r\n        data={listableItems}\r\n        columns={columns}\r\n        deleteProps={{\r\n          title: \"Изтриване на стока\",\r\n          content: \"Желаете ли да изтриете избраната стока\",\r\n          cancelBtnTxt: \"Отказ\",\r\n          acceptBtnTxt: \"Изтриване\",\r\n          onAction: this.onDelete,\r\n        }}\r\n        onEdit={this.onEdit}\r\n        additionalActions={additionalActions}\r\n        showDeleted={showDeleted}\r\n      />\r\n    );\r\n  }\r\n\r\n  public onDelete = (id: string) => {\r\n    const { dispatch } = this.props;\r\n\r\n    dispatch(actionCreators.onDeleteItem(id));\r\n  };\r\n\r\n  public onEdit = (id: string) => {\r\n    const { navigation } = this.props;\r\n    navigation.navigate(\"Modal\", {\r\n      component: <AddItemScreen itemId={id} />,\r\n    });\r\n  };\r\n}\r\n\r\nconst mapStateToProps = (state: AppState) => {\r\n  return { items: state.items!.items };\r\n};\r\n\r\nexport default connect(mapStateToProps)(ItemsTable);\r\n","import { useNavigation } from \"@react-navigation/native\";\r\nimport React, { useEffect } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Page } from \"../../components/Page\";\r\nimport ItemsTable from \"../../components/Table/types/classes/ItemsTable\";\r\nimport { Column, Item } from \"../../helpers/models\";\r\nimport { isMobileScreen } from \"../../helpers/screenSizing\";\r\nimport { actionCreators } from \"../../redux/itemActions\";\r\nimport { AppState } from \"../../redux/store\";\r\n\r\ninterface Props {\r\n  onItemsLoaded: () => void;\r\n  onAllItemsLoaded: () => void;\r\n  onItemRecovery: (itemId: string) => void;\r\n  items: Item[];\r\n  showDeleted: boolean;\r\n  onShowDeletedChanged: (showDeleted: boolean) => void;\r\n}\r\n\r\nconst ItemsListScreen: React.FunctionComponent<Props> = ({\r\n  items,\r\n  onItemsLoaded,\r\n  onAllItemsLoaded,\r\n  onItemRecovery,\r\n  showDeleted,\r\n  onShowDeletedChanged,\r\n}) => {\r\n  const navigation = useNavigation();\r\n\r\n  useEffect(() => {\r\n    showDeleted ? onAllItemsLoaded() : onItemsLoaded();\r\n  }, [showDeleted]);\r\n\r\n  const columns = [\r\n    { name: \"Име на стока\", propName: \"name\", flex: 6 },\r\n    {\r\n      name: isMobileScreen ? \"Д-на цена\" : \"Доставна цена\",\r\n      propName: \"basePrice\",\r\n      flex: isMobileScreen ? 2 : 1,\r\n      isRight: true,\r\n      isMoney: true,\r\n    },\r\n    {\r\n      name: isMobileScreen ? \"П-на цена\" : \"Продажна цена\",\r\n      propName: \"sellPrice\",\r\n      flex: isMobileScreen ? 2 : 1,\r\n      isRight: true,\r\n      isMoney: true,\r\n    },\r\n    {\r\n      name: \"К-во\",\r\n      propName: \"qtty\",\r\n      flex: 1,\r\n      isRight: true,\r\n      isMoney: true,\r\n    },\r\n  ] as Column[];\r\n\r\n  return (\r\n    <Page>\r\n      <ItemsTable\r\n        columns={columns}\r\n        listableItems={items}\r\n        navigation={navigation}\r\n        showDeleted={{\r\n          showDeleted,\r\n          setShowDeleted: onShowDeletedChanged,\r\n          recoverProps: {\r\n            title: \"Възстановяване на стока\",\r\n            content: \"Желаете ли да възстановите избраната стока\",\r\n            cancelBtnTxt: \"Отказ\",\r\n            acceptBtnTxt: \"Възстановяване\",\r\n            onAction: onItemRecovery,\r\n          },\r\n        }}\r\n      />\r\n    </Page>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state: AppState) => {\r\n  return {\r\n    items: state.items!.items,\r\n    showDeleted: state.items!.showDeleted,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: any) => {\r\n  return {\r\n    onItemsLoaded: () => {\r\n      dispatch(actionCreators.onLoadItems());\r\n    },\r\n    onItemRecovery: (itemId: string) => {\r\n      dispatch(actionCreators.onItemRecovery(itemId));\r\n    },\r\n    onAllItemsLoaded: () => {\r\n      dispatch(actionCreators.onLoadAllItems());\r\n    },\r\n    onShowDeletedChanged: (showDeleted: boolean) => {\r\n      dispatch(actionCreators.setShowDeleted(showDeleted));\r\n    },\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ItemsListScreen);\r\n","import { Action, Reducer } from \"redux\";\r\nimport { Partner } from \"../helpers/models\";\r\nimport { getAccessToken } from \"../screens/authentication/services/authenticationService\";\r\nimport {\r\n  deletee,\r\n  get,\r\n  post,\r\n  put,\r\n} from \"../services/communication/connectionService\";\r\nimport { AppThunk } from \"./store\";\r\n\r\nexport interface PartnersState {\r\n  partners: Partner[];\r\n  showDeleted: boolean;\r\n}\r\n\r\ninterface AddPartnerAction {\r\n  type: \"ADD_PARTNER\";\r\n  partner: Partner;\r\n}\r\n\r\ninterface EditPartnerAction {\r\n  type: \"EDIT_PARTNER\";\r\n  partner: Partner;\r\n}\r\n\r\ninterface LoadPartnersAction {\r\n  type: \"LOAD_PARTNERS\";\r\n  partners: Partner[];\r\n}\r\n\r\ninterface DeletePartnerAction {\r\n  type: \"DELETE_PARTNER\";\r\n  partnerId: string;\r\n}\r\n\r\ninterface SetShowDeletedAction {\r\n  type: \"SET_SHOW_DELETED\";\r\n  showDeleted: boolean;\r\n}\r\n\r\nexport type KnownAction =\r\n  | AddPartnerAction\r\n  | LoadPartnersAction\r\n  | EditPartnerAction\r\n  | DeletePartnerAction\r\n  | SetShowDeletedAction;\r\n\r\nexport const addPartner = (partner: Partner): AddPartnerAction => ({\r\n  type: \"ADD_PARTNER\",\r\n  partner,\r\n});\r\n\r\nexport const editPartner = (partner: Partner): EditPartnerAction => ({\r\n  type: \"EDIT_PARTNER\",\r\n  partner,\r\n});\r\n\r\nexport const deletePartner = (partnerId: string): DeletePartnerAction => ({\r\n  type: \"DELETE_PARTNER\",\r\n  partnerId,\r\n});\r\n\r\nexport const loadPartners = (partners: Partner[]): LoadPartnersAction => ({\r\n  type: \"LOAD_PARTNERS\",\r\n  partners,\r\n});\r\n\r\nexport const setShowDeleted = (showDeleted: boolean): SetShowDeletedAction => ({\r\n  type: \"SET_SHOW_DELETED\",\r\n  showDeleted,\r\n});\r\n\r\nexport const actionCreators = {\r\n  onAddPartner: (partnerDTO: Partner): AppThunk<void, KnownAction> => {\r\n    return async (dispatch: any) => {\r\n      post<Partner>(\"api/partners/\", {\r\n        ...partnerDTO,\r\n        accessToken: await getAccessToken(),\r\n      })\r\n        .then((partner) => {\r\n          dispatch(addPartner(partner));\r\n        })\r\n        .catch((er) => console.log(er));\r\n    };\r\n  },\r\n  onLoadPartners: (): AppThunk<void, KnownAction> => {\r\n    return async (dispatch: any) => {\r\n      get<Partner[]>(\r\n        `api/partners/get-all?accessToken=${await getAccessToken()}`\r\n      )\r\n        .then((partners) => {\r\n          dispatch(loadPartners(partners));\r\n        })\r\n        .catch((er) => console.log(er));\r\n    };\r\n  },\r\n  onEditPartner: (partnerDTO: Partner): AppThunk<void, KnownAction> => {\r\n    return async (dispatch: any) => {\r\n      put(\"api/partners/\", {\r\n        ...partnerDTO,\r\n        accessToken: await getAccessToken(),\r\n      }).then((isUpdated) => isUpdated && dispatch(editPartner(partnerDTO)));\r\n    };\r\n  },\r\n  onDeletePartner: (partnerId: string): AppThunk<void, KnownAction> => {\r\n    return (dispatch: any) => {\r\n      deletee(\"api/partners/\", partnerId).then(\r\n        (isDeleted) => isDeleted && dispatch(deletePartner(partnerId))\r\n      );\r\n    };\r\n  },\r\n  onPartnerRecovery: (partnerId: string): AppThunk<void, KnownAction> => {\r\n    return (dispatch: any) => {\r\n      post<Partner>(\"api/partners/partner-recovery\", partnerId).then(\r\n        (sale: Partner) => {\r\n          dispatch(editPartner(sale));\r\n        }\r\n      );\r\n    };\r\n  },\r\n  setShowDeleted: (showDeleted: boolean): AppThunk<void, KnownAction> => {\r\n    return (dispatch: any) => {\r\n      dispatch(setShowDeleted(showDeleted));\r\n    };\r\n  },\r\n};\r\n\r\nconst initialState = {\r\n  partners: [],\r\n  showDeleted: false,\r\n};\r\n\r\nexport const reducer: Reducer<PartnersState> = (\r\n  state = initialState,\r\n  incomingAction: Action\r\n): PartnersState => {\r\n  const action = incomingAction as KnownAction;\r\n  switch (action.type) {\r\n    case \"ADD_PARTNER\":\r\n      return { ...state, partners: [...state.partners, action.partner] };\r\n    case \"LOAD_PARTNERS\":\r\n      return { ...state, partners: action.partners };\r\n    case \"EDIT_PARTNER\":\r\n      return {\r\n        ...state,\r\n        partners: [\r\n          ...state.partners.map((partner) => {\r\n            if (partner.id === action.partner.id) return { ...action.partner };\r\n            return partner;\r\n          }),\r\n        ],\r\n      };\r\n    case \"DELETE_PARTNER\":\r\n      return {\r\n        ...state,\r\n        partners: [\r\n          ...state.partners.map((partner) => {\r\n            if (partner.id === action.partnerId)\r\n              return { ...partner, isDeleted: true };\r\n            return partner;\r\n          }),\r\n        ],\r\n      };\r\n    case \"SET_SHOW_DELETED\":\r\n      return {\r\n        ...state,\r\n        showDeleted: action.showDeleted,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import { connect } from \"react-redux\";\r\nimport { Partner } from \"../../helpers/models\";\r\nimport { actionCreators } from \"../../redux/partnerActions\";\r\nimport { actionCreators as modalActionCreators } from \"../../redux/modalActions\";\r\nimport React, { useState } from \"react\";\r\nimport { useNavigation } from \"@react-navigation/native\";\r\nimport { Button, Input } from \"../../components/Themed\";\r\nimport { Page } from \"../../components/Page\";\r\nimport { AppState } from \"../../redux/store\";\r\n\r\ntype AddPartnerScreenProps = {\r\n  partners: Partner[];\r\n  onPartnerAdded: (partner: Partner) => void;\r\n  onPartnerEdited: (partner: Partner) => void;\r\n  onModalTitleChanged: (title: string) => void;\r\n  partnerId?: string;\r\n};\r\n\r\nconst emptyPartner = {\r\n  id: \"\",\r\n  address: \"\",\r\n  name: \"\",\r\n  vatNumber: \"\",\r\n} as Partner;\r\n\r\nconst AddPartnerScreen = ({\r\n  onPartnerAdded,\r\n  partners,\r\n  onModalTitleChanged,\r\n  onPartnerEdited,\r\n  partnerId,\r\n}: AddPartnerScreenProps) => {\r\n  const currentPartner = partners && partners.find((p) => p.id === partnerId);\r\n  const [partner, setPartner] = useState(currentPartner ?? emptyPartner);\r\n  const navigator = useNavigation();\r\n  if (currentPartner) {\r\n    onModalTitleChanged(\"Редакция на партньор\");\r\n  } else {\r\n    onModalTitleChanged(\"Добавяне на партньор\");\r\n  }\r\n\r\n  const onTextChange = (name: string, value: string) => {\r\n    setPartner({\r\n      ...partner,\r\n      [name]: value,\r\n    });\r\n  };\r\n\r\n  return (\r\n    <Page>\r\n      <Input\r\n        label=\"Име на партньора:\"\r\n        onChangeText={(txt) => onTextChange(\"name\", txt)}\r\n        value={partner.name}\r\n        border={true}\r\n      />\r\n      <Input\r\n        label=\"ДДС Номер:\"\r\n        onChangeText={(txt) => onTextChange(\"vatNumber\", txt)}\r\n        value={partner.vatNumber}\r\n        border={true}\r\n      />\r\n      <Input\r\n        label=\"Адрес:\"\r\n        onChangeText={(txt) => onTextChange(\"address\", txt)}\r\n        value={partner.address}\r\n        border={true}\r\n      />\r\n      <Button\r\n        label={currentPartner ? \"Редакция\" : \"Добавяне\"}\r\n        onPress={() => {\r\n          currentPartner ? onPartnerEdited(partner) : onPartnerAdded(partner);\r\n          setPartner(emptyPartner);\r\n          navigator.navigate(\"PartnersListScreen\");\r\n        }}\r\n      />\r\n    </Page>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state: AppState) => state.partners;\r\n\r\nconst mapDispatchToProps = (dispatch: any) => {\r\n  return {\r\n    onPartnerAdded: (partner: Partner) => {\r\n      dispatch(actionCreators.onAddPartner(partner));\r\n    },\r\n    onPartnerEdited: (partner: Partner) => {\r\n      dispatch(actionCreators.onEditPartner(partner));\r\n    },\r\n    onModalTitleChanged: (modalTitle: string) => {\r\n      dispatch(modalActionCreators.onTitleChange(modalTitle));\r\n    },\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(AddPartnerScreen);\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport Table from \"../../Table\";\r\nimport { actionCreators } from \"../../../../redux/partnerActions\";\r\nimport { AppState } from \"../../../../redux/store\";\r\nimport TableModel from \"./TableModel\";\r\nimport AddPartnerScreen from \"../../../../screens/partners/AddPartnerScreen\";\r\n\r\nclass PartnersTable extends TableModel {\r\n  render() {\r\n    const { listableItems, columns, showDeleted } = this.props;\r\n    return (\r\n      <Table\r\n        data={listableItems}\r\n        columns={columns}\r\n        deleteProps={{\r\n          title: \"Изтриване на партньор\",\r\n          content: \"Желаете ли да изтриете избраният партньор\",\r\n          cancelBtnTxt: \"Отказ\",\r\n          acceptBtnTxt: \"Изтриване\",\r\n          onAction: this.onDelete,\r\n        }}\r\n        onEdit={this.onEdit}\r\n        showDeleted={showDeleted}\r\n      />\r\n    );\r\n  }\r\n\r\n  public onDelete = (id: string) => {\r\n    const { dispatch } = this.props;\r\n\r\n    dispatch(actionCreators.onDeletePartner(id));\r\n  };\r\n\r\n  public onEdit = (id: string) => {\r\n    const { navigation } = this.props;\r\n    navigation.navigate(\"Modal\", {\r\n      component: <AddPartnerScreen partnerId={id} />,\r\n    });\r\n  };\r\n}\r\n\r\nconst mapStateToProps = (state: AppState) => {\r\n  return { partners: state.partners!.partners };\r\n};\r\n\r\nexport default connect(mapStateToProps)(PartnersTable);\r\n","import { useNavigation } from \"@react-navigation/native\";\r\nimport React, { useEffect } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Page } from \"../../components/Page\";\r\nimport { Partner } from \"../../helpers/models\";\r\nimport { actionCreators } from \"../../redux/partnerActions\";\r\nimport { AppState } from \"../../redux/store\";\r\nimport PartnersTable from \"../../components/Table/types/classes/PartnersTable\";\r\n\r\ninterface PartnersListScreenProps {\r\n  onPartnersLoaded: () => void;\r\n  onPartnerRecovery: (partnerId: string) => void;\r\n  partners: Partner[];\r\n  showDeleted: boolean;\r\n  setShowDeleted: (showDeleted: boolean) => void;\r\n}\r\n\r\nconst PartnersListScreen = ({\r\n  onPartnersLoaded,\r\n  partners,\r\n  onPartnerRecovery,\r\n  setShowDeleted,\r\n  showDeleted,\r\n}: PartnersListScreenProps) => {\r\n  useEffect(() => onPartnersLoaded(), [showDeleted]);\r\n\r\n  const columns = [\r\n    { name: \"Име на партньора\", propName: \"name\", flex: 4 },\r\n    {\r\n      name: \"ДДС Номер\",\r\n      propName: \"vatNumber\",\r\n      flex: 1,\r\n      isRight: true,\r\n    },\r\n    {\r\n      name: \"Адрес\",\r\n      propName: \"address\",\r\n      flex: 2,\r\n      isRight: true,\r\n    },\r\n  ];\r\n\r\n  return (\r\n    <Page>\r\n      <PartnersTable\r\n        columns={columns}\r\n        listableItems={partners}\r\n        navigation={useNavigation()}\r\n        showDeleted={{\r\n          setShowDeleted,\r\n          showDeleted,\r\n          recoverProps: {\r\n            title: \"Възстановяване на партньор\",\r\n            content: \"Желаете ли да възстановите избрания партньор\",\r\n            cancelBtnTxt: \"Отказ\",\r\n            acceptBtnTxt: \"Възстановяване\",\r\n            onAction: onPartnerRecovery,\r\n          },\r\n        }}\r\n      />\r\n    </Page>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state: AppState) => {\r\n  return {\r\n    partners: state.partners!.partners,\r\n    showDeleted: state.partners!.showDeleted,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: any) => {\r\n  return {\r\n    onPartnersLoaded: () => {\r\n      dispatch(actionCreators.onLoadPartners());\r\n    },\r\n    onPartnerRecovery: (partnerId: string) => {\r\n      dispatch(actionCreators.onPartnerRecovery(partnerId));\r\n    },\r\n    setShowDeleted: (showDeleted: boolean) => {\r\n      dispatch(actionCreators.setShowDeleted(showDeleted));\r\n    },\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(PartnersListScreen);\r\n","import { Action, Reducer } from \"redux\";\r\nimport { Sale } from \"../helpers/models\";\r\nimport { getAccessToken } from \"../screens/authentication/services/authenticationService\";\r\nimport {\r\n  deletee,\r\n  get,\r\n  post,\r\n  put,\r\n} from \"../services/communication/connectionService\";\r\nimport { AppThunk } from \"./store\";\r\n\r\nexport interface SalesState {\r\n  sales: Sale[];\r\n  showDeleted: boolean;\r\n}\r\n\r\ninterface AddSaleAction {\r\n  type: \"ADD_SALE\";\r\n  sale: Sale;\r\n}\r\n\r\ninterface EditSaleAction {\r\n  type: \"EDIT_SALE\";\r\n  sale: Sale;\r\n}\r\n\r\ninterface LoadSalesAction {\r\n  type: \"LOAD_SALES\";\r\n  sales: Sale[];\r\n}\r\n\r\ninterface LoadAllSalesAction {\r\n  type: \"LOAD_ALL_SALES\";\r\n  sales: Sale[];\r\n}\r\n\r\ninterface DeleteSaleAction {\r\n  type: \"DELETE_SALE\";\r\n  saleId: string;\r\n}\r\n\r\ninterface SetShowDeletedAction {\r\n  type: \"SET_SHOW_DELETED\";\r\n  showDeleted: boolean;\r\n}\r\n\r\nexport type KnownAction =\r\n  | AddSaleAction\r\n  | LoadSalesAction\r\n  | EditSaleAction\r\n  | DeleteSaleAction\r\n  | LoadAllSalesAction\r\n  | SetShowDeletedAction;\r\n\r\nexport const addSale = (sale: Sale): AddSaleAction => ({\r\n  type: \"ADD_SALE\",\r\n  sale,\r\n});\r\n\r\nexport const editSale = (sale: Sale): EditSaleAction => ({\r\n  type: \"EDIT_SALE\",\r\n  sale,\r\n});\r\n\r\nexport const deleteSale = (saleId: string): DeleteSaleAction => ({\r\n  type: \"DELETE_SALE\",\r\n  saleId,\r\n});\r\n\r\nexport const loadSales = (sales: Sale[]): LoadSalesAction => ({\r\n  type: \"LOAD_SALES\",\r\n  sales,\r\n});\r\n\r\nexport const loadAllSales = (sales: Sale[]): LoadAllSalesAction => ({\r\n  type: \"LOAD_ALL_SALES\",\r\n  sales,\r\n});\r\n\r\nexport const setShowDeleted = (showDeleted: boolean): SetShowDeletedAction => ({\r\n  type: \"SET_SHOW_DELETED\",\r\n  showDeleted,\r\n});\r\n\r\nexport const actionCreators = {\r\n  onAddSale: (saleDTO: Sale): AppThunk<void, KnownAction> => {\r\n    return async (dispatch: any) => {\r\n      post<Sale>(\"api/sales/\", {\r\n        ...saleDTO,\r\n        accessToken: await getAccessToken(),\r\n      })\r\n        .then((sale) => {\r\n          dispatch(addSale(sale));\r\n        })\r\n        .catch((ex) => {\r\n          console.log(ex);\r\n        });\r\n    };\r\n  },\r\n  onLoadSales: (): AppThunk<void, KnownAction> => {\r\n    return async (dispatch: any) => {\r\n      get<Sale[]>(`api/sales?accessToken=${await getAccessToken()}`)\r\n        .then((sales) => {\r\n          dispatch(loadSales(sales));\r\n        })\r\n        .catch((error) => {\r\n          console.log(error);\r\n        });\r\n    };\r\n  },\r\n  onLoadAllSales: (): AppThunk<void, KnownAction> => {\r\n    return async (dispatch: any) => {\r\n      get<Sale[]>(`api/sales/get-all?accessToken=${await getAccessToken()}`)\r\n        .then((sales) => {\r\n          dispatch(loadSales(sales));\r\n        })\r\n        .catch((error) => {\r\n          console.log(error);\r\n        });\r\n    };\r\n  },\r\n  onEditSale: (saleDTO: Sale): AppThunk<void, KnownAction> => {\r\n    return async (dispatch: any) => {\r\n      put<Sale>(\"api/sales/\", {\r\n        ...saleDTO,\r\n        accessToken: await getAccessToken(),\r\n      })\r\n        .then((isUpdated) => {\r\n          isUpdated && dispatch(editSale(saleDTO));\r\n        })\r\n        .catch((ex) => {\r\n          console.log(ex);\r\n        });\r\n    };\r\n  },\r\n  onDeleteSale: (saleId: string): AppThunk<void, KnownAction> => {\r\n    return (dispatch: any) => {\r\n      deletee(\"api/sales/\", saleId).then((isDeleted) => {\r\n        isDeleted && dispatch(deleteSale(saleId));\r\n      });\r\n    };\r\n  },\r\n  onSaleRecovery: (saleId: string): AppThunk<void, KnownAction> => {\r\n    return async (dispatch: any) => {\r\n      post<Sale>(\"api/sales/sale-recovery\", {\r\n        saleId,\r\n        accessToken: await getAccessToken(),\r\n      }).then((sale: Sale) => {\r\n        dispatch(editSale(sale));\r\n      });\r\n    };\r\n  },\r\n  setShowDeleted: (showDeleted: boolean): AppThunk<void, KnownAction> => {\r\n    return (dispatch: any) => {\r\n      dispatch(setShowDeleted(showDeleted));\r\n    };\r\n  },\r\n};\r\n\r\nconst initialState = {\r\n  sales: [],\r\n  showDeleted: false,\r\n};\r\n\r\nexport const reducer: Reducer<SalesState> = (\r\n  state = initialState,\r\n  incomingAction: Action\r\n): SalesState => {\r\n  const action = incomingAction as KnownAction;\r\n  switch (action.type) {\r\n    case \"ADD_SALE\":\r\n      return { ...state, sales: [...state.sales, action.sale] };\r\n    case \"LOAD_SALES\":\r\n      return { ...state, sales: action.sales };\r\n    case \"LOAD_ALL_SALES\":\r\n      return { ...state, sales: action.sales };\r\n    case \"EDIT_SALE\":\r\n      return {\r\n        ...state,\r\n        sales: [\r\n          ...state.sales.map((sale) => {\r\n            if (sale.id === action.sale.id) return { ...action.sale };\r\n            return sale;\r\n          }),\r\n        ],\r\n      };\r\n    case \"DELETE_SALE\":\r\n      return {\r\n        ...state,\r\n        sales: state.showDeleted\r\n          ? [\r\n              ...state.sales.map((sale) => {\r\n                if (sale.id === action.saleId)\r\n                  return { ...sale, isDeleted: true };\r\n                return sale;\r\n              }),\r\n            ]\r\n          : [...state.sales.filter((sale) => sale.id !== action.saleId)],\r\n      };\r\n    case \"SET_SHOW_DELETED\":\r\n      return {\r\n        ...state,\r\n        showDeleted: action.showDeleted,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","export const randomString = () => (Math.random() + 1).toString(36).substring(7);\r\n","import React, { useState } from \"react\";\r\nimport { textToDecimalFormat, toDecimalFormat } from \"../helpers/extensions\";\r\nimport { Item, Sale, SaleItem } from \"../helpers/models\";\r\nimport { randomString } from \"../helpers/randomFunctions\";\r\nimport {\r\n  getHeight,\r\n  isMobile,\r\n  isMobileScreen,\r\n  normalize,\r\n  normalizeHeight,\r\n} from \"../helpers/screenSizing\";\r\nimport Dropdown from \"./dropdowns/Dropdown\";\r\nimport { Input, Text, View } from \"./Themed\";\r\n\r\ntype Props = {\r\n  items: Item[];\r\n  saleItems: SaleItem[];\r\n  setSelectedItems: (selectedItem: SaleItem[]) => void;\r\n  sale: Sale;\r\n};\r\n\r\nconst EditableTable = ({ items, saleItems, setSelectedItems, sale }: Props) => {\r\n  const [selectedItem, setSelectedItem] = useState({\r\n    id: \"\",\r\n    title: \"\",\r\n  });\r\n  const [itemsForDropdown] = useState(\r\n    items.map(item => ({\r\n      id: item.id,\r\n      title: item.name,\r\n    }))\r\n  );\r\n\r\n  return (\r\n    <View\r\n      style={{\r\n        width: normalize(300),\r\n        height: getHeight() - 250,\r\n      }}\r\n    >\r\n      <View\r\n        style={{\r\n          display: \"flex\",\r\n          flexDirection: \"row\",\r\n          borderBottomWidth: 2,\r\n          borderBottomColor: \"grey\",\r\n          backgroundColor: \"none\",\r\n        }}\r\n      >\r\n        <View\r\n          style={{\r\n            flexDirection: \"row\",\r\n            flex: 5,\r\n            justifyContent: \"flex-start\",\r\n          }}\r\n        >\r\n          <Text style={{ margin: 0 }}>Име на стоката:</Text>\r\n        </View>\r\n        <View\r\n          style={{ flexDirection: \"row\", flex: 1, justifyContent: \"center\" }}\r\n        >\r\n          <Text>{isMobileScreen ? \"К-во\" : \"Количество:\"}</Text>\r\n        </View>\r\n        <View\r\n          style={{ flexDirection: \"row\", flex: 1, justifyContent: \"flex-end\" }}\r\n        >\r\n          <Text>{isMobileScreen ? \"Цена\" : \"Цена:\"}</Text>\r\n        </View>\r\n        <View\r\n          style={{ flexDirection: \"row\", flex: 1, justifyContent: \"flex-end\" }}\r\n        >\r\n          <Text>{isMobileScreen ? \"Общо\" : \"Общо сума:\"}</Text>\r\n        </View>\r\n      </View>\r\n      {saleItems && (\r\n        <>\r\n          <View\r\n            style={{\r\n              height: isMobileScreen ? getHeight() - 400 : getHeight() - 290,\r\n              overflow: \"scroll\",\r\n            }}\r\n          >\r\n            {saleItems.map(selectedItem => {\r\n              const isQttyEnough =\r\n                Number(selectedItem.qtty) <=\r\n                Number(\r\n                  items.find(item => item.id === selectedItem.itemId)?.qtty\r\n                );\r\n\r\n              return (\r\n                <View\r\n                  key={selectedItem.itemId}\r\n                  style={{\r\n                    display: \"flex\",\r\n                    flexDirection: \"row\",\r\n                    borderBottomWidth: 1,\r\n                    borderBottomColor: \"grey\",\r\n                  }}\r\n                >\r\n                  <View\r\n                    style={{\r\n                      flexDirection: \"row\",\r\n                      flex: 5,\r\n                      alignSelf: \"stretch\",\r\n                    }}\r\n                  >\r\n                    <Dropdown\r\n                      key={selectedItem.itemId}\r\n                      selectedItem={{\r\n                        id: selectedItem.itemId,\r\n                        title: selectedItem.name,\r\n                      }}\r\n                      placeholder=\"Въведете име на стока\"\r\n                      items={itemsForDropdown}\r\n                      handleItemChosen={itemId => {\r\n                        setTimeout(() => {\r\n                          const currentItem = items.find(\r\n                            item => item.id === itemId\r\n                          )!;\r\n                          setSelectedItems(\r\n                            saleItems.map(item => {\r\n                              if (selectedItem.uniqueId === item.uniqueId)\r\n                                return {\r\n                                  id: \"\",\r\n                                  uniqueId: randomString(),\r\n                                  itemId: currentItem.id,\r\n                                  name: currentItem.name,\r\n                                  qtty: \"1\",\r\n                                  price: currentItem.sellPrice,\r\n                                  total: toDecimalFormat(\r\n                                    Number(currentItem.sellPrice)\r\n                                  ),\r\n                                };\r\n\r\n                              return item;\r\n                            })\r\n                          );\r\n                        }, 300);\r\n                      }}\r\n                    />\r\n                  </View>\r\n                  <View\r\n                    style={{\r\n                      flexDirection: \"row\",\r\n                      flex: 1,\r\n                      alignSelf: \"stretch\",\r\n                    }}\r\n                  >\r\n                    <Input\r\n                      autoFocus={true}\r\n                      keyboardType=\"numeric\"\r\n                      style={{\r\n                        textAlign: \"center\",\r\n                        borderWidth: isQttyEnough ? 0 : 1,\r\n                        borderColor: isQttyEnough ? \"white\" : \"red\",\r\n                        alignSelf: \"stretch\",\r\n                        width: \"100%\",\r\n                      }}\r\n                      value={selectedItem.qtty.toString()}\r\n                      onChangeText={text =>\r\n                        setSelectedItems(\r\n                          saleItems.map(item => {\r\n                            if (selectedItem.uniqueId === item.uniqueId) {\r\n                              return {\r\n                                ...item,\r\n                                qtty: text,\r\n                                total: toDecimalFormat(\r\n                                  Number(text) * Number(item.price)\r\n                                ),\r\n                              };\r\n                            }\r\n                            return item;\r\n                          })\r\n                        )\r\n                      }\r\n                    />\r\n                  </View>\r\n                  <View\r\n                    style={{\r\n                      flexDirection: \"row\",\r\n                      flex: 1,\r\n                      alignSelf: \"stretch\",\r\n                    }}\r\n                  >\r\n                    <Input\r\n                      style={{\r\n                        textAlign: \"center\",\r\n                        borderWidth: 0,\r\n                        alignSelf: \"stretch\",\r\n                        width: \"100%\",\r\n                      }}\r\n                      keyboardType=\"numeric\"\r\n                      value={selectedItem.price.toString()}\r\n                      onChangeText={text =>\r\n                        setSelectedItems(\r\n                          saleItems.map(item => {\r\n                            if (selectedItem.uniqueId === item.uniqueId) {\r\n                              return {\r\n                                ...item,\r\n                                price: text,\r\n                                total: toDecimalFormat(\r\n                                  Number(item.qtty) * Number(text)\r\n                                ),\r\n                              };\r\n                            }\r\n                            return item;\r\n                          })\r\n                        )\r\n                      }\r\n                    />\r\n                  </View>\r\n                  <View\r\n                    style={{\r\n                      flexDirection: \"row\",\r\n                      flex: 1,\r\n                      alignSelf: \"stretch\",\r\n                      width: \"100%\",\r\n                    }}\r\n                  >\r\n                    <Text>{textToDecimalFormat(selectedItem.total)}</Text>\r\n                  </View>\r\n                </View>\r\n              );\r\n            })}\r\n\r\n            <View\r\n              style={{\r\n                display: \"flex\",\r\n                flexDirection: \"row\",\r\n                borderBottomWidth: 1,\r\n                borderBottomColor: \"grey\",\r\n              }}\r\n            >\r\n              <View style={{ flexDirection: \"row\", flex: 5 }}>\r\n                <Dropdown\r\n                  placeholder=\"Въведете име на стока\"\r\n                  selectedItem={selectedItem}\r\n                  items={itemsForDropdown}\r\n                  handleItemChosen={itemId => {\r\n                    const currentItem = items.find(item => item.id === itemId)!;\r\n                    setSelectedItems([\r\n                      ...saleItems,\r\n                      {\r\n                        id: \"\",\r\n                        uniqueId: randomString(),\r\n                        itemId: currentItem.id,\r\n                        name: currentItem.name,\r\n                        qtty: \"1\",\r\n                        price: currentItem.sellPrice,\r\n                        total: toDecimalFormat(Number(currentItem.sellPrice)),\r\n                      },\r\n                    ]);\r\n\r\n                    setSelectedItem({ id: \"\", title: \"\" });\r\n                  }}\r\n                />\r\n              </View>\r\n              <View\r\n                style={{\r\n                  flexDirection: \"row\",\r\n                  flex: 1,\r\n                  justifyContent: \"center\",\r\n                }}\r\n              >\r\n                <Text></Text>\r\n              </View>\r\n              <View\r\n                style={{\r\n                  flexDirection: \"row\",\r\n                  flex: 1,\r\n                  justifyContent: \"flex-end\",\r\n                }}\r\n              >\r\n                <Text></Text>\r\n              </View>\r\n              <View\r\n                style={{\r\n                  flexDirection: \"row\",\r\n                  flex: 1,\r\n                  justifyContent: \"flex-end\",\r\n                }}\r\n              >\r\n                <Text></Text>\r\n              </View>\r\n            </View>\r\n          </View>\r\n          <View\r\n            style={{\r\n              display: \"flex\",\r\n              flexDirection: \"row\",\r\n              borderBottomWidth: 2,\r\n              borderBottomColor: \"grey\",\r\n              backgroundColor: \"none\",\r\n              height: 30,\r\n            }}\r\n          >\r\n            <View\r\n              style={{\r\n                flexDirection: \"row\",\r\n                flex: 6,\r\n                justifyContent: \"flex-end\",\r\n              }}\r\n            >\r\n              <Text style={{ margin: 0 }}>Общо сума:</Text>\r\n            </View>\r\n            <View\r\n              style={{\r\n                flexDirection: \"row\",\r\n                flex: 1,\r\n                justifyContent: \"flex-end\",\r\n                paddingBottom: 7,\r\n              }}\r\n            >\r\n              <Text>\r\n                {toDecimalFormat(\r\n                  saleItems.length > 0\r\n                    ? saleItems\r\n                        ?.map(item => Number(item.total))\r\n                        ?.reduce((a, b) => a + b)\r\n                    : 0.0\r\n                )}\r\n              </Text>\r\n            </View>\r\n          </View>\r\n        </>\r\n      )}\r\n    </View>\r\n  );\r\n};\r\n\r\nexport default EditableTable;\r\n","import { useNavigation } from \"@react-navigation/native\";\r\nimport React, { FunctionComponent, useState } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Page } from \"../../components/Page\";\r\nimport { Button, View } from \"../../components/Themed\";\r\nimport { Item, Partner, Sale, SaleItem } from \"../../helpers/models\";\r\nimport { actionCreators as salesActions } from \"../../redux/salesActions\";\r\nimport { actionCreators as modalActions } from \"../../redux/modalActions\";\r\nimport { AppState } from \"../../redux/store\";\r\nimport Dropdown from \"../../components/dropdowns/Dropdown\";\r\nimport EditableTable from \"../../components/EditableTable\";\r\nimport { getHeight } from \"../../helpers/screenSizing\";\r\nimport { randomString } from \"../../helpers/randomFunctions\";\r\n\r\ninterface Props {\r\n  saleId?: string;\r\n  sales: Sale[];\r\n  items: Item[];\r\n  partners: Partner[];\r\n  onSaleAdded: (sale: Sale) => void;\r\n  onSaleEdited: (sale: Sale) => void;\r\n  onModalTitleChanged: (title: string) => void;\r\n}\r\n\r\nconst emptySale = {\r\n  id: \"\",\r\n  date: new Date(),\r\n  isDeleted: false,\r\n  description: \"\",\r\n  saleItems: [],\r\n  partnerId: \"\",\r\n  totalAmount: 0,\r\n} as Sale;\r\n\r\nconst AddSaleScreen: FunctionComponent<Props> = ({\r\n  saleId,\r\n  sales,\r\n  onSaleAdded,\r\n  onModalTitleChanged,\r\n  onSaleEdited,\r\n  partners,\r\n  items,\r\n}) => {\r\n  const currentSale = sales.find((i) => i.id === saleId);\r\n  const [sale, setSale] = useState(currentSale ?? emptySale);\r\n  const [selectableItems] = useState(\r\n    partners.map((partner) => ({\r\n      id: partner.id,\r\n      title: partner.name,\r\n    }))\r\n  );\r\n  const navigator = useNavigation();\r\n  if (currentSale) {\r\n    onModalTitleChanged(\"Редакция на стока\");\r\n  } else {\r\n    onModalTitleChanged(\"Добавяне на стока\");\r\n  }\r\n\r\n  const handlePartnerSelect = (partnerId: string) => {\r\n    setSale({ ...sale, partnerId });\r\n  };\r\n\r\n  const [selectedItems, setSelectedItems] = useState<SaleItem[]>(\r\n    currentSale\r\n      ? currentSale.saleItems.map((item) => ({\r\n          uniqueId: randomString(),\r\n          itemId: item.itemId,\r\n          name: item.name,\r\n          qtty: item.qtty,\r\n          total: item.total,\r\n          price: item.price,\r\n          id: item.id,\r\n        }))\r\n      : []\r\n  );\r\n\r\n  return (\r\n    <Page>\r\n      <View\r\n        style={{\r\n          height: getHeight(),\r\n        }}\r\n      >\r\n        <Dropdown\r\n          placeholder=\"Въведете име на партньора\"\r\n          selectedItem={\r\n            currentSale\r\n              ? {\r\n                  id: currentSale.partnerId,\r\n                  title:\r\n                    partners.find(\r\n                      (partner) => partner.id === currentSale.partnerId\r\n                    )?.name ?? \"\",\r\n                }\r\n              : undefined\r\n          }\r\n          items={selectableItems}\r\n          handleItemChosen={handlePartnerSelect}\r\n          label=\"Име на партньора\"\r\n          border={true}\r\n          style={{ marginBottom: 15 }}\r\n        />\r\n        <EditableTable\r\n          items={items}\r\n          saleItems={selectedItems}\r\n          setSelectedItems={setSelectedItems}\r\n          sale={sale}\r\n        />\r\n        <Button\r\n          disabled={\r\n            selectedItems === undefined ||\r\n            selectedItems.length === 0 ||\r\n            sale.partnerId === \"\"\r\n          }\r\n          label={currentSale ? \"Редакция на стока\" : \"Добавяне на стока\"}\r\n          onPress={() => {\r\n            sale.totalAmount = selectedItems\r\n              .map((item) => Number(item.total))\r\n              .reduce((a, b) => a + b);\r\n            sale.saleItems = selectedItems;\r\n            currentSale ? onSaleEdited(sale) : onSaleAdded(sale);\r\n            setSale(emptySale);\r\n            navigator.navigate(\"SalesListScreen\");\r\n          }}\r\n          style={{\r\n            alignSelf: \"center\",\r\n          }}\r\n        />\r\n      </View>\r\n    </Page>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state: AppState) => {\r\n  return {\r\n    sales: state.sales!.sales,\r\n    partners: state.partners!.partners,\r\n    items: state.items!.items,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: any) => {\r\n  return {\r\n    onSaleAdded: (sale: Sale) => {\r\n      dispatch(salesActions.onAddSale(sale));\r\n    },\r\n    onSaleEdited: (sale: Sale) => {\r\n      dispatch(salesActions.onEditSale(sale));\r\n    },\r\n    onModalTitleChanged: (modalTitle: string) => {\r\n      dispatch(modalActions.onTitleChange(modalTitle));\r\n    },\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(AddSaleScreen);\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport Table from \"../../Table\";\r\nimport { AppState } from \"../../../../redux/store\";\r\nimport TableModel from \"./TableModel\";\r\nimport { actionCreators } from \"../../../../redux/salesActions\";\r\nimport AddSaleScreen from \"../../../../screens/sales/AddSaleScreen\";\r\n\r\nclass SalesTable extends TableModel {\r\n  render() {\r\n    const { listableItems, columns, showDeleted } = this.props;\r\n    return (\r\n      <Table\r\n        data={listableItems}\r\n        columns={columns}\r\n        deleteProps={{\r\n          title: \"Изтриване на продажба\",\r\n          content: \"Желаете ли да изтриете избраната продажба\",\r\n          cancelBtnTxt: \"Отказ\",\r\n          acceptBtnTxt: \"Изтриване\",\r\n          onAction: this.onDelete,\r\n        }}\r\n        onEdit={this.onEdit}\r\n        showDeleted={showDeleted}\r\n      />\r\n    );\r\n  }\r\n\r\n  public onDelete = (id: string) => {\r\n    const { dispatch } = this.props;\r\n\r\n    dispatch(actionCreators.onDeleteSale(id));\r\n  };\r\n\r\n  public onEdit = (id: string) => {\r\n    const { navigation } = this.props;\r\n    navigation.navigate(\"Modal\", {\r\n      component: <AddSaleScreen saleId={id} />,\r\n    });\r\n  };\r\n}\r\n\r\nconst mapStateToProps = (state: AppState) => {\r\n  return { sales: state.sales!.sales };\r\n};\r\n\r\nexport default connect(mapStateToProps)(SalesTable);\r\n","import { useNavigation } from \"@react-navigation/native\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Page } from \"../../components/Page\";\r\nimport SalesTable from \"../../components/Table/types/classes/SalesTable\";\r\nimport { IListable, Partner, Sale } from \"../../helpers/models\";\r\nimport { isMobileScreen } from \"../../helpers/screenSizing\";\r\nimport { actionCreators as salesActions } from \"../../redux/salesActions\";\r\nimport { actionCreators as partnersActions } from \"../../redux/partnerActions\";\r\nimport { actionCreators as itemActions } from \"../../redux/itemActions\";\r\nimport { AppState } from \"../../redux/store\";\r\nimport { getDateFormated, toDecimalFormat } from \"../../helpers/extensions\";\r\n\r\ninterface Props {\r\n  onSalesLoaded: () => void;\r\n  onSaleRecovery: (itemId: string) => void;\r\n  onAllSalesLoaded: () => void;\r\n  onPartnersLoaded: () => void;\r\n  onItemsLoaded: () => void;\r\n  sales: Sale[];\r\n  partners: Partner[];\r\n  setShowDeleted: (showDeleted: boolean) => void;\r\n  showDeleted: boolean;\r\n}\r\n\r\ninterface SaleListable extends IListable {\r\n  partner: string;\r\n  date: string;\r\n  description: string;\r\n  total: string;\r\n}\r\n\r\nconst mapStateToProps = (state: AppState) => {\r\n  return {\r\n    sales: state.sales?.sales || [],\r\n    partners: state.partners?.partners || [],\r\n    showDeleted: state.sales!.showDeleted,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: any) => {\r\n  return {\r\n    onSalesLoaded: () => {\r\n      dispatch(salesActions.onLoadSales());\r\n    },\r\n    onSaleRecovery: (saleId: string) => {\r\n      dispatch(salesActions.onSaleRecovery(saleId));\r\n    },\r\n    onAllSalesLoaded: () => {\r\n      dispatch(salesActions.onLoadAllSales());\r\n    },\r\n    onPartnersLoaded: () => {\r\n      dispatch(partnersActions.onLoadPartners());\r\n    },\r\n    onItemsLoaded: () => {\r\n      dispatch(itemActions.onLoadAllItems());\r\n    },\r\n    setShowDeleted: (showDeleted: boolean) => {\r\n      dispatch(salesActions.setShowDeleted(showDeleted));\r\n    },\r\n  };\r\n};\r\n\r\nconst SalesListScreen: React.FunctionComponent<Props> = ({\r\n  sales,\r\n  partners,\r\n  onSalesLoaded,\r\n  onSaleRecovery,\r\n  onItemsLoaded,\r\n  onPartnersLoaded,\r\n  onAllSalesLoaded,\r\n  showDeleted,\r\n  setShowDeleted,\r\n}) => {\r\n  const navigation = useNavigation();\r\n\r\n  useEffect(() => {\r\n    showDeleted ? onAllSalesLoaded() : onSalesLoaded();\r\n    onItemsLoaded();\r\n    onPartnersLoaded();\r\n  }, [showDeleted]);\r\n\r\n  const columns = [\r\n    { name: \"Име на стока\", propName: \"partner\", flex: 6 },\r\n    {\r\n      name: \"Дата\",\r\n      propName: \"date\",\r\n      flex: isMobileScreen ? 3 : 2,\r\n    },\r\n    {\r\n      name: \"Обща сума\",\r\n      propName: \"total\",\r\n      flex: isMobileScreen ? 2 : 1,\r\n      isRight: true,\r\n    },\r\n  ];\r\n\r\n  return (\r\n    <Page>\r\n      <SalesTable\r\n        columns={columns}\r\n        listableItems={sales.map(\r\n          (sale) =>\r\n            ({\r\n              id: sale.id,\r\n              partner:\r\n                partners.find((partner) => partner.id === sale.partnerId)\r\n                  ?.name ?? \"\",\r\n              date: getDateFormated(sale.date),\r\n              description: sale.description,\r\n              total: toDecimalFormat(sale.totalAmount),\r\n              isDeleted: sale.isDeleted,\r\n            } as SaleListable)\r\n        )}\r\n        navigation={navigation}\r\n        showDeleted={{\r\n          setShowDeleted,\r\n          showDeleted,\r\n          recoverProps: {\r\n            title: \"Възстановяване на продажба\",\r\n            content: \"Желаете ли да възстановите избраната продажба\",\r\n            cancelBtnTxt: \"Отказ\",\r\n            acceptBtnTxt: \"Възстановяване\",\r\n            onAction: onSaleRecovery,\r\n          },\r\n        }}\r\n      />\r\n    </Page>\r\n  );\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(SalesListScreen);\r\n","import { FontAwesome } from \"@expo/vector-icons\";\r\nimport { createDrawerNavigator, DrawerItem } from \"@react-navigation/drawer\";\r\nimport { useNavigation } from \"@react-navigation/native\";\r\nimport React, { FunctionComponent, useEffect, useState } from \"react\";\r\nimport { Pressable } from \"react-native\";\r\nimport { connect } from \"react-redux\";\r\nimport { View } from \"../components/Themed\";\r\nimport { AppState } from \"../redux/store\";\r\nimport Login from \"../screens/authentication/pages/Login\";\r\nimport Logout from \"../screens/authentication/pages/Logout\";\r\nimport Register from \"../screens/authentication/pages/Register\";\r\nimport { UserState } from \"../screens/authentication/redux/userActions\";\r\nimport AddItemScreen from \"../screens/items/AddItemScreen\";\r\nimport ItemsListScreen from \"../screens/items/ItemsListScreen\";\r\nimport AddPartnerScreen from \"../screens/partners/AddPartnerScreen\";\r\nimport PartnersListScreen from \"../screens/partners/PartnersListScreen\";\r\nimport AddSaleScreen from \"../screens/sales/AddSaleScreen\";\r\nimport SalesListScreen from \"../screens/sales/SalesListScreen\";\r\nimport { RootStackParamList } from \"../types\";\r\n\r\nconst mapStateToProps = (state: AppState) => {\r\n  return {\r\n    user: state.user,\r\n  };\r\n};\r\n\r\ninterface Props {\r\n  user: UserState;\r\n}\r\n\r\nconst BottomTabNavigator: FunctionComponent<Props> = ({ user }) => {\r\n  const Drawer = createDrawerNavigator<RootStackParamList>();\r\n  const navigation = useNavigation();\r\n  const [isAuthenticatedState, setIsAuthenticated] = useState(false);\r\n\r\n  useEffect(() => {\r\n    setIsAuthenticated(\r\n      (user.username !== undefined && user.username !== \"\") ||\r\n        (user.email !== undefined && user.email !== \"\")\r\n    );\r\n  });\r\n\r\n  return (\r\n    <Drawer.Navigator>\r\n      <Drawer.Group>\r\n        {isAuthenticatedState ? (\r\n          <>\r\n            <Drawer.Screen\r\n              name=\"SalesListScreen\"\r\n              component={SalesListScreen}\r\n              options={{\r\n                title: \"Списък с продажби\",\r\n                headerTitleAlign: \"center\",\r\n                headerRight: () => (\r\n                  <View style={{ display: \"flex\" }}>\r\n                    <Pressable\r\n                      onPress={(e) => {\r\n                        e.preventDefault();\r\n                        navigation.navigate(\"Modal\", {\r\n                          component: <AddSaleScreen />,\r\n                        });\r\n                      }}\r\n                      style={({ pressed }) => ({\r\n                        opacity: pressed ? 0.5 : 1,\r\n                      })}\r\n                    >\r\n                      <FontAwesome\r\n                        name=\"plus-circle\"\r\n                        size={25}\r\n                        color=\"green\"\r\n                        style={{ marginRight: 15 }}\r\n                      />\r\n                    </Pressable>\r\n                    <Logout />\r\n                  </View>\r\n                ),\r\n              }}\r\n            />\r\n            <Drawer.Screen\r\n              name=\"ItemsListScreen\"\r\n              navigationKey=\"/ItemsListScreen\"\r\n              component={ItemsListScreen}\r\n              options={{\r\n                title: \"Списък със стоки\",\r\n                headerTitleAlign: \"center\",\r\n                headerRight: () => (\r\n                  <View>\r\n                    <Pressable\r\n                      onPress={(e) => {\r\n                        e.preventDefault();\r\n                        navigation.navigate(\"Modal\", {\r\n                          component: <AddItemScreen />,\r\n                        });\r\n                      }}\r\n                      style={({ pressed }) => ({\r\n                        opacity: pressed ? 0.5 : 1,\r\n                      })}\r\n                    >\r\n                      <FontAwesome\r\n                        name=\"plus-circle\"\r\n                        size={25}\r\n                        color=\"green\"\r\n                        style={{ marginRight: 15 }}\r\n                      />\r\n                    </Pressable>\r\n                    <Logout />\r\n                  </View>\r\n                ),\r\n              }}\r\n            />\r\n            <Drawer.Screen\r\n              name=\"PartnersListScreen\"\r\n              navigationKey=\"PartnersListScreen\"\r\n              component={PartnersListScreen}\r\n              options={{\r\n                title: \"Списък с партньори\",\r\n                headerTitleAlign: \"center\",\r\n                headerRight: () => (\r\n                  <View>\r\n                    <Pressable\r\n                      onPress={(e) => {\r\n                        e.preventDefault();\r\n                        navigation.navigate(\"Modal\", {\r\n                          component: <AddPartnerScreen />,\r\n                        });\r\n                      }}\r\n                      style={({ pressed }) => ({\r\n                        opacity: pressed ? 0.5 : 1,\r\n                      })}\r\n                    >\r\n                      <FontAwesome\r\n                        name=\"plus-circle\"\r\n                        size={25}\r\n                        color=\"green\"\r\n                        style={{ marginRight: 15 }}\r\n                      />\r\n                    </Pressable>\r\n                    <Logout />\r\n                  </View>\r\n                ),\r\n              }}\r\n            />\r\n          </>\r\n        ) : (\r\n          <>\r\n            <Drawer.Screen name=\"Login\" component={Login} />\r\n            <Drawer.Screen name=\"Register\" component={Register} />\r\n          </>\r\n        )}\r\n      </Drawer.Group>\r\n    </Drawer.Navigator>\r\n  );\r\n};\r\n\r\nexport default connect(mapStateToProps)(BottomTabNavigator);\r\n","import {\r\n  NavigationContainer,\r\n  DefaultTheme,\r\n  DarkTheme,\r\n} from \"@react-navigation/native\";\r\nimport { createNativeStackNavigator } from \"@react-navigation/native-stack\";\r\nimport * as React from \"react\";\r\nimport { ColorSchemeName } from \"react-native\";\r\nimport ModalScreen from \"../screens/ModalScreen\";\r\nimport { RootStackParamList } from \"../types\";\r\nimport LinkingConfiguration from \"./LinkingConfiguration\";\r\nimport { connect } from \"react-redux\";\r\nimport { ModalState } from \"../redux/modalActions\";\r\nimport BottomTabNavigator from \"./BottomTabNavigator\";\r\nimport {\r\n  actionCreators,\r\n  UserState,\r\n} from \"../screens/authentication/redux/userActions\";\r\nimport { initUser } from \"../screens/authentication/services/authenticationService\";\r\n\r\ntype Props = {\r\n  colorScheme: ColorSchemeName;\r\n  title: string;\r\n  onInitUser: (user: UserState) => void;\r\n};\r\n\r\nconst Navigation: React.FunctionComponent<Props> = ({\r\n  colorScheme,\r\n  title,\r\n  onInitUser,\r\n}: Props) => {\r\n  React.useEffect(() => {\r\n    const getUserData = async () => {\r\n      const userData = await initUser();\r\n      onInitUser(userData);\r\n    };\r\n    getUserData();\r\n  }, []);\r\n  return (\r\n    <NavigationContainer\r\n      linking={LinkingConfiguration}\r\n      theme={colorScheme === \"dark\" ? DarkTheme : DefaultTheme}\r\n    >\r\n      <RootNavigator title={title} />\r\n    </NavigationContainer>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state: ModalState) => state.title;\r\n\r\nconst mapDispatchToProps = (dispatch: any) => {\r\n  return {\r\n    onInitUser: (user: UserState) => {\r\n      dispatch(actionCreators.initUser(user));\r\n    },\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Navigation);\r\n\r\nconst Stack = createNativeStackNavigator<RootStackParamList>();\r\n\r\nfunction RootNavigator({ title }: { title: string }) {\r\n  return (\r\n    <Stack.Navigator>\r\n      <Stack.Screen\r\n        name=\"Warehouse\"\r\n        component={BottomTabNavigator}\r\n        options={{ headerShown: false }}\r\n      />\r\n      <Stack.Group screenOptions={{ presentation: \"modal\" }}>\r\n        <Stack.Screen\r\n          name=\"Modal\"\r\n          component={ModalScreen}\r\n          options={{\r\n            title,\r\n            headerTitleAlign: \"center\",\r\n          }}\r\n        />\r\n      </Stack.Group>\r\n    </Stack.Navigator>\r\n  );\r\n}\r\n","import { Action } from \"redux\";\r\nimport { ThunkAction } from \"redux-thunk\";\r\nimport * as items from \"./itemActions\";\r\nimport * as title from \"./modalActions\";\r\nimport * as partners from \"./partnerActions\";\r\nimport * as sales from \"./salesActions\";\r\nimport * as user from \"../screens/authentication/redux/userActions\";\r\n\r\nexport interface AppState {\r\n  items: items.ItemsState;\r\n  title: title.ModalState;\r\n  partners: partners.PartnersState;\r\n  sales: sales.SalesState;\r\n  user: user.UserState;\r\n}\r\n\r\nexport const reducers = {\r\n  items: items.reducer,\r\n  title: title.reducer,\r\n  partners: partners.reducer,\r\n  sales: sales.reducer,\r\n  user: user.reducer,\r\n};\r\n\r\nexport type AppThunk<ReturnType, ActionType> = ThunkAction<\r\n  ReturnType,\r\n  AppState,\r\n  null,\r\n  Action<ActionType>\r\n>;\r\n","import { applyMiddleware, combineReducers, compose, createStore } from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport { AppState, reducers } from \"./store\";\r\n\r\nexport default function configureStore(initialState?: AppState) {\r\n  const middleware = [thunk];\r\n\r\n  const rootReducer = combineReducers({\r\n    ...reducers,\r\n  });\r\n\r\n  const enhancers = [];\r\n  const windowIfDefined =\r\n    typeof window === \"undefined\" ? null : (window as any);\r\n  if (windowIfDefined && windowIfDefined.__REDUX_DEVTOOLS_EXTENSION__) {\r\n    enhancers.push(windowIfDefined.__REDUX_DEVTOOLS_EXTENSION__());\r\n  }\r\n\r\n  return createStore(\r\n    rootReducer,\r\n    initialState,\r\n    compose(applyMiddleware(...middleware), ...enhancers)\r\n  );\r\n}\r\n","import { Platform } from \"react-native\";\r\n\r\nexport const injectWebCss = () => {\r\n  if (Platform.OS !== \"web\") return;\r\n\r\n  const style = document.createElement(\"style\");\r\n  style.textContent = `textarea, select, input, button { outline: none !important; }`;\r\n  style.textContent += `div::-webkit-scrollbar { width: 0; }`;\r\n  return document.head.append(style);\r\n};\r\n\r\ninjectWebCss();\r\n","import { StatusBar } from \"expo-status-bar\";\r\nimport { SafeAreaProvider } from \"react-native-safe-area-context\";\r\nimport { Provider } from \"react-redux\";\r\nimport { AlertsProvider } from \"react-native-paper-alerts\";\r\nimport { Provider as PaperProvider } from \"react-native-paper\";\r\n\r\nimport useCachedResources from \"./hooks/useCachedResources\";\r\nimport useColorScheme from \"./hooks/useColorScheme\";\r\nimport Navigation from \"./navigation\";\r\nimport configureStore from \"./redux/configureStore\";\r\n\r\nimport \"./helpers/styleFunctions\";\r\nimport { FunctionComponent } from \"react\";\r\nimport { UserState } from \"./screens/authentication/redux/userActions\";\r\n\r\nconst App = () => {\r\n  const isLoadingComplete = useCachedResources();\r\n  const colorScheme = useColorScheme();\r\n\r\n  const store = configureStore();\r\n\r\n  if (!isLoadingComplete) {\r\n    return null;\r\n  } else {\r\n    return (\r\n      <SafeAreaProvider>\r\n        <Provider store={store}>\r\n          <PaperProvider>\r\n            <AlertsProvider>\r\n              <Navigation\r\n                colorScheme={colorScheme}\r\n                title={store.getState().title.title}\r\n              />\r\n            </AlertsProvider>\r\n          </PaperProvider>\r\n        </Provider>\r\n        <StatusBar />\r\n      </SafeAreaProvider>\r\n    );\r\n  }\r\n};\r\n\r\nexport default App;\r\n","import { FontAwesome } from '@expo/vector-icons';\r\nimport * as Font from 'expo-font';\r\nimport * as SplashScreen from 'expo-splash-screen';\r\nimport { useEffect, useState } from 'react';\r\n\r\nexport default function useCachedResources() {\r\n  const [isLoadingComplete, setLoadingComplete] = useState(false);\r\n\r\n  // Load any resources or data that we need prior to rendering the app\r\n  useEffect(() => {\r\n    async function loadResourcesAndDataAsync() {\r\n      try {\r\n        SplashScreen.preventAutoHideAsync();\r\n\r\n        // Load fonts\r\n        await Font.loadAsync({\r\n          ...FontAwesome.font,\r\n          'space-mono': require('../assets/fonts/SpaceMono-Regular.ttf'),\r\n        });\r\n      } catch (e) {\r\n        // We might want to provide this error information to an error reporting service\r\n        console.warn(e);\r\n      } finally {\r\n        setLoadingComplete(true);\r\n        SplashScreen.hideAsync();\r\n      }\r\n    }\r\n\r\n    loadResourcesAndDataAsync();\r\n  }, []);\r\n\r\n  return isLoadingComplete;\r\n}\r\n","module.exports = __webpack_public_path__ + \"./fonts/SpaceMono-Regular.ttf\";"],"sourceRoot":""}