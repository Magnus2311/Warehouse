{"version":3,"sources":["hooks/useColorScheme.ts","constants/Colors.ts","helpers/screenSizing.ts","components/Themed.tsx","screens/ModalScreen.tsx","components/Page.tsx","helpers/extensions.ts","components/Table/MobileBody.tsx","components/Table/TableBody.tsx","components/Table/Table.tsx","helpers/constants.ts","services/communication/connectionService.ts","redux/itemActions.ts","redux/constants.ts","components/Table/types/classes/TableModel.tsx","components/dropdowns/Dropdown.tsx","redux/modalActions.ts","screens/items/AddItemScreen.tsx","screens/items/BuyItemScreen.tsx","components/Table/types/classes/ItemsTable.tsx","screens/items/ItemsListScreen.tsx","navigation/LinkingConfiguration.ts","screens/authentication/Register.tsx","redux/partnerActions.ts","screens/AddPartnerScreen.tsx","components/Table/types/classes/PartnersTable.tsx","screens/PartnersListScreen.tsx","redux/salesActions.ts","helpers/randomFunctions.ts","components/EditableTable.tsx","screens/sales/AddSaleScreen.tsx","components/Table/types/classes/SalesTable.tsx","screens/sales/SalesListScreen.tsx","navigation/index.tsx","redux/store.ts","redux/configureStore.ts","App.tsx","hooks/useCachedResources.ts","helpers/styleFunctions.ts","assets/fonts/SpaceMono-Regular.ttf"],"names":["useColorScheme","_useColorScheme","light","text","background","tint","tabIconDefault","tabIconSelected","borderColor","dark","Dimensions","get","SCREEN_WIDTH","width","getHeight","height","scale","normalize","size","newSize","Platform","OS","Math","round","PixelRatio","roundToNearestPixel","isMobile","useThemeColor","props","colorName","theme","colorFromProps","Colors","Text","style","lightColor","darkColor","otherProps","color","margin","View","backgroundColor","PageContainer","paddingTop","Separator","marginVertical","Input","border","label","marginBottom","justifyContent","alignItems","borderWidth","marginLeft","maxWidth","borderRadius","padding","paddingBottom","paddingLeft","Button","onPress","TouchableOpacity","disabled","marginTop","zIndex","ModalScreen","component","route","params","flex","StatusBar","Page","title","children","styles","container","StyleSheet","create","fontSize","fontWeight","separator","getDateFormated","date","tempDate","Date","toTwoDigitNumber","getDate","getMonth","getFullYear","getHours","getMinutes","number","toLocaleString","minimumIntegerDigits","useGrouping","toDecimalFormat","toFixed","textToDecimalFormat","Number","MobileBody","columns","data","deleteProps","onEdit","additionalActions","showDeleted","useState","showAdditionalMenus","setShowAdditionalMenus","translateAnim","useRef","Animated","Value","current","alerts","useAlerts","createTwoButtonAlert","itemId","alertProps","alert","content","cancelBtnTxt","acceptBtnTxt","onAction","map","item","isDeleted","onSwipeLeft","id","setValue","timing","toValue","duration","useNativeDriver","start","onSwipeRight","DataTable","Row","column","Cell","isMoney","propName","name","alignSelf","flexDirection","transform","translateX","action","FontAwesome","marginRight","recoverProps","TableBody","Table","Header","Title","Switch","trackColor","false","true","thumbColor","ios_backgroundColor","onValueChange","setShowDeleted","value","renderHeader","API_PATH","url","a","async","fetch","response","ok","json","put","method","credentials","cache","body","JSON","stringify","headers","post","deletee","editItem","type","actionCreators","itemDTO","dispatch","then","addItem","catch","ex","console","log","items","loadItems","error","loadAllItems","isUpdated","deleteItem","buyItem","initialState","TableModel","React","Component","Dropdown","handleItemChosen","selectedItem","placeholder","inputText","setInputText","shownItems","setShownItems","rowHeight","contentHeight","toggleDropdown","isOpen","min","length","maxHeight","position","onFocus","onBlur","setTimeout","onChangeText","e","filter","toLowerCase","includes","overflow","Pressable","handleItemClick","changeTitle","emptyItem","basePrice","sellPrice","partnerId","qtty","connect","state","partners","onItemAdded","onItemEdited","onModalTitleChanged","modalTitle","modalActionCreators","currentItem","find","i","setItem","navigator","useNavigation","partner","selectableItems","onTextChange","txt","undefined","toString","keyboardType","navigate","onBuyItem","itemsActions","useEffect","goBack","ItemsTable","onDelete","navigation","this","listableItems","onItemsLoaded","onItemRecovery","onAllItemsLoaded","onShowDeletedChanged","isRight","linking","prefixes","Linking","config","screens","Root","ItemsListScreen","path","PartnersListScreen","Register","Modal","preventDefault","editPartner","partnerDTO","addPartner","er","loadPartners","deletePartner","sale","emptyPartner","address","vatNumber","onPartnerAdded","onPartnerEdited","currentPartner","p","setPartner","PartnersTable","onPartnersLoaded","onPartnerRecovery","editSale","loadSales","sales","saleDTO","addSale","saleId","deleteSale","randomString","random","substring","EditableTable","saleItems","setSelectedItems","setSelectedItem","itemsForDropdown","display","borderBottomWidth","borderBottomColor","isQttyEnough","uniqueId","price","total","autoFocus","textAlign","reduce","b","emptySale","description","totalAmount","onSaleAdded","salesActions","onSaleEdited","modalActions","currentSale","setSale","selectedItems","SalesTable","onSalesLoaded","onSaleRecovery","onAllSalesLoaded","partnersActions","itemActions","colorScheme","NavigationContainer","LinkingConfiguration","DarkTheme","DefaultTheme","RootNavigator","Stack","createNativeStackNavigator","Navigator","Screen","BottomTabNavigator","options","headerShown","Group","screenOptions","presentation","headerTitleAlign","Drawer","createDrawerNavigator","SalesListScreen","headerRight","opacity","pressed","navigationKey","reducers","incomingAction","configureStore","middleware","thunk","rootReducer","combineReducers","enhancers","windowIfDefined","window","__REDUX_DEVTOOLS_EXTENSION__","push","createStore","compose","applyMiddleware","App","isLoadingComplete","setLoadingComplete","SplashScreen","Font","font","require","warn","useCachedResources","store","getState","document","createElement","textContent","head","append","injectWebCss","module","exports"],"mappings":"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","file":"static/js/app.b0731791.chunk.js","sourcesContent":["import { ColorSchemeName, useColorScheme as _useColorScheme } from 'react-native';\r\n\r\n// The useColorScheme value is always either light or dark, but the built-in\r\n// type suggests that it can be null. This will not happen in practice, so this\r\n// makes it a bit easier to work with.\r\nexport default function useColorScheme(): NonNullable<ColorSchemeName> {\r\n  return _useColorScheme() as NonNullable<ColorSchemeName>;\r\n}\r\n","const tintColorLight = \"#2f95dc\";\r\nconst tintColorDark = \"#fff\";\r\n\r\nexport default {\r\n  light: {\r\n    text: \"#000\",\r\n    background: \"#fff\",\r\n    tint: tintColorLight,\r\n    tabIconDefault: \"#ccc\",\r\n    tabIconSelected: tintColorLight,\r\n    borderColor: \"rgb(0, 255, 0)\",\r\n  },\r\n  dark: {\r\n    text: \"#fff\",\r\n    background: \"#000\",\r\n    tint: tintColorDark,\r\n    tabIconDefault: \"#ccc\",\r\n    tabIconSelected: tintColorDark,\r\n    borderColor: \"rgb(0, 255, 0)\",\r\n  },\r\n};\r\n","import { Dimensions, Platform, PixelRatio } from \"react-native\";\r\n\r\nconst { width: SCREEN_WIDTH, height: SCREEN_HEIGHT } = Dimensions.get(\"window\");\r\n\r\nexport const getHeight = () => Dimensions.get(\"window\").height;\r\nexport const getWidth = () => Dimensions.get(\"window\").width;\r\n\r\nconst scale = SCREEN_WIDTH / 320;\r\n\r\nexport function normalize(size: number) {\r\n  const newSize = size * scale;\r\n  if (Platform.OS === \"ios\") {\r\n    return Math.round(PixelRatio.roundToNearestPixel(newSize));\r\n  } else {\r\n    return Math.round(PixelRatio.roundToNearestPixel(newSize)) - 2;\r\n  }\r\n}\r\n\r\nexport const isMobile = Platform.OS === \"android\" || Platform.OS === \"ios\";\r\n\r\nexport const isAndroid = Platform.OS === \"android\";\r\n\r\nexport const isIOS = Platform.OS === \"ios\";\r\n","/**\r\n * Learn more about Light and Dark modes:\r\n * https://docs.expo.io/guides/color-schemes/\r\n */\r\n\r\nimport {\r\n  Text as DefaultText,\r\n  View as DefaultView,\r\n  TextInput as DefaultTextInput,\r\n  TouchableOpacity,\r\n} from \"react-native\";\r\n\r\nimport Colors from \"../constants/Colors\";\r\nimport { normalize } from \"../helpers/screenSizing\";\r\nimport useColorScheme from \"../hooks/useColorScheme\";\r\n\r\nexport function useThemeColor(\r\n  props: { light?: string; dark?: string },\r\n  colorName: keyof typeof Colors.light & keyof typeof Colors.dark\r\n) {\r\n  const theme = useColorScheme();\r\n  const colorFromProps = props[theme];\r\n\r\n  if (colorFromProps) {\r\n    return colorFromProps;\r\n  } else {\r\n    return Colors[theme][colorName];\r\n  }\r\n}\r\n\r\ntype ThemeProps = {\r\n  lightColor?: string;\r\n  darkColor?: string;\r\n};\r\n\r\ntype DefaultLabeledInputProps = {\r\n  label?: string;\r\n  border?: boolean;\r\n};\r\n\r\ntype DefaultButtonProps = {\r\n  label: string;\r\n};\r\n\r\nexport type TextProps = ThemeProps & DefaultText[\"props\"];\r\nexport type ViewProps = ThemeProps & DefaultView[\"props\"];\r\nexport type InputProps = ThemeProps & DefaultTextInput[\"props\"];\r\nexport type ButtonProps = ThemeProps &\r\n  DefaultButtonProps &\r\n  TouchableOpacity[\"props\"];\r\nexport type LabeledInputProps = ThemeProps &\r\n  DefaultLabeledInputProps &\r\n  DefaultTextInput[\"props\"];\r\n\r\nexport function Text(props: TextProps) {\r\n  const { style, lightColor, darkColor, ...otherProps } = props;\r\n  const color = useThemeColor({ light: lightColor, dark: darkColor }, \"text\");\r\n\r\n  return (\r\n    <DefaultText style={[{ color, margin: \"auto\" }, style]} {...otherProps} />\r\n  );\r\n}\r\n\r\nexport function Header(props: TextProps) {\r\n  const { style, lightColor, darkColor, ...otherProps } = props;\r\n  const color = useThemeColor({ light: lightColor, dark: darkColor }, \"text\");\r\n\r\n  return <Text {...props} style={{ top: \"0px\" }} />;\r\n}\r\n\r\nexport function View(props: ViewProps) {\r\n  const { style, lightColor, darkColor, ...otherProps } = props;\r\n  const backgroundColor = useThemeColor(\r\n    { light: lightColor, dark: darkColor },\r\n    \"background\"\r\n  );\r\n\r\n  return <DefaultView style={[{ backgroundColor }, style]} {...otherProps} />;\r\n}\r\n\r\nexport function PageContainer(props: ViewProps) {\r\n  const { style, lightColor, darkColor, ...otherProps } = props;\r\n  const backgroundColor = useThemeColor(\r\n    { light: lightColor, dark: darkColor },\r\n    \"background\"\r\n  );\r\n\r\n  return (\r\n    <DefaultView\r\n      style={[{ backgroundColor, paddingTop: normalize(8) }, style]}\r\n      {...otherProps}\r\n    />\r\n  );\r\n}\r\n\r\nexport function Separator() {\r\n  return (\r\n    <View\r\n      style={{\r\n        marginVertical: normalize(10),\r\n        height: 1,\r\n        width: normalize(300),\r\n      }}\r\n      lightColor=\"#eee\"\r\n      darkColor=\"rgba(255,255,255,0.1)\"\r\n    />\r\n  );\r\n}\r\n\r\nexport function Input(props: LabeledInputProps) {\r\n  const { style, lightColor, darkColor, border, ...otherProps } = props;\r\n  const color = useThemeColor({ light: lightColor, dark: darkColor }, \"text\");\r\n  const { label } = props;\r\n  return label ? (\r\n    <View\r\n      style={[\r\n        {\r\n          width: normalize(300),\r\n          marginBottom: 10,\r\n          justifyContent: \"center\",\r\n          alignItems: \"center\",\r\n          borderWidth: 0,\r\n        },\r\n      ]}\r\n    >\r\n      <View\r\n        style={{\r\n          borderWidth: 0,\r\n        }}\r\n      >\r\n        <Text style={{ marginLeft: 1, marginBottom: 2 }}>{label}</Text>\r\n        <DefaultTextInput\r\n          style={[\r\n            {\r\n              color,\r\n              borderColor: color,\r\n              width: normalize(300),\r\n              maxWidth: 500,\r\n              borderRadius: 5,\r\n              padding: 3,\r\n              paddingBottom: 5,\r\n              paddingLeft: 5,\r\n              borderWidth: border ? 1 : 0,\r\n            },\r\n            style,\r\n          ]}\r\n          {...otherProps}\r\n        />\r\n      </View>\r\n    </View>\r\n  ) : (\r\n    <DefaultTextInput\r\n      style={[\r\n        {\r\n          color,\r\n          borderColor: color,\r\n          borderWidth: 0,\r\n          width: normalize(300),\r\n          maxWidth: 500,\r\n          borderRadius: 5,\r\n          padding: 3,\r\n          paddingBottom: 5,\r\n          paddingLeft: 5,\r\n        },\r\n        style,\r\n      ]}\r\n      {...otherProps}\r\n    />\r\n  );\r\n}\r\n\r\nexport function Button(props: ButtonProps) {\r\n  const { style, lightColor, darkColor, onPress, label, ...otherProps } = props;\r\n\r\n  return (\r\n    <TouchableOpacity\r\n      style={[\r\n        {\r\n          backgroundColor: otherProps.disabled\r\n            ? \"rgba(35, 134, 38, 0.45)\"\r\n            : \"rgba(35, 134, 38, 0.9)\",\r\n          borderWidth: 1,\r\n          padding: 5,\r\n          borderRadius: 5,\r\n          width: normalize(300),\r\n          maxWidth: 500,\r\n          alignItems: \"center\",\r\n          marginTop: normalize(5),\r\n          borderColor: \"rgba(240,246,252,0.1)\",\r\n          zIndex: 1,\r\n        },\r\n        style,\r\n      ]}\r\n      onPress={onPress}\r\n      {...otherProps}\r\n    >\r\n      <Text style={{ color: \"white\" }}>{label}</Text>\r\n    </TouchableOpacity>\r\n  );\r\n}\r\n","import { StatusBar } from \"expo-status-bar\";\r\nimport { Platform } from \"react-native\";\r\nimport { View } from \"../components/Themed\";\r\nimport React from \"react\";\r\nimport { RootStackScreenProps } from \"../types\";\r\n\r\nconst ModalScreen = ({ route }: RootStackScreenProps<\"Modal\">) => {\r\n  const { component } = route.params;\r\n\r\n  return (\r\n    <View style={{ flex: 1, alignItems: \"center\", justifyContent: \"center\" }}>\r\n      {component}\r\n      <StatusBar style={Platform.OS === \"ios\" ? \"light\" : \"auto\"} />\r\n    </View>\r\n  );\r\n};\r\n\r\nexport default ModalScreen;\r\n","import React, { Children } from \"react\";\r\nimport { PageContainer, Text, Separator } from \"./Themed\";\r\nimport { StyleSheet } from \"react-native\";\r\n\r\ninterface PageProps {\r\n  title?: string;\r\n  children: React.ReactNode | React.ReactNode[];\r\n}\r\n\r\nexport function Page({ title, children }: PageProps) {\r\n  return (\r\n    <PageContainer style={styles.container}>\r\n      {title && <Text style={styles.title}>{title}</Text>}\r\n      {title && <Separator />}\r\n      {children}\r\n    </PageContainer>\r\n  );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    alignItems: \"center\",\r\n  },\r\n  title: {\r\n    fontSize: 20,\r\n    fontWeight: \"bold\",\r\n  },\r\n  separator: {\r\n    marginVertical: 30,\r\n    height: 1,\r\n    width: \"80%\",\r\n  },\r\n});\r\n","export const getDateFormated = (date: Date) => {\r\n  const tempDate = new Date(date);\r\n  return `${toTwoDigitNumber(tempDate.getDate())}.${toTwoDigitNumber(\r\n    tempDate.getMonth() + 1\r\n  )}.${tempDate.getFullYear()} ${toTwoDigitNumber(\r\n    tempDate.getHours()\r\n  )}:${toTwoDigitNumber(tempDate.getMinutes())}`;\r\n};\r\n\r\nconst toTwoDigitNumber = (number: number) => {\r\n  return number.toLocaleString(\"en-US\", {\r\n    minimumIntegerDigits: 2,\r\n    useGrouping: false,\r\n  });\r\n};\r\n\r\nexport const toDecimalFormat = (number: number) => {\r\n  return (Math.round(number * 100) / 100).toFixed(2);\r\n};\r\n\r\nexport const textToDecimalFormat = (text: string) => {\r\n  const number = Number(text);\r\n  return (Math.round(number * 100) / 100).toFixed(2);\r\n};\r\n","import { FontAwesome } from \"@expo/vector-icons\";\r\nimport React, { FunctionComponent, useRef, useState } from \"react\";\r\nimport { Animated } from \"react-native\";\r\nimport { DataTable } from \"react-native-paper\";\r\nimport { useAlerts } from \"react-native-paper-alerts\";\r\nimport { AlertsMethods } from \"react-native-paper-alerts/lib/typescript/type\";\r\nimport GestureRecognizer from \"react-native-swipe-gestures\";\r\nimport { toDecimalFormat } from \"../../helpers/extensions\";\r\nimport {\r\n  AlertModalProps,\r\n  Column,\r\n  IListable,\r\n  TableAction,\r\n} from \"../../helpers/models\";\r\n\r\ntype TableBodyProps = {\r\n  columns: Column[];\r\n  data: IListable[];\r\n  deleteProps?: AlertModalProps;\r\n  onEdit?: (itemId: string) => void;\r\n  additionalActions?: TableAction[];\r\n  showDeleted?: {\r\n    showDeleted: boolean;\r\n    setShowDeleted: (showDeleted: boolean) => void;\r\n    recoverProps: AlertModalProps;\r\n  };\r\n};\r\n\r\nconst MobileBody = ({\r\n  columns,\r\n  data,\r\n  deleteProps,\r\n  onEdit,\r\n  additionalActions,\r\n  showDeleted,\r\n}: TableBodyProps) => {\r\n  const [showAdditionalMenus, setShowAdditionalMenus] = useState(\"\");\r\n  const translateAnim = useRef(new Animated.Value(300)).current;\r\n  const alerts = useAlerts();\r\n  const createTwoButtonAlert = (\r\n    itemId: string,\r\n    alertProps: AlertModalProps,\r\n    alerts: AlertsMethods\r\n  ) =>\r\n    alerts.alert(alertProps.title, alertProps.content, [\r\n      {\r\n        text: alertProps.cancelBtnTxt,\r\n      },\r\n      {\r\n        text: alertProps.acceptBtnTxt,\r\n        onPress: () => alertProps.onAction(itemId),\r\n      },\r\n    ]);\r\n\r\n  return (\r\n    <>\r\n      {data &&\r\n        data.map((item) => {\r\n          return (\r\n            (!showDeleted ||\r\n              showDeleted.showDeleted ||\r\n              (!showDeleted.showDeleted && !item.isDeleted)) && (\r\n              <GestureRecognizer\r\n                key={item.id}\r\n                onSwipeLeft={() => {\r\n                  if (item.id !== showAdditionalMenus) {\r\n                    translateAnim.setValue(300);\r\n                    setShowAdditionalMenus(item.id);\r\n                    Animated.timing(translateAnim, {\r\n                      toValue: 0,\r\n                      duration: 200,\r\n                      useNativeDriver: true,\r\n                    }).start();\r\n                  }\r\n                }}\r\n                onSwipeRight={() => {\r\n                  Animated.timing(translateAnim, {\r\n                    toValue: 300,\r\n                    duration: 200,\r\n                    useNativeDriver: true,\r\n                  }).start(() => setShowAdditionalMenus(\"\"));\r\n                }}\r\n              >\r\n                <DataTable.Row\r\n                  style={{\r\n                    backgroundColor: item.isDeleted\r\n                      ? \"rgba(255, 0, 0, 0.05)\"\r\n                      : \"white\",\r\n                  }}\r\n                >\r\n                  {columns.map((column) => {\r\n                    return (\r\n                      <DataTable.Cell\r\n                        key={column.name}\r\n                        style={{\r\n                          flex: column.flex ?? 1,\r\n                        }}\r\n                      >\r\n                        {column.isMoney\r\n                          ? toDecimalFormat(Number(item[column.propName]))\r\n                          : item[column.propName]}\r\n                      </DataTable.Cell>\r\n                    );\r\n                  })}\r\n                  {showAdditionalMenus == item.id &&\r\n                    (onEdit ||\r\n                      deleteProps ||\r\n                      additionalActions ||\r\n                      (showDeleted && item.isDeleted)) && (\r\n                      <Animated.View\r\n                        key={item.id}\r\n                        style={{\r\n                          alignSelf: \"center\",\r\n                          flexDirection: \"row\",\r\n                          transform: [{ translateX: translateAnim }],\r\n                        }}\r\n                      >\r\n                        {additionalActions &&\r\n                          additionalActions.map((action) => (\r\n                            <FontAwesome\r\n                              name={action.name}\r\n                              size={30}\r\n                              color={action.color}\r\n                              style={{\r\n                                alignSelf: \"center\",\r\n                                marginRight: 10,\r\n                              }}\r\n                              onPress={() => {\r\n                                action.onPress(item);\r\n                                setShowAdditionalMenus(\"\");\r\n                              }}\r\n                            />\r\n                          ))}\r\n                        {onEdit && (\r\n                          <FontAwesome\r\n                            name=\"edit\"\r\n                            size={30}\r\n                            color=\"green\"\r\n                            style={{\r\n                              alignSelf: \"center\",\r\n                              marginRight: 10,\r\n                            }}\r\n                            onPress={() => {\r\n                              onEdit(item.id);\r\n                              setShowAdditionalMenus(\"\");\r\n                            }}\r\n                          />\r\n                        )}\r\n                        {deleteProps && !item.isDeleted && (\r\n                          <FontAwesome\r\n                            name=\"remove\"\r\n                            size={30}\r\n                            color=\"green\"\r\n                            style={{\r\n                              alignSelf: \"center\",\r\n                              paddingBottom: 4,\r\n                            }}\r\n                            onPress={() =>\r\n                              createTwoButtonAlert(item.id, deleteProps, alerts)\r\n                            }\r\n                          />\r\n                        )}\r\n                        {showDeleted && item.isDeleted && (\r\n                          <FontAwesome\r\n                            name=\"arrow-down\"\r\n                            size={30}\r\n                            color=\"green\"\r\n                            style={{\r\n                              alignSelf: \"center\",\r\n                              paddingBottom: 4,\r\n                            }}\r\n                            onPress={() =>\r\n                              createTwoButtonAlert(\r\n                                item.id,\r\n                                showDeleted.recoverProps,\r\n                                alerts\r\n                              )\r\n                            }\r\n                          />\r\n                        )}\r\n                      </Animated.View>\r\n                    )}\r\n                </DataTable.Row>\r\n              </GestureRecognizer>\r\n            )\r\n          );\r\n        })}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default MobileBody;\r\n","import { FontAwesome } from \"@expo/vector-icons\";\r\nimport React from \"react\";\r\nimport { Animated } from \"react-native\";\r\nimport { DataTable } from \"react-native-paper\";\r\nimport { useAlerts } from \"react-native-paper-alerts\";\r\nimport { AlertsMethods } from \"react-native-paper-alerts/lib/typescript/type\";\r\nimport { toDecimalFormat } from \"../../helpers/extensions\";\r\nimport {\r\n  AlertModalProps,\r\n  Column,\r\n  IListable,\r\n  TableAction,\r\n} from \"../../helpers/models\";\r\n\r\ntype TableBodyProps = {\r\n  columns: Column[];\r\n  data: IListable[];\r\n  deleteProps?: AlertModalProps;\r\n  onEdit?: (itemId: string) => void;\r\n  additionalActions?: TableAction[];\r\n  showDeleted?: {\r\n    showDeleted: boolean;\r\n    setShowDeleted: (showDeleted: boolean) => void;\r\n    recoverProps: AlertModalProps;\r\n  };\r\n};\r\n\r\nconst TableBody = ({\r\n  columns,\r\n  data,\r\n  deleteProps,\r\n  onEdit,\r\n  additionalActions,\r\n  showDeleted,\r\n}: TableBodyProps) => {\r\n  const alerts = useAlerts();\r\n  const createTwoButtonAlert = (\r\n    itemId: string,\r\n    alertProps: AlertModalProps,\r\n    alerts: AlertsMethods\r\n  ) =>\r\n    alerts.alert(alertProps.title, alertProps.content, [\r\n      {\r\n        text: alertProps.cancelBtnTxt,\r\n      },\r\n      {\r\n        text: alertProps.acceptBtnTxt,\r\n        onPress: () => alertProps.onAction(itemId),\r\n      },\r\n    ]);\r\n\r\n  return (\r\n    <>\r\n      {data &&\r\n        data.map((item) => {\r\n          return (\r\n            (!showDeleted ||\r\n              showDeleted.showDeleted ||\r\n              (!showDeleted.showDeleted && !item.isDeleted)) && (\r\n              <DataTable.Row\r\n                key={item.id}\r\n                style={{\r\n                  backgroundColor: item.isDeleted\r\n                    ? \"rgba(255, 0, 0, 0.05)\"\r\n                    : \"white\",\r\n                }}\r\n              >\r\n                {columns.map((column) => {\r\n                  return (\r\n                    <DataTable.Cell\r\n                      key={column.name}\r\n                      style={{\r\n                        flex: column.flex ?? 1,\r\n                      }}\r\n                    >\r\n                      {column.isMoney\r\n                        ? toDecimalFormat(Number(item[column.propName]))\r\n                        : item[column.propName]}\r\n                    </DataTable.Cell>\r\n                  );\r\n                })}\r\n                {(onEdit ||\r\n                  deleteProps ||\r\n                  additionalActions ||\r\n                  (showDeleted && item.isDeleted)) && (\r\n                  <Animated.View\r\n                    key={item.id}\r\n                    style={{\r\n                      alignSelf: \"center\",\r\n                      flexDirection: \"row\",\r\n                    }}\r\n                  >\r\n                    {additionalActions &&\r\n                      additionalActions.map((action) => (\r\n                        <FontAwesome\r\n                          name={action.name}\r\n                          size={30}\r\n                          color={action.color}\r\n                          style={{\r\n                            alignSelf: \"center\",\r\n                            marginRight: 10,\r\n                          }}\r\n                          onPress={() => action.onPress(item)}\r\n                        />\r\n                      ))}\r\n                    {onEdit && (\r\n                      <FontAwesome\r\n                        name=\"edit\"\r\n                        size={30}\r\n                        color=\"green\"\r\n                        style={{\r\n                          alignSelf: \"center\",\r\n                          marginRight: 10,\r\n                        }}\r\n                        onPress={() => onEdit(item.id)}\r\n                      />\r\n                    )}\r\n                    {deleteProps && !item.isDeleted && (\r\n                      <FontAwesome\r\n                        name=\"remove\"\r\n                        size={30}\r\n                        color=\"green\"\r\n                        style={{\r\n                          alignSelf: \"center\",\r\n                          paddingBottom: 4,\r\n                        }}\r\n                        onPress={() =>\r\n                          createTwoButtonAlert(item.id, deleteProps, alerts)\r\n                        }\r\n                      />\r\n                    )}\r\n                    {showDeleted && item.isDeleted && (\r\n                      <FontAwesome\r\n                        name=\"arrow-down\"\r\n                        size={30}\r\n                        color=\"green\"\r\n                        style={{\r\n                          alignSelf: \"center\",\r\n                          paddingBottom: 4,\r\n                        }}\r\n                        onPress={() =>\r\n                          createTwoButtonAlert(\r\n                            item.id,\r\n                            showDeleted.recoverProps,\r\n                            alerts\r\n                          )\r\n                        }\r\n                      />\r\n                    )}\r\n                  </Animated.View>\r\n                )}\r\n              </DataTable.Row>\r\n            )\r\n          );\r\n        })}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default TableBody;\r\n","import React, { FunctionComponent, useState, useRef } from \"react\";\r\nimport { DataTable } from \"react-native-paper\";\r\nimport GestureRecognizer from \"react-native-swipe-gestures\";\r\nimport {\r\n  Column,\r\n  AlertModalProps as AlertModalProps,\r\n  IListable,\r\n  TableAction,\r\n} from \"../../helpers/models\";\r\nimport { isMobile, normalize } from \"../../helpers/screenSizing\";\r\nimport { FontAwesome } from \"@expo/vector-icons\";\r\nimport { Animated, Switch } from \"react-native\";\r\nimport { useAlerts } from \"react-native-paper-alerts\";\r\nimport { AlertsMethods } from \"react-native-paper-alerts/lib/typescript/type\";\r\nimport { toDecimalFormat } from \"../../helpers/extensions\";\r\nimport MobileBody from \"./MobileBody\";\r\nimport TableBody from \"./TableBody\";\r\n\r\ntype RowProps = {\r\n  columns: Column[];\r\n};\r\n\r\ntype TableProps = {\r\n  columns: Column[];\r\n  data: IListable[];\r\n  deleteProps?: AlertModalProps;\r\n  onEdit?: (itemId: string) => void;\r\n  additionalActions?: TableAction[];\r\n  showDeleted?: {\r\n    showDeleted: boolean;\r\n    setShowDeleted: (showDeleted: boolean) => void;\r\n    recoverProps: AlertModalProps;\r\n  };\r\n};\r\n\r\nconst Table: FunctionComponent<TableProps> = ({\r\n  columns,\r\n  data,\r\n  deleteProps,\r\n  onEdit,\r\n  additionalActions,\r\n  showDeleted,\r\n}) => {\r\n  const renderHeader: FunctionComponent<RowProps> = ({ columns }) => {\r\n    return (\r\n      <DataTable.Header>\r\n        <>\r\n          {columns &&\r\n            columns.map((column) => {\r\n              return (\r\n                <DataTable.Title\r\n                  key={column.name}\r\n                  style={{ flex: column.flex ?? 1 }}\r\n                >\r\n                  {column.name}\r\n                </DataTable.Title>\r\n              );\r\n            })}\r\n          {showDeleted && (\r\n            <Switch\r\n              trackColor={{ false: \"#767577\", true: \"#81b0ff\" }}\r\n              thumbColor={showDeleted.showDeleted ? \"#f5dd4b\" : \"#f4f3f4\"}\r\n              ios_backgroundColor=\"#3e3e3e\"\r\n              onValueChange={showDeleted.setShowDeleted}\r\n              style={{ alignSelf: \"flex-end\", marginBottom: 14 }}\r\n              value={showDeleted.showDeleted}\r\n            />\r\n          )}\r\n        </>\r\n      </DataTable.Header>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <DataTable\r\n      style={{\r\n        width: normalize(300),\r\n      }}\r\n    >\r\n      {renderHeader({ columns })}\r\n      {isMobile ? (\r\n        <MobileBody\r\n          columns={columns}\r\n          data={data}\r\n          deleteProps={deleteProps}\r\n          onEdit={onEdit}\r\n          additionalActions={additionalActions}\r\n          showDeleted={showDeleted}\r\n        />\r\n      ) : (\r\n        <TableBody\r\n          columns={columns}\r\n          data={data}\r\n          deleteProps={deleteProps}\r\n          onEdit={onEdit}\r\n          additionalActions={additionalActions}\r\n          showDeleted={showDeleted}\r\n        />\r\n      )}\r\n    </DataTable>\r\n  );\r\n};\r\n\r\nexport default Table;\r\n","const isDev = false;\r\n\r\nexport const API_PATH = isDev\r\n  ? \"https://localhost:5001/\"\r\n  : \"https://warehouse-magnus.azurewebsites.net/\";\r\n","import { API_PATH } from \"../../helpers/constants\";\r\n\r\nexport async function get<T>(url: string): Promise<T[]> {\r\n  const response = await fetch(`${API_PATH}${url}`);\r\n  if (response.ok) {\r\n    try {\r\n      return (await response.json()) as T[];\r\n    } catch (ex) {\r\n      throw ex;\r\n    }\r\n  }\r\n\r\n  return [];\r\n}\r\n\r\nexport async function put<T>(url: string, data: T): Promise<boolean> {\r\n  const response = await fetch(`${API_PATH}${url}`, {\r\n    method: \"PUT\",\r\n    credentials: \"omit\",\r\n    cache: \"no-cache\",\r\n    body: JSON.stringify(data),\r\n    headers: {\r\n      \"content-type\": \"application/json\",\r\n    },\r\n  });\r\n\r\n  return response.ok;\r\n}\r\n\r\nexport async function post<T>(url: string, data: any): Promise<T> {\r\n  const response = await fetch(`${API_PATH}${url}`, {\r\n    method: \"POST\",\r\n    credentials: \"omit\",\r\n    cache: \"no-cache\",\r\n    body: JSON.stringify(data),\r\n    headers: {\r\n      \"content-type\": \"application/json\",\r\n    },\r\n  });\r\n\r\n  if (response.ok) {\r\n    try {\r\n      return (await response.json()) as T;\r\n    } catch (ex) {\r\n      throw ex;\r\n    }\r\n  }\r\n\r\n  return {} as T;\r\n}\r\n\r\nexport async function deletee(url: string, id: string): Promise<boolean> {\r\n  const response = await fetch(`${API_PATH}${url}`, {\r\n    method: \"DELETE\",\r\n    credentials: \"omit\",\r\n    cache: \"no-cache\",\r\n    body: JSON.stringify(id),\r\n    headers: {\r\n      \"content-type\": \"application/json\",\r\n    },\r\n  });\r\n\r\n  return response.ok;\r\n}\r\n","import { Action, Reducer } from \"redux\";\r\nimport { BuyItem, Item } from \"../helpers/models\";\r\nimport {\r\n  deletee,\r\n  get,\r\n  post,\r\n  put,\r\n} from \"../services/communication/connectionService\";\r\nimport { ADD_ITEM, LOAD_ITEMS } from \"./constants\";\r\nimport { AppThunk } from \"./store\";\r\n\r\nexport interface ItemsState {\r\n  items: Item[];\r\n  showDeleted: boolean;\r\n}\r\n\r\ninterface AddItemAction {\r\n  type: \"ADD_ITEM\";\r\n  item: Item;\r\n}\r\n\r\ninterface EditItemAction {\r\n  type: \"EDIT_ITEM\";\r\n  item: Item;\r\n}\r\n\r\ninterface LoadItemsAction {\r\n  type: \"LOAD_ITEMS\";\r\n  items: Item[];\r\n}\r\n\r\ninterface LoadAllItemsAction {\r\n  type: \"LOAD_ALL_ITEMS\";\r\n  items: Item[];\r\n}\r\n\r\ninterface DeleteItemAction {\r\n  type: \"DELETE_ITEM\";\r\n  itemId: string;\r\n}\r\n\r\ninterface BuyItemsAction {\r\n  type: \"BUY_ITEM\";\r\n  buyItem: BuyItem;\r\n}\r\n\r\ninterface SetShowDeletedAction {\r\n  type: \"SET_SHOW_DELETED\";\r\n  showDeleted: boolean;\r\n}\r\n\r\nexport type KnownAction =\r\n  | AddItemAction\r\n  | LoadItemsAction\r\n  | LoadAllItemsAction\r\n  | EditItemAction\r\n  | DeleteItemAction\r\n  | BuyItemsAction\r\n  | SetShowDeletedAction;\r\n\r\nexport const addItem = (item: Item): AddItemAction => ({\r\n  type: ADD_ITEM,\r\n  item,\r\n});\r\n\r\nexport const editItem = (item: Item): EditItemAction => ({\r\n  type: \"EDIT_ITEM\",\r\n  item,\r\n});\r\n\r\nexport const deleteItem = (itemId: string): DeleteItemAction => ({\r\n  type: \"DELETE_ITEM\",\r\n  itemId,\r\n});\r\n\r\nexport const loadItems = (items: Item[]): LoadItemsAction => ({\r\n  type: LOAD_ITEMS,\r\n  items,\r\n});\r\n\r\nexport const loadAllItems = (items: Item[]): LoadAllItemsAction => ({\r\n  type: \"LOAD_ALL_ITEMS\",\r\n  items,\r\n});\r\n\r\nexport const buyItem = (buyItem: BuyItem): BuyItemsAction => ({\r\n  type: \"BUY_ITEM\",\r\n  buyItem,\r\n});\r\n\r\nexport const setShowDeleted = (showDeleted: boolean): SetShowDeletedAction => ({\r\n  type: \"SET_SHOW_DELETED\",\r\n  showDeleted,\r\n});\r\n\r\nexport const actionCreators = {\r\n  onAddItem: (itemDTO: Item): AppThunk<void, KnownAction> => {\r\n    return (dispatch: any) => {\r\n      post<Item>(\"api/items/\", itemDTO)\r\n        .then((item) => {\r\n          dispatch(addItem(item));\r\n        })\r\n        .catch((ex) => {\r\n          console.log(ex);\r\n        });\r\n    };\r\n  },\r\n  onLoadItems: (): AppThunk<void, KnownAction> => {\r\n    return (dispatch: any) => {\r\n      get<Item>(\"api/items/\")\r\n        .then((items) => {\r\n          dispatch(loadItems(items));\r\n        })\r\n        .catch((error) => {\r\n          console.log(error);\r\n        });\r\n    };\r\n  },\r\n  onLoadAllItems: (): AppThunk<void, KnownAction> => {\r\n    return (dispatch: any) => {\r\n      get<Item>(\"api/items/get-all\")\r\n        .then((items) => {\r\n          dispatch(loadAllItems(items));\r\n        })\r\n        .catch((error) => {\r\n          console.log(error);\r\n        });\r\n    };\r\n  },\r\n  onEditItem: (itemDTO: Item): AppThunk<void, KnownAction> => {\r\n    return (dispatch: any) => {\r\n      put<Item>(\"api/items/\", itemDTO)\r\n        .then((isUpdated) => {\r\n          isUpdated && dispatch(editItem(itemDTO));\r\n        })\r\n        .catch((ex) => {\r\n          console.log(ex);\r\n        });\r\n    };\r\n  },\r\n  onDeleteItem: (itemId: string): AppThunk<void, KnownAction> => {\r\n    return (dispatch: any) => {\r\n      deletee(\"api/items/\", itemId).then((isDeleted) => {\r\n        isDeleted && dispatch(deleteItem(itemId));\r\n      });\r\n    };\r\n  },\r\n  onBuyItem: (item: BuyItem): AppThunk<void, KnownAction> => {\r\n    return (dispatch: any) => {\r\n      post<BuyItem>(\"api/items/buy-item\", item).then((item) => {\r\n        dispatch(buyItem(item));\r\n      });\r\n    };\r\n  },\r\n  onItemRecovery: (itemId: string): AppThunk<void, KnownAction> => {\r\n    return (dispatch: any) => {\r\n      post<Item>(\"api/items/item-recovery\", itemId).then((item: Item) => {\r\n        dispatch(editItem(item));\r\n      });\r\n    };\r\n  },\r\n  setShowDeleted: (showDeleted: boolean): AppThunk<void, KnownAction> => {\r\n    return (dispatch: any) => {\r\n      dispatch(setShowDeleted(showDeleted));\r\n    };\r\n  },\r\n};\r\n\r\nconst initialState = { items: [], showDeleted: false };\r\n\r\nexport const reducer: Reducer<ItemsState> = (\r\n  state = initialState,\r\n  incomingAction: Action\r\n): ItemsState => {\r\n  const action = incomingAction as KnownAction;\r\n  switch (action.type) {\r\n    case ADD_ITEM:\r\n      return { ...state, items: [...state.items, action.item] };\r\n    case LOAD_ITEMS:\r\n      return { ...state, items: action.items };\r\n    case \"LOAD_ALL_ITEMS\":\r\n      return { ...state, items: action.items };\r\n    case \"EDIT_ITEM\":\r\n      return {\r\n        ...state,\r\n        items: [\r\n          ...state.items.map((item) => {\r\n            if (item.id === action.item.id) return { ...action.item };\r\n            return item;\r\n          }),\r\n        ],\r\n      };\r\n    case \"DELETE_ITEM\":\r\n      return {\r\n        ...state,\r\n        items: state.showDeleted\r\n          ? [\r\n              ...state.items.map((item) => {\r\n                if (item.id === action.itemId)\r\n                  return { ...item, isDeleted: true };\r\n                return item;\r\n              }),\r\n            ]\r\n          : [...state.items.filter((item) => item.id !== action.itemId)],\r\n      };\r\n    case \"BUY_ITEM\":\r\n      return {\r\n        ...state,\r\n        items: [\r\n          ...state.items.map((item) => {\r\n            if (item.id === action.buyItem.itemId)\r\n              return {\r\n                ...item,\r\n                qtty: (\r\n                  Number(item.qtty) + Number(action.buyItem.qtty)\r\n                ).toString(),\r\n                basePrice: action.buyItem.basePrice,\r\n              };\r\n            return item;\r\n          }),\r\n        ],\r\n      };\r\n    case \"SET_SHOW_DELETED\":\r\n      return {\r\n        ...state,\r\n        showDeleted: action.showDeleted,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","export const ADD_ITEM = \"ADD_ITEM\";\r\nexport const LOAD_ITEMS = \"LOAD_ITEMS\";\r\n","import { NavigationProp } from \"@react-navigation/native\";\r\nimport React from \"react\";\r\nimport { AlertModalProps, Column, IListable } from \"../../../../helpers/models\";\r\nimport { RootStackParamList } from \"../../../../types\";\r\n\r\ntype TableModelProps = {\r\n  columns: Column[];\r\n  listableItems: IListable[];\r\n  dispatch: any;\r\n  navigation: NavigationProp<RootStackParamList>;\r\n  showDeleted?: {\r\n    showDeleted: boolean;\r\n    setShowDeleted: (showDeleted: boolean) => void;\r\n    recoverProps: AlertModalProps;\r\n  };\r\n};\r\n\r\nexport default abstract class TableModel extends React.Component<TableModelProps> {\r\n  public abstract onEdit: (listableId: string) => void;\r\n  public abstract onDelete: (listableId: string) => void;\r\n}\r\n","import React, { FunctionComponent, useRef, useState } from \"react\";\r\nimport { Animated, Pressable, Text } from \"react-native\";\r\nimport { normalize } from \"../../helpers/screenSizing\";\r\nimport { Input, View } from \"../Themed\";\r\n\r\ninterface DropdownProps {\r\n  items: {\r\n    id: string;\r\n    title: string;\r\n  }[];\r\n  selectedItem?:\r\n    | {\r\n        id: string;\r\n        title: string;\r\n      }\r\n    | undefined;\r\n  handleItemChosen: (itemId: string) => void;\r\n  label?: string;\r\n  border?: boolean;\r\n  style?: {\r\n    margin?: number;\r\n    marginTop?: number;\r\n    marginBottom?: number;\r\n  };\r\n  placeholder: string;\r\n}\r\n\r\nconst Dropdown: FunctionComponent<DropdownProps> = ({\r\n  items,\r\n  handleItemChosen,\r\n  selectedItem,\r\n  label,\r\n  border,\r\n  style,\r\n  placeholder,\r\n}) => {\r\n  const [inputText, setInputText] = useState(selectedItem?.title ?? \"\");\r\n  const [shownItems, setShownItems] = useState(items);\r\n  const height = useRef(new Animated.Value(label ? 50 : 26.67)).current;\r\n  const rowHeight = useRef(new Animated.Value(26.67)).current;\r\n  const contentHeight = useRef(new Animated.Value(0)).current;\r\n\r\n  const toggleDropdown = (isOpen: boolean) => {\r\n    Animated.timing(height, {\r\n      toValue: isOpen\r\n        ? Math.min(250, 50 + shownItems.length * 26.67)\r\n        : label\r\n        ? 50\r\n        : 26.67,\r\n      duration: 200,\r\n      useNativeDriver: false,\r\n    }).start();\r\n    Animated.timing(rowHeight, {\r\n      toValue: isOpen ? 26.67 : 0,\r\n      duration: isOpen ? 400 : 200,\r\n      useNativeDriver: false,\r\n    }).start();\r\n    Animated.timing(contentHeight, {\r\n      toValue: isOpen ? 200 : 0,\r\n      duration: 200,\r\n      useNativeDriver: false,\r\n    }).start();\r\n  };\r\n\r\n  const handleInputFocus = () => {\r\n    toggleDropdown(true);\r\n  };\r\n\r\n  const handleInputChange = (e: string) => {\r\n    setInputText(e);\r\n    setShownItems(\r\n      items.filter((item) => item.title.toLowerCase().includes(e.toLowerCase()))\r\n    );\r\n  };\r\n\r\n  const handleItemClick = (item: { id: string; title: string }) => {\r\n    setInputText(item.title);\r\n    handleItemChosen(item.id);\r\n    if (selectedItem?.id === \"\") {\r\n      setInputText(\"\");\r\n    }\r\n  };\r\n\r\n  const handleOnBlur = () => {\r\n    setTimeout(() => toggleDropdown(false), 200);\r\n  };\r\n\r\n  return (\r\n    <Animated.View\r\n      style={{\r\n        height: height,\r\n        maxHeight: height,\r\n        margin: style?.margin ?? 0,\r\n        marginBottom: style?.marginBottom ?? 0,\r\n        marginTop: style?.marginTop ?? 0,\r\n      }}\r\n    >\r\n      <View\r\n        style={{\r\n          position: \"relative\",\r\n          borderColor: \"black\",\r\n          height: 23,\r\n          alignSelf: \"stretch\",\r\n        }}\r\n      >\r\n        <Input\r\n          label={label}\r\n          onFocus={handleInputFocus}\r\n          onBlur={handleOnBlur}\r\n          value={inputText}\r\n          placeholder={placeholder}\r\n          onChangeText={handleInputChange}\r\n          style={{\r\n            borderWidth: border ? 1 : 0,\r\n          }}\r\n        />\r\n\r\n        <Animated.View\r\n          style={{\r\n            maxHeight: contentHeight,\r\n            position: \"relative\",\r\n            width: normalize(300),\r\n            maxWidth: 500,\r\n            justifyContent: \"center\",\r\n            alignItems: \"center\",\r\n            alignSelf: \"center\",\r\n          }}\r\n        >\r\n          <Animated.View\r\n            style={{\r\n              maxHeight: contentHeight,\r\n              overflow: \"scroll\",\r\n              alignSelf: \"stretch\",\r\n            }}\r\n          >\r\n            {shownItems.map((item) => (\r\n              <Animated.View\r\n                style={{\r\n                  maxHeight: rowHeight,\r\n                }}\r\n              >\r\n                <Pressable\r\n                  key={item.id}\r\n                  onPress={() => {\r\n                    handleItemClick(item);\r\n                  }}\r\n                  style={{\r\n                    paddingLeft: 12,\r\n                    height: 25,\r\n                  }}\r\n                >\r\n                  <Text>{item.title}</Text>\r\n                </Pressable>\r\n              </Animated.View>\r\n            ))}\r\n          </Animated.View>\r\n        </Animated.View>\r\n      </View>\r\n    </Animated.View>\r\n  );\r\n};\r\n\r\nexport default Dropdown;\r\n","import { Action, Reducer } from \"redux\";\r\nimport { AppThunk } from \"./store\";\r\n\r\nexport interface ModalState {\r\n  title: string;\r\n}\r\n\r\nexport interface ChangeTitleAction {\r\n  type: \"CHANGE_TITLE\";\r\n  title: string;\r\n}\r\n\r\nexport const changeTitle = (title: string): ChangeTitleAction => ({\r\n  type: \"CHANGE_TITLE\",\r\n  title,\r\n});\r\n\r\nexport const actionCreators = {\r\n  onTitleChange: (title: string): AppThunk<void, ChangeTitleAction> => {\r\n    return (dispatch) => {\r\n      dispatch<any>(changeTitle(title));\r\n    };\r\n  },\r\n};\r\n\r\nconst initialState = {\r\n  title: \"\",\r\n};\r\n\r\nexport const reducer: Reducer<ModalState> = (\r\n  state = initialState,\r\n  incomingAction: Action\r\n): ModalState => {\r\n  const action = incomingAction as ChangeTitleAction;\r\n  switch (action.type) {\r\n    case \"CHANGE_TITLE\":\r\n      return { title: action.title };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import { useNavigation } from \"@react-navigation/native\";\r\nimport React, { FunctionComponent, useEffect, useState } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport Dropdown from \"../../components/dropdowns/Dropdown\";\r\nimport { Page } from \"../../components/Page\";\r\nimport { Button, Input } from \"../../components/Themed\";\r\nimport { Item, Partner } from \"../../helpers/models\";\r\nimport { actionCreators } from \"../../redux/itemActions\";\r\nimport { actionCreators as modalActionCreators } from \"../../redux/modalActions\";\r\nimport { AppState } from \"../../redux/store\";\r\n\r\ninterface Props {\r\n  itemId?: string;\r\n  items: Item[];\r\n  partners: Partner[];\r\n  onItemAdded: (item: Item) => void;\r\n  onItemEdited: (item: Item) => void;\r\n  onModalTitleChanged: (title: string) => void;\r\n}\r\n\r\nconst emptyItem = {\r\n  name: \"\",\r\n  basePrice: \"\",\r\n  sellPrice: \"\",\r\n  partnerId: \"\",\r\n  qtty: \"\",\r\n} as Item;\r\n\r\nconst AddItemScreen: FunctionComponent<Props> = ({\r\n  itemId,\r\n  items,\r\n  partners,\r\n  onItemAdded,\r\n  onModalTitleChanged,\r\n  onItemEdited,\r\n}) => {\r\n  const currentItem = items.find((i) => i.id === itemId);\r\n  const [item, setItem] = useState(currentItem ?? emptyItem);\r\n  const navigator = useNavigation();\r\n\r\n  const [selectableItems] = useState(\r\n    partners.map((partner) => ({\r\n      id: partner.id,\r\n      title: partner.name,\r\n    }))\r\n  );\r\n\r\n  if (currentItem) {\r\n    onModalTitleChanged(\"Редакция на стока\");\r\n  } else {\r\n    onModalTitleChanged(\"Добавяне на стока\");\r\n  }\r\n\r\n  const onTextChange = (name: string, value: string) => {\r\n    setItem({\r\n      ...item,\r\n      [name]: value,\r\n    });\r\n  };\r\n\r\n  const handlePartnerSelect = (partnerId: string) => {\r\n    setItem({ ...item, partnerId });\r\n  };\r\n\r\n  return (\r\n    <Page>\r\n      <Input\r\n        label=\"Име на стоката:\"\r\n        onChangeText={(txt) => onTextChange(\"name\", txt)}\r\n        value={item.name}\r\n        border={true}\r\n      />\r\n      <Dropdown\r\n        placeholder=\"Въведете име на доставчик\"\r\n        selectedItem={\r\n          currentItem\r\n            ? {\r\n                id: currentItem.partnerId,\r\n                title:\r\n                  partners.find(\r\n                    (partner) => partner.id === currentItem.partnerId\r\n                  )?.name ?? \"\",\r\n              }\r\n            : undefined\r\n        }\r\n        items={selectableItems}\r\n        handleItemChosen={handlePartnerSelect}\r\n        label=\"Име на доставчик\"\r\n        border={true}\r\n        style={{ marginBottom: 15 }}\r\n      />\r\n      {!currentItem && (\r\n        <Input\r\n          label=\"Доставна цена:\"\r\n          onChangeText={(txt) => onTextChange(\"basePrice\", txt)}\r\n          value={item.basePrice.toString()}\r\n          keyboardType=\"numeric\"\r\n          border={true}\r\n        />\r\n      )}\r\n      {!currentItem && (\r\n        <Input\r\n          label=\"Количество:\"\r\n          onChangeText={(txt) => onTextChange(\"qtty\", txt)}\r\n          value={item.qtty}\r\n          keyboardType=\"numeric\"\r\n          border={true}\r\n        />\r\n      )}\r\n      <Input\r\n        label=\"Продажна цена:\"\r\n        onChangeText={(txt) => onTextChange(\"sellPrice\", txt)}\r\n        value={item.sellPrice.toString()}\r\n        keyboardType=\"numeric\"\r\n        border={true}\r\n      />\r\n      <Button\r\n        label={currentItem ? \"Редакция на стока\" : \"Добавяне на стока\"}\r\n        onPress={() => {\r\n          currentItem ? onItemEdited(item) : onItemAdded(item);\r\n          setItem(emptyItem);\r\n          navigator.navigate(\"Root\");\r\n        }}\r\n      />\r\n    </Page>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state: AppState) => ({\r\n  items: state.items!.items,\r\n  partners: state.partners!.partners,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch: any) => {\r\n  return {\r\n    onItemAdded: (item: Item) => {\r\n      dispatch(actionCreators.onAddItem(item));\r\n    },\r\n    onItemEdited: (item: Item) => {\r\n      dispatch(actionCreators.onEditItem(item));\r\n    },\r\n    onModalTitleChanged: (modalTitle: string) => {\r\n      dispatch(modalActionCreators.onTitleChange(modalTitle));\r\n    },\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(AddItemScreen);\r\n","import { useNavigation } from \"@react-navigation/native\";\r\nimport React, { FunctionComponent, useEffect, useState } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Page } from \"../../components/Page\";\r\nimport { Button, Input, Text } from \"../../components/Themed\";\r\nimport { toDecimalFormat } from \"../../helpers/extensions\";\r\nimport { BuyItem, Item } from \"../../helpers/models\";\r\nimport { actionCreators } from \"../../redux/modalActions\";\r\nimport { actionCreators as itemsActions } from \"../../redux/itemActions\";\r\n\r\ntype Props = {\r\n  item: Item;\r\n  onModalTitleChanged: (modalTitle: string) => void;\r\n  onBuyItem: (buyItem: BuyItem) => void;\r\n};\r\n\r\nconst BuyItemScreen: FunctionComponent<Props> = ({\r\n  item,\r\n  onModalTitleChanged,\r\n  onBuyItem,\r\n}) => {\r\n  const [currentItem, setItem] = useState({ ...item, qtty: \"1\" });\r\n  const onTextChange = (name: string, value: string) => {\r\n    setItem({\r\n      ...currentItem,\r\n      [name]: value,\r\n    });\r\n  };\r\n  const navigator = useNavigation();\r\n\r\n  useEffect(() => onModalTitleChanged(\"Покупка на стока\"));\r\n\r\n  return (\r\n    <Page>\r\n      <Input label=\"Име на стоката:\" value={currentItem.name} border={true} />\r\n      <Input\r\n        label=\"Доставна цена:\"\r\n        onChangeText={txt => onTextChange(\"basePrice\", txt)}\r\n        value={currentItem.basePrice}\r\n        keyboardType=\"numeric\"\r\n        border={true}\r\n      />\r\n      <Input\r\n        label=\"Количество:\"\r\n        onChangeText={txt => onTextChange(\"qtty\", txt)}\r\n        value={currentItem.qtty}\r\n        keyboardType=\"numeric\"\r\n        border={true}\r\n      />\r\n      <Input\r\n        label=\"Продажна цена:\"\r\n        value={currentItem.sellPrice}\r\n        keyboardType=\"numeric\"\r\n        border={true}\r\n      />\r\n      <Text\r\n        style={{\r\n          margin: 0,\r\n        }}\r\n      >\r\n        Сума за покупка:{\" \"}\r\n        {toDecimalFormat(\r\n          Number(currentItem.qtty) * Number(currentItem.basePrice)\r\n        )}\r\n      </Text>\r\n      <Button\r\n        label={\"Завършване на покупка\"}\r\n        onPress={() => {\r\n          onBuyItem({\r\n            qtty: currentItem.qtty,\r\n            basePrice: currentItem.basePrice,\r\n            itemId: currentItem.id,\r\n          });\r\n          navigator.goBack();\r\n        }}\r\n      />\r\n    </Page>\r\n  );\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: any) => {\r\n  return {\r\n    onModalTitleChanged: (modalTitle: string) => {\r\n      dispatch(actionCreators.onTitleChange(modalTitle));\r\n    },\r\n    onBuyItem: (buyItem: BuyItem) => {\r\n      dispatch(itemsActions.onBuyItem(buyItem));\r\n    },\r\n  };\r\n};\r\n\r\nexport default connect(null, mapDispatchToProps)(BuyItemScreen);\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport Table from \"../../Table\";\r\nimport { actionCreators } from \"../../../../redux/itemActions\";\r\nimport { AppState } from \"../../../../redux/store\";\r\nimport TableModel from \"./TableModel\";\r\nimport AddItemScreen from \"../../../../screens/items/AddItemScreen\";\r\nimport { Item, TableAction } from \"../../../../helpers/models\";\r\nimport BuyItemScreen from \"../../../../screens/items/BuyItemScreen\";\r\n\r\nclass ItemsTable extends TableModel {\r\n  render() {\r\n    const { listableItems, columns, showDeleted } = this.props;\r\n    const additionalActions = [\r\n      {\r\n        name: \"plus\",\r\n        color: \"green\",\r\n        onPress: (item: Item) => {\r\n          const { navigation } = this.props;\r\n          navigation.navigate(\"Modal\", {\r\n            component: <BuyItemScreen item={item} />,\r\n          });\r\n        },\r\n      } as TableAction,\r\n    ];\r\n    return (\r\n      <Table\r\n        data={listableItems}\r\n        columns={columns}\r\n        deleteProps={{\r\n          title: \"Изтриване на стока\",\r\n          content: \"Желаете ли да изтриете избраната стока\",\r\n          cancelBtnTxt: \"Отказ\",\r\n          acceptBtnTxt: \"Изтриване\",\r\n          onAction: this.onDelete,\r\n        }}\r\n        onEdit={this.onEdit}\r\n        additionalActions={additionalActions}\r\n        showDeleted={showDeleted}\r\n      />\r\n    );\r\n  }\r\n\r\n  public onDelete = (id: string) => {\r\n    const { dispatch } = this.props;\r\n\r\n    dispatch(actionCreators.onDeleteItem(id));\r\n  };\r\n\r\n  public onEdit = (id: string) => {\r\n    const { navigation } = this.props;\r\n    navigation.navigate(\"Modal\", {\r\n      component: <AddItemScreen itemId={id} />,\r\n    });\r\n  };\r\n}\r\n\r\nconst mapStateToProps = (state: AppState) => {\r\n  return { items: state.items!.items };\r\n};\r\n\r\nexport default connect(mapStateToProps)(ItemsTable);\r\n","import { useNavigation } from \"@react-navigation/native\";\r\nimport React, { useEffect } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Page } from \"../../components/Page\";\r\nimport ItemsTable from \"../../components/Table/types/classes/ItemsTable\";\r\nimport { Column, Item } from \"../../helpers/models\";\r\nimport { isMobile } from \"../../helpers/screenSizing\";\r\nimport { actionCreators } from \"../../redux/itemActions\";\r\nimport { AppState } from \"../../redux/store\";\r\n\r\ninterface Props {\r\n  onItemsLoaded: () => void;\r\n  onAllItemsLoaded: () => void;\r\n  onItemRecovery: (itemId: string) => void;\r\n  items: Item[];\r\n  showDeleted: boolean;\r\n  onShowDeletedChanged: (showDeleted: boolean) => void;\r\n}\r\n\r\nconst ItemsListScreen: React.FunctionComponent<Props> = ({\r\n  items,\r\n  onItemsLoaded,\r\n  onAllItemsLoaded,\r\n  onItemRecovery,\r\n  showDeleted,\r\n  onShowDeletedChanged,\r\n}) => {\r\n  const navigation = useNavigation();\r\n\r\n  useEffect(() => {\r\n    showDeleted ? onAllItemsLoaded() : onItemsLoaded();\r\n  }, [showDeleted]);\r\n\r\n  const columns = [\r\n    { name: \"Име на стока\", propName: \"name\", flex: 6 },\r\n    {\r\n      name: isMobile ? \"Д-на цена\" : \"Доставна цена\",\r\n      propName: \"basePrice\",\r\n      flex: isMobile ? 2 : 1,\r\n      isRight: true,\r\n      isMoney: true,\r\n    },\r\n    {\r\n      name: isMobile ? \"П-на цена\" : \"Продажна цена\",\r\n      propName: \"sellPrice\",\r\n      flex: isMobile ? 2 : 1,\r\n      isRight: true,\r\n      isMoney: true,\r\n    },\r\n    {\r\n      name: \"К-во\",\r\n      propName: \"qtty\",\r\n      flex: 1,\r\n      isRight: true,\r\n      isMoney: true,\r\n    },\r\n  ] as Column[];\r\n\r\n  return (\r\n    <Page>\r\n      <ItemsTable\r\n        columns={columns}\r\n        listableItems={items}\r\n        navigation={navigation}\r\n        showDeleted={{\r\n          showDeleted,\r\n          setShowDeleted: onShowDeletedChanged,\r\n          recoverProps: {\r\n            title: \"Възстановяване на стока\",\r\n            content: \"Желаете ли да възстановите избраната стока\",\r\n            cancelBtnTxt: \"Отказ\",\r\n            acceptBtnTxt: \"Възстановяване\",\r\n            onAction: onItemRecovery,\r\n          },\r\n        }}\r\n      />\r\n    </Page>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state: AppState) => {\r\n  return {\r\n    items: state.items!.items,\r\n    showDeleted: state.items!.showDeleted,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: any) => {\r\n  return {\r\n    onItemsLoaded: () => {\r\n      dispatch(actionCreators.onLoadItems());\r\n    },\r\n    onItemRecovery: (itemId: string) => {\r\n      dispatch(actionCreators.onItemRecovery(itemId));\r\n    },\r\n    onAllItemsLoaded: () => {\r\n      dispatch(actionCreators.onLoadAllItems());\r\n    },\r\n    onShowDeletedChanged: (showDeleted: boolean) => {\r\n      dispatch(actionCreators.setShowDeleted(showDeleted));\r\n    },\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ItemsListScreen);\r\n","/**\r\n * Learn more about deep linking with React Navigation\r\n * https://reactnavigation.org/docs/deep-linking\r\n * https://reactnavigation.org/docs/configuring-links\r\n */\r\n\r\nimport { LinkingOptions } from \"@react-navigation/native\";\r\nimport * as Linking from \"expo-linking\";\r\nimport { RootStackParamList } from \"../types\";\r\n\r\nconst linking: LinkingOptions<RootStackParamList> = {\r\n  prefixes: [Linking.createURL(\"/Warehouse/\")],\r\n  config: {\r\n    screens: {\r\n      Root: \"Warehouse/\",\r\n      ItemsListScreen: {\r\n        path: \"ItemsListScreen\",\r\n      },\r\n      PartnersListScreen: {\r\n        path: \"PartnersListScreen\",\r\n      },\r\n      Register: \"Register\",\r\n      Modal: \"modal\",\r\n    },\r\n  },\r\n};\r\n\r\nexport default linking;\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Text, View } from \"../../components/Themed\";\r\n\r\nconst Register = () => {\r\n  return (\r\n    <View>\r\n      <Text\r\n        onPress={(e) => {\r\n          e.preventDefault();\r\n        }}\r\n      >\r\n        Register\r\n      </Text>\r\n    </View>\r\n  );\r\n};\r\n\r\nexport default connect()(Register);\r\n","import { Action, Reducer } from \"redux\";\r\nimport { Partner } from \"../helpers/models\";\r\nimport {\r\n  deletee,\r\n  get,\r\n  post,\r\n  put,\r\n} from \"../services/communication/connectionService\";\r\nimport { AppThunk } from \"./store\";\r\n\r\nexport interface PartnersState {\r\n  partners: Partner[];\r\n  showDeleted: boolean;\r\n}\r\n\r\ninterface AddPartnerAction {\r\n  type: \"ADD_PARTNER\";\r\n  partner: Partner;\r\n}\r\n\r\ninterface EditPartnerAction {\r\n  type: \"EDIT_PARTNER\";\r\n  partner: Partner;\r\n}\r\n\r\ninterface LoadPartnersAction {\r\n  type: \"LOAD_PARTNERS\";\r\n  partners: Partner[];\r\n}\r\n\r\ninterface DeletePartnerAction {\r\n  type: \"DELETE_PARTNER\";\r\n  partnerId: string;\r\n}\r\n\r\ninterface SetShowDeletedAction {\r\n  type: \"SET_SHOW_DELETED\";\r\n  showDeleted: boolean;\r\n}\r\n\r\nexport type KnownAction =\r\n  | AddPartnerAction\r\n  | LoadPartnersAction\r\n  | EditPartnerAction\r\n  | DeletePartnerAction\r\n  | SetShowDeletedAction;\r\n\r\nexport const addPartner = (partner: Partner): AddPartnerAction => ({\r\n  type: \"ADD_PARTNER\",\r\n  partner,\r\n});\r\n\r\nexport const editPartner = (partner: Partner): EditPartnerAction => ({\r\n  type: \"EDIT_PARTNER\",\r\n  partner,\r\n});\r\n\r\nexport const deletePartner = (partnerId: string): DeletePartnerAction => ({\r\n  type: \"DELETE_PARTNER\",\r\n  partnerId,\r\n});\r\n\r\nexport const loadPartners = (partners: Partner[]): LoadPartnersAction => ({\r\n  type: \"LOAD_PARTNERS\",\r\n  partners,\r\n});\r\n\r\nexport const setShowDeleted = (showDeleted: boolean): SetShowDeletedAction => ({\r\n  type: \"SET_SHOW_DELETED\",\r\n  showDeleted,\r\n});\r\n\r\nexport const actionCreators = {\r\n  onAddPartner: (partnerDTO: Partner): AppThunk<void, KnownAction> => {\r\n    return (dispatch: any) => {\r\n      post<Partner>(\"api/partners/\", partnerDTO)\r\n        .then((partner) => {\r\n          dispatch(addPartner(partner));\r\n        })\r\n        .catch((er) => console.log(er));\r\n    };\r\n  },\r\n  onLoadPartners: (): AppThunk<void, KnownAction> => {\r\n    return (dispatch: any) => {\r\n      get<Partner>(\"api/partners/get-all\")\r\n        .then((partners) => {\r\n          dispatch(loadPartners(partners));\r\n        })\r\n        .catch((er) => console.log(er));\r\n    };\r\n  },\r\n  onEditPartner: (partnerDTO: Partner): AppThunk<void, KnownAction> => {\r\n    return (dispatch: any) => {\r\n      put(\"api/partners/\", partnerDTO).then(\r\n        (isUpdated) => isUpdated && dispatch(editPartner(partnerDTO))\r\n      );\r\n    };\r\n  },\r\n  onDeletePartner: (partnerId: string): AppThunk<void, KnownAction> => {\r\n    return (dispatch: any) => {\r\n      deletee(\"api/partners/\", partnerId).then(\r\n        (isDeleted) => isDeleted && dispatch(deletePartner(partnerId))\r\n      );\r\n    };\r\n  },\r\n  onPartnerRecovery: (partnerId: string): AppThunk<void, KnownAction> => {\r\n    return (dispatch: any) => {\r\n      post<Partner>(\"api/partners/partner-recovery\", partnerId).then(\r\n        (sale: Partner) => {\r\n          dispatch(editPartner(sale));\r\n        }\r\n      );\r\n    };\r\n  },\r\n  setShowDeleted: (showDeleted: boolean): AppThunk<void, KnownAction> => {\r\n    return (dispatch: any) => {\r\n      dispatch(setShowDeleted(showDeleted));\r\n    };\r\n  },\r\n};\r\n\r\nconst initialState = {\r\n  partners: [],\r\n  showDeleted: false,\r\n};\r\n\r\nexport const reducer: Reducer<PartnersState> = (\r\n  state = initialState,\r\n  incomingAction: Action\r\n): PartnersState => {\r\n  const action = incomingAction as KnownAction;\r\n  switch (action.type) {\r\n    case \"ADD_PARTNER\":\r\n      return { ...state, partners: [...state.partners, action.partner] };\r\n    case \"LOAD_PARTNERS\":\r\n      return { ...state, partners: action.partners };\r\n    case \"EDIT_PARTNER\":\r\n      return {\r\n        ...state,\r\n        partners: [\r\n          ...state.partners.map((partner) => {\r\n            if (partner.id === action.partner.id) return { ...action.partner };\r\n            return partner;\r\n          }),\r\n        ],\r\n      };\r\n    case \"DELETE_PARTNER\":\r\n      return {\r\n        ...state,\r\n        partners: [\r\n          ...state.partners.map((partner) => {\r\n            if (partner.id === action.partnerId)\r\n              return { ...partner, isDeleted: true };\r\n            return partner;\r\n          }),\r\n        ],\r\n      };\r\n    case \"SET_SHOW_DELETED\":\r\n      return {\r\n        ...state,\r\n        showDeleted: action.showDeleted,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import { connect } from \"react-redux\";\r\nimport { Partner } from \"../helpers/models\";\r\nimport { actionCreators } from \"../redux/partnerActions\";\r\nimport { actionCreators as modalActionCreators } from \"../redux/modalActions\";\r\nimport React, { useState } from \"react\";\r\nimport { useNavigation } from \"@react-navigation/native\";\r\nimport { Button, Input } from \"../components/Themed\";\r\nimport { Page } from \"../components/Page\";\r\nimport { AppState } from \"../redux/store\";\r\n\r\ntype AddPartnerScreenProps = {\r\n  partners: Partner[];\r\n  onPartnerAdded: (partner: Partner) => void;\r\n  onPartnerEdited: (partner: Partner) => void;\r\n  onModalTitleChanged: (title: string) => void;\r\n  partnerId?: string;\r\n};\r\n\r\nconst emptyPartner = {\r\n  id: \"\",\r\n  address: \"\",\r\n  name: \"\",\r\n  vatNumber: \"\",\r\n} as Partner;\r\n\r\nconst AddPartnerScreen = ({\r\n  onPartnerAdded,\r\n  partners,\r\n  onModalTitleChanged,\r\n  onPartnerEdited,\r\n  partnerId,\r\n}: AddPartnerScreenProps) => {\r\n  const currentPartner = partners && partners.find((p) => p.id === partnerId);\r\n  const [partner, setPartner] = useState(currentPartner ?? emptyPartner);\r\n  const navigator = useNavigation();\r\n  if (currentPartner) {\r\n    onModalTitleChanged(\"Редакция на партньор\");\r\n  } else {\r\n    onModalTitleChanged(\"Добавяне на партньор\");\r\n  }\r\n\r\n  const onTextChange = (name: string, value: string) => {\r\n    setPartner({\r\n      ...partner,\r\n      [name]: value,\r\n    });\r\n  };\r\n\r\n  return (\r\n    <Page>\r\n      <Input\r\n        label=\"Име на партньора:\"\r\n        onChangeText={(txt) => onTextChange(\"name\", txt)}\r\n        value={partner.name}\r\n        border={true}\r\n      />\r\n      <Input\r\n        label=\"ДДС Номер:\"\r\n        onChangeText={(txt) => onTextChange(\"vatNumber\", txt)}\r\n        value={partner.vatNumber}\r\n        border={true}\r\n      />\r\n      <Input\r\n        label=\"Адрес:\"\r\n        onChangeText={(txt) => onTextChange(\"address\", txt)}\r\n        value={partner.address}\r\n        border={true}\r\n      />\r\n      <Button\r\n        label={currentPartner ? \"Редакция\" : \"Добавяне\"}\r\n        onPress={() => {\r\n          currentPartner ? onPartnerEdited(partner) : onPartnerAdded(partner);\r\n          setPartner(emptyPartner);\r\n          navigator.navigate(\"PartnersListScreen\");\r\n        }}\r\n      />\r\n    </Page>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state: AppState) => state.partners;\r\n\r\nconst mapDispatchToProps = (dispatch: any) => {\r\n  return {\r\n    onPartnerAdded: (partner: Partner) => {\r\n      dispatch(actionCreators.onAddPartner(partner));\r\n    },\r\n    onPartnerEdited: (partner: Partner) => {\r\n      dispatch(actionCreators.onEditPartner(partner));\r\n    },\r\n    onModalTitleChanged: (modalTitle: string) => {\r\n      dispatch(modalActionCreators.onTitleChange(modalTitle));\r\n    },\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(AddPartnerScreen);\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport Table from \"../../Table\";\r\nimport { actionCreators } from \"../../../../redux/partnerActions\";\r\nimport { AppState } from \"../../../../redux/store\";\r\nimport TableModel from \"./TableModel\";\r\nimport AddPartnerScreen from \"../../../../screens/AddPartnerScreen\";\r\n\r\nclass PartnersTable extends TableModel {\r\n  render() {\r\n    const { listableItems, columns, showDeleted } = this.props;\r\n    return (\r\n      <Table\r\n        data={listableItems}\r\n        columns={columns}\r\n        deleteProps={{\r\n          title: \"Изтриване на партньор\",\r\n          content: \"Желаете ли да изтриете избраният партньор\",\r\n          cancelBtnTxt: \"Отказ\",\r\n          acceptBtnTxt: \"Изтриване\",\r\n          onAction: this.onDelete,\r\n        }}\r\n        onEdit={this.onEdit}\r\n        showDeleted={showDeleted}\r\n      />\r\n    );\r\n  }\r\n\r\n  public onDelete = (id: string) => {\r\n    const { dispatch } = this.props;\r\n\r\n    dispatch(actionCreators.onDeletePartner(id));\r\n  };\r\n\r\n  public onEdit = (id: string) => {\r\n    const { navigation } = this.props;\r\n    navigation.navigate(\"Modal\", {\r\n      component: <AddPartnerScreen partnerId={id} />,\r\n    });\r\n  };\r\n}\r\n\r\nconst mapStateToProps = (state: AppState) => {\r\n  return { partners: state.partners!.partners };\r\n};\r\n\r\nexport default connect(mapStateToProps)(PartnersTable);\r\n","import { useNavigation } from \"@react-navigation/native\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Page } from \"../components/Page\";\r\nimport { Partner } from \"../helpers/models\";\r\nimport { actionCreators } from \"../redux/partnerActions\";\r\nimport { AppState } from \"../redux/store\";\r\nimport PartnersTable from \"../components/Table/types/classes/PartnersTable\";\r\n\r\ninterface PartnersListScreenProps {\r\n  onPartnersLoaded: () => void;\r\n  onPartnerRecovery: (partnerId: string) => void;\r\n  partners: Partner[];\r\n  showDeleted: boolean;\r\n  setShowDeleted: (showDeleted: boolean) => void;\r\n}\r\n\r\nconst PartnersListScreen = ({\r\n  onPartnersLoaded,\r\n  partners,\r\n  onPartnerRecovery,\r\n  setShowDeleted,\r\n  showDeleted,\r\n}: PartnersListScreenProps) => {\r\n  useEffect(() => onPartnersLoaded(), [showDeleted]);\r\n\r\n  const columns = [\r\n    { name: \"Име на партньора\", propName: \"name\", flex: 4 },\r\n    {\r\n      name: \"ДДС Номер\",\r\n      propName: \"vatNumber\",\r\n      flex: 1,\r\n      isRight: true,\r\n    },\r\n    {\r\n      name: \"Адрес\",\r\n      propName: \"address\",\r\n      flex: 2,\r\n      isRight: true,\r\n    },\r\n  ];\r\n\r\n  return (\r\n    <Page>\r\n      <PartnersTable\r\n        columns={columns}\r\n        listableItems={partners}\r\n        navigation={useNavigation()}\r\n        showDeleted={{\r\n          setShowDeleted,\r\n          showDeleted,\r\n          recoverProps: {\r\n            title: \"Възстановяване на партньор\",\r\n            content: \"Желаете ли да възстановите избрания партньор\",\r\n            cancelBtnTxt: \"Отказ\",\r\n            acceptBtnTxt: \"Възстановяване\",\r\n            onAction: onPartnerRecovery,\r\n          },\r\n        }}\r\n      />\r\n    </Page>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state: AppState) => {\r\n  return {\r\n    partners: state.partners!.partners,\r\n    showDeleted: state.partners!.showDeleted,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: any) => {\r\n  return {\r\n    onPartnersLoaded: () => {\r\n      dispatch(actionCreators.onLoadPartners());\r\n    },\r\n    onPartnerRecovery: (partnerId: string) => {\r\n      dispatch(actionCreators.onPartnerRecovery(partnerId));\r\n    },\r\n    setShowDeleted: (showDeleted: boolean) => {\r\n      dispatch(actionCreators.setShowDeleted(showDeleted));\r\n    },\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(PartnersListScreen);\r\n","import { Action, Reducer } from \"redux\";\r\nimport { Sale } from \"../helpers/models\";\r\nimport {\r\n  deletee,\r\n  get,\r\n  post,\r\n  put,\r\n} from \"../services/communication/connectionService\";\r\nimport { AppThunk } from \"./store\";\r\n\r\nexport interface SalesState {\r\n  sales: Sale[];\r\n  showDeleted: boolean;\r\n}\r\n\r\ninterface AddSaleAction {\r\n  type: \"ADD_SALE\";\r\n  sale: Sale;\r\n}\r\n\r\ninterface EditSaleAction {\r\n  type: \"EDIT_SALE\";\r\n  sale: Sale;\r\n}\r\n\r\ninterface LoadSalesAction {\r\n  type: \"LOAD_SALES\";\r\n  sales: Sale[];\r\n}\r\n\r\ninterface LoadAllSalesAction {\r\n  type: \"LOAD_ALL_SALES\";\r\n  sales: Sale[];\r\n}\r\n\r\ninterface DeleteSaleAction {\r\n  type: \"DELETE_SALE\";\r\n  saleId: string;\r\n}\r\n\r\ninterface SetShowDeletedAction {\r\n  type: \"SET_SHOW_DELETED\";\r\n  showDeleted: boolean;\r\n}\r\n\r\nexport type KnownAction =\r\n  | AddSaleAction\r\n  | LoadSalesAction\r\n  | EditSaleAction\r\n  | DeleteSaleAction\r\n  | LoadAllSalesAction\r\n  | SetShowDeletedAction;\r\n\r\nexport const addSale = (sale: Sale): AddSaleAction => ({\r\n  type: \"ADD_SALE\",\r\n  sale,\r\n});\r\n\r\nexport const editSale = (sale: Sale): EditSaleAction => ({\r\n  type: \"EDIT_SALE\",\r\n  sale,\r\n});\r\n\r\nexport const deleteSale = (saleId: string): DeleteSaleAction => ({\r\n  type: \"DELETE_SALE\",\r\n  saleId,\r\n});\r\n\r\nexport const loadSales = (sales: Sale[]): LoadSalesAction => ({\r\n  type: \"LOAD_SALES\",\r\n  sales,\r\n});\r\n\r\nexport const loadAllSales = (sales: Sale[]): LoadAllSalesAction => ({\r\n  type: \"LOAD_ALL_SALES\",\r\n  sales,\r\n});\r\n\r\nexport const setShowDeleted = (showDeleted: boolean): SetShowDeletedAction => ({\r\n  type: \"SET_SHOW_DELETED\",\r\n  showDeleted,\r\n});\r\n\r\nexport const actionCreators = {\r\n  onAddSale: (saleDTO: Sale): AppThunk<void, KnownAction> => {\r\n    return (dispatch: any) => {\r\n      post<Sale>(\"api/sales/\", saleDTO)\r\n        .then((sale) => {\r\n          dispatch(addSale(sale));\r\n        })\r\n        .catch((ex) => {\r\n          console.log(ex);\r\n        });\r\n    };\r\n  },\r\n  onLoadSales: (): AppThunk<void, KnownAction> => {\r\n    return (dispatch: any) => {\r\n      get<Sale>(\"api/sales/\")\r\n        .then((sales) => {\r\n          dispatch(loadSales(sales));\r\n        })\r\n        .catch((error) => {\r\n          console.log(error);\r\n        });\r\n    };\r\n  },\r\n  onLoadAllSales: (): AppThunk<void, KnownAction> => {\r\n    return (dispatch: any) => {\r\n      get<Sale>(\"api/sales/get-all\")\r\n        .then((sales) => {\r\n          dispatch(loadSales(sales));\r\n        })\r\n        .catch((error) => {\r\n          console.log(error);\r\n        });\r\n    };\r\n  },\r\n  onEditSale: (saleDTO: Sale): AppThunk<void, KnownAction> => {\r\n    return (dispatch: any) => {\r\n      put<Sale>(\"api/sales/\", saleDTO)\r\n        .then((isUpdated) => {\r\n          isUpdated && dispatch(editSale(saleDTO));\r\n        })\r\n        .catch((ex) => {\r\n          console.log(ex);\r\n        });\r\n    };\r\n  },\r\n  onDeleteSale: (saleId: string): AppThunk<void, KnownAction> => {\r\n    return (dispatch: any) => {\r\n      deletee(\"api/sales/\", saleId).then((isDeleted) => {\r\n        isDeleted && dispatch(deleteSale(saleId));\r\n      });\r\n    };\r\n  },\r\n  onSaleRecovery: (saleId: string): AppThunk<void, KnownAction> => {\r\n    return (dispatch: any) => {\r\n      post<Sale>(\"api/sales/sale-recovery\", saleId).then((sale: Sale) => {\r\n        dispatch(editSale(sale));\r\n      });\r\n    };\r\n  },\r\n  setShowDeleted: (showDeleted: boolean): AppThunk<void, KnownAction> => {\r\n    return (dispatch: any) => {\r\n      dispatch(setShowDeleted(showDeleted));\r\n    };\r\n  },\r\n};\r\n\r\nconst initialState = {\r\n  sales: [],\r\n  showDeleted: false,\r\n};\r\n\r\nexport const reducer: Reducer<SalesState> = (\r\n  state = initialState,\r\n  incomingAction: Action\r\n): SalesState => {\r\n  const action = incomingAction as KnownAction;\r\n  switch (action.type) {\r\n    case \"ADD_SALE\":\r\n      return { ...state, sales: [...state.sales, action.sale] };\r\n    case \"LOAD_SALES\":\r\n      return { ...state, sales: action.sales };\r\n    case \"LOAD_ALL_SALES\":\r\n      return { ...state, sales: action.sales };\r\n    case \"EDIT_SALE\":\r\n      return {\r\n        ...state,\r\n        sales: [\r\n          ...state.sales.map((sale) => {\r\n            if (sale.id === action.sale.id) return { ...action.sale };\r\n            return sale;\r\n          }),\r\n        ],\r\n      };\r\n    case \"DELETE_SALE\":\r\n      return {\r\n        ...state,\r\n        sales: state.showDeleted\r\n          ? [\r\n              ...state.sales.map((sale) => {\r\n                if (sale.id === action.saleId)\r\n                  return { ...sale, isDeleted: true };\r\n                return sale;\r\n              }),\r\n            ]\r\n          : [...state.sales.filter((sale) => sale.id !== action.saleId)],\r\n      };\r\n    case \"SET_SHOW_DELETED\":\r\n      return {\r\n        ...state,\r\n        showDeleted: action.showDeleted,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","export const randomString = () => (Math.random() + 1).toString(36).substring(7);\r\n","import React, { useState } from \"react\";\r\nimport { textToDecimalFormat, toDecimalFormat } from \"../helpers/extensions\";\r\nimport { Item, Sale, SaleItem } from \"../helpers/models\";\r\nimport { randomString } from \"../helpers/randomFunctions\";\r\nimport { getHeight, normalize } from \"../helpers/screenSizing\";\r\nimport Dropdown from \"./dropdowns/Dropdown\";\r\nimport { Input, Text, View } from \"./Themed\";\r\n\r\ntype Props = {\r\n  items: Item[];\r\n  saleItems: SaleItem[];\r\n  setSelectedItems: (selectedItem: SaleItem[]) => void;\r\n  sale: Sale;\r\n};\r\n\r\nconst EditableTable = ({ items, saleItems, setSelectedItems, sale }: Props) => {\r\n  const [selectedItem, setSelectedItem] = useState({\r\n    id: \"\",\r\n    title: \"\",\r\n  });\r\n  const [itemsForDropdown] = useState(\r\n    items.map((item) => ({\r\n      id: item.id,\r\n      title: item.name,\r\n    }))\r\n  );\r\n\r\n  return (\r\n    <View\r\n      style={{\r\n        width: normalize(300),\r\n        height: getHeight() - 220,\r\n      }}\r\n    >\r\n      <View\r\n        style={{\r\n          display: \"flex\",\r\n          flexDirection: \"row\",\r\n          borderBottomWidth: 2,\r\n          borderBottomColor: \"grey\",\r\n          backgroundColor: \"none\",\r\n        }}\r\n      >\r\n        <View\r\n          style={{\r\n            flexDirection: \"row\",\r\n            flex: 5,\r\n            justifyContent: \"flex-start\",\r\n          }}\r\n        >\r\n          <Text>Име на стоката:</Text>\r\n        </View>\r\n        <View\r\n          style={{ flexDirection: \"row\", flex: 1, justifyContent: \"center\" }}\r\n        >\r\n          <Text>Количество:</Text>\r\n        </View>\r\n        <View\r\n          style={{ flexDirection: \"row\", flex: 1, justifyContent: \"flex-end\" }}\r\n        >\r\n          <Text>Цена:</Text>\r\n        </View>\r\n        <View\r\n          style={{ flexDirection: \"row\", flex: 1, justifyContent: \"flex-end\" }}\r\n        >\r\n          <Text>Общо сума:</Text>\r\n        </View>\r\n      </View>\r\n      {saleItems && (\r\n        <>\r\n          <View\r\n            style={{\r\n              height: getHeight() - 260,\r\n              overflow: \"scroll\",\r\n            }}\r\n          >\r\n            {saleItems.map((selectedItem) => {\r\n              const isQttyEnough =\r\n                Number(selectedItem.qtty) <=\r\n                Number(\r\n                  items.find((item) => item.id === selectedItem.itemId)?.qtty\r\n                );\r\n\r\n              return (\r\n                <View\r\n                  key={selectedItem.itemId}\r\n                  style={{\r\n                    display: \"flex\",\r\n                    flexDirection: \"row\",\r\n                    borderBottomWidth: 1,\r\n                    borderBottomColor: \"grey\",\r\n                  }}\r\n                >\r\n                  <View\r\n                    style={{\r\n                      flexDirection: \"row\",\r\n                      flex: 5,\r\n                      alignSelf: \"stretch\",\r\n                    }}\r\n                  >\r\n                    <Dropdown\r\n                      key={selectedItem.itemId}\r\n                      selectedItem={{\r\n                        id: selectedItem.itemId,\r\n                        title: selectedItem.name,\r\n                      }}\r\n                      placeholder=\"Въведете име на стока\"\r\n                      items={itemsForDropdown}\r\n                      handleItemChosen={(itemId) => {\r\n                        setTimeout(() => {\r\n                          const currentItem = items.find(\r\n                            (item) => item.id === itemId\r\n                          )!;\r\n                          setSelectedItems(\r\n                            saleItems.map((item) => {\r\n                              if (selectedItem.uniqueId === item.uniqueId)\r\n                                return {\r\n                                  id: \"\",\r\n                                  uniqueId: randomString(),\r\n                                  itemId: currentItem.id,\r\n                                  name: currentItem.name,\r\n                                  qtty: \"1\",\r\n                                  price: currentItem.sellPrice,\r\n                                  total: toDecimalFormat(\r\n                                    Number(currentItem.sellPrice)\r\n                                  ),\r\n                                };\r\n\r\n                              return item;\r\n                            })\r\n                          );\r\n                        }, 300);\r\n                      }}\r\n                    />\r\n                  </View>\r\n                  <Input\r\n                    autoFocus={true}\r\n                    keyboardType=\"numeric\"\r\n                    style={{\r\n                      textAlign: \"center\",\r\n                      borderWidth: isQttyEnough ? 0 : 1,\r\n                      flexDirection: \"row\",\r\n                      flex: 1,\r\n                      alignSelf: \"stretch\",\r\n                      borderColor: isQttyEnough ? \"white\" : \"red\",\r\n                    }}\r\n                    value={selectedItem.qtty.toString()}\r\n                    onChangeText={(text) =>\r\n                      setSelectedItems(\r\n                        saleItems.map((item) => {\r\n                          if (selectedItem.uniqueId === item.uniqueId) {\r\n                            return {\r\n                              ...item,\r\n                              qtty: text,\r\n                              total: toDecimalFormat(\r\n                                Number(text) * Number(item.price)\r\n                              ),\r\n                            };\r\n                          }\r\n                          return item;\r\n                        })\r\n                      )\r\n                    }\r\n                  />\r\n                  <Input\r\n                    style={{\r\n                      textAlign: \"center\",\r\n                      borderWidth: 0,\r\n                      flexDirection: \"row\",\r\n                      flex: 1,\r\n                      alignSelf: \"stretch\",\r\n                    }}\r\n                    keyboardType=\"numeric\"\r\n                    value={selectedItem.price.toString()}\r\n                    onChangeText={(text) =>\r\n                      setSelectedItems(\r\n                        saleItems.map((item) => {\r\n                          if (selectedItem.uniqueId === item.uniqueId) {\r\n                            return {\r\n                              ...item,\r\n                              price: text,\r\n                              total: toDecimalFormat(\r\n                                Number(item.qtty) * Number(text)\r\n                              ),\r\n                            };\r\n                          }\r\n                          return item;\r\n                        })\r\n                      )\r\n                    }\r\n                  />\r\n                  <Text\r\n                    style={{\r\n                      flexDirection: \"row\",\r\n                      flex: 1,\r\n                      textAlign: \"center\",\r\n                    }}\r\n                  >\r\n                    {textToDecimalFormat(selectedItem.total)}\r\n                  </Text>\r\n                </View>\r\n              );\r\n            })}\r\n\r\n            <View\r\n              style={{\r\n                display: \"flex\",\r\n                flexDirection: \"row\",\r\n                borderBottomWidth: 1,\r\n                borderBottomColor: \"grey\",\r\n              }}\r\n            >\r\n              <View style={{ flexDirection: \"row\", flex: 5 }}>\r\n                <Dropdown\r\n                  placeholder=\"Въведете име на стока\"\r\n                  selectedItem={selectedItem}\r\n                  items={itemsForDropdown}\r\n                  handleItemChosen={(itemId) => {\r\n                    const currentItem = items.find(\r\n                      (item) => item.id === itemId\r\n                    )!;\r\n                    setSelectedItems([\r\n                      ...saleItems,\r\n                      {\r\n                        id: \"\",\r\n                        uniqueId: randomString(),\r\n                        itemId: currentItem.id,\r\n                        name: currentItem.name,\r\n                        qtty: \"1\",\r\n                        price: currentItem.sellPrice,\r\n                        total: toDecimalFormat(Number(currentItem.sellPrice)),\r\n                      },\r\n                    ]);\r\n\r\n                    setSelectedItem({ id: \"\", title: \"\" });\r\n                  }}\r\n                />\r\n              </View>\r\n              <View\r\n                style={{\r\n                  flexDirection: \"row\",\r\n                  flex: 1,\r\n                  justifyContent: \"center\",\r\n                }}\r\n              >\r\n                <Text></Text>\r\n              </View>\r\n              <View\r\n                style={{\r\n                  flexDirection: \"row\",\r\n                  flex: 1,\r\n                  justifyContent: \"flex-end\",\r\n                }}\r\n              >\r\n                <Text></Text>\r\n              </View>\r\n              <View\r\n                style={{\r\n                  flexDirection: \"row\",\r\n                  flex: 1,\r\n                  justifyContent: \"flex-end\",\r\n                }}\r\n              >\r\n                <Text></Text>\r\n              </View>\r\n            </View>\r\n          </View>\r\n          <View\r\n            style={{\r\n              display: \"flex\",\r\n              flexDirection: \"row\",\r\n              borderBottomWidth: 2,\r\n              borderBottomColor: \"grey\",\r\n              backgroundColor: \"none\",\r\n              height: 30,\r\n            }}\r\n          >\r\n            <View style={{ flexDirection: \"row\", flex: 6 }}>\r\n              <Text></Text>\r\n            </View>\r\n            <View\r\n              style={{\r\n                flexDirection: \"row\",\r\n                flex: 1,\r\n                justifyContent: \"flex-start\",\r\n              }}\r\n            >\r\n              <Text>Общо сума:</Text>\r\n            </View>\r\n            <View\r\n              style={{\r\n                flexDirection: \"row\",\r\n                flex: 1,\r\n                justifyContent: \"flex-end\",\r\n              }}\r\n            >\r\n              <Text>\r\n                {toDecimalFormat(\r\n                  saleItems.length > 0\r\n                    ? saleItems\r\n                        ?.map((item) => Number(item.total))\r\n                        ?.reduce((a, b) => a + b)\r\n                    : 0.0\r\n                )}\r\n              </Text>\r\n            </View>\r\n          </View>\r\n        </>\r\n      )}\r\n    </View>\r\n  );\r\n};\r\n\r\nexport default EditableTable;\r\n","import { useNavigation } from \"@react-navigation/native\";\r\nimport React, { FunctionComponent, useState } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Page } from \"../../components/Page\";\r\nimport { Button, View } from \"../../components/Themed\";\r\nimport { Item, Partner, Sale, SaleItem } from \"../../helpers/models\";\r\nimport { actionCreators as salesActions } from \"../../redux/salesActions\";\r\nimport { actionCreators as modalActions } from \"../../redux/modalActions\";\r\nimport { AppState } from \"../../redux/store\";\r\nimport Dropdown from \"../../components/dropdowns/Dropdown\";\r\nimport EditableTable from \"../../components/EditableTable\";\r\nimport { getHeight } from \"../../helpers/screenSizing\";\r\nimport { randomString } from \"../../helpers/randomFunctions\";\r\n\r\ninterface Props {\r\n  saleId?: string;\r\n  sales: Sale[];\r\n  items: Item[];\r\n  partners: Partner[];\r\n  onSaleAdded: (sale: Sale) => void;\r\n  onSaleEdited: (sale: Sale) => void;\r\n  onModalTitleChanged: (title: string) => void;\r\n}\r\n\r\nconst emptySale = {\r\n  id: \"\",\r\n  date: new Date(),\r\n  isDeleted: false,\r\n  description: \"\",\r\n  saleItems: [],\r\n  partnerId: \"\",\r\n  totalAmount: 0,\r\n} as Sale;\r\n\r\nconst AddSaleScreen: FunctionComponent<Props> = ({\r\n  saleId,\r\n  sales,\r\n  onSaleAdded,\r\n  onModalTitleChanged,\r\n  onSaleEdited,\r\n  partners,\r\n  items,\r\n}) => {\r\n  const currentSale = sales.find((i) => i.id === saleId);\r\n  const [sale, setSale] = useState(currentSale ?? emptySale);\r\n  const [selectableItems] = useState(\r\n    partners.map((partner) => ({\r\n      id: partner.id,\r\n      title: partner.name,\r\n    }))\r\n  );\r\n  const navigator = useNavigation();\r\n  if (currentSale) {\r\n    onModalTitleChanged(\"Редакция на стока\");\r\n  } else {\r\n    onModalTitleChanged(\"Добавяне на стока\");\r\n  }\r\n\r\n  const handlePartnerSelect = (partnerId: string) => {\r\n    setSale({ ...sale, partnerId });\r\n  };\r\n\r\n  const [selectedItems, setSelectedItems] = useState<SaleItem[]>(\r\n    currentSale\r\n      ? currentSale.saleItems.map((item) => ({\r\n          uniqueId: randomString(),\r\n          itemId: item.itemId,\r\n          name: item.name,\r\n          qtty: item.qtty,\r\n          total: item.total,\r\n          price: item.price,\r\n          id: item.id,\r\n        }))\r\n      : []\r\n  );\r\n\r\n  return (\r\n    <Page>\r\n      <View\r\n        style={{\r\n          height: getHeight(),\r\n        }}\r\n      >\r\n        <Dropdown\r\n          placeholder=\"Въведете име на партньора\"\r\n          selectedItem={\r\n            currentSale\r\n              ? {\r\n                  id: currentSale.partnerId,\r\n                  title:\r\n                    partners.find(\r\n                      (partner) => partner.id === currentSale.partnerId\r\n                    )?.name ?? \"\",\r\n                }\r\n              : undefined\r\n          }\r\n          items={selectableItems}\r\n          handleItemChosen={handlePartnerSelect}\r\n          label=\"Име на партньора\"\r\n          border={true}\r\n          style={{ marginBottom: 15 }}\r\n        />\r\n        <EditableTable\r\n          items={items}\r\n          saleItems={selectedItems}\r\n          setSelectedItems={setSelectedItems}\r\n          sale={sale}\r\n        />\r\n        <Button\r\n          disabled={\r\n            selectedItems === undefined ||\r\n            selectedItems.length === 0 ||\r\n            sale.partnerId === \"\"\r\n          }\r\n          label={currentSale ? \"Редакция на стока\" : \"Добавяне на стока\"}\r\n          onPress={() => {\r\n            sale.totalAmount = selectedItems\r\n              .map((item) => Number(item.total))\r\n              .reduce((a, b) => a + b);\r\n            sale.saleItems = selectedItems;\r\n            currentSale ? onSaleEdited(sale) : onSaleAdded(sale);\r\n            setSale(emptySale);\r\n            navigator.navigate(\"Root\");\r\n          }}\r\n          style={{\r\n            alignSelf: \"center\",\r\n          }}\r\n        />\r\n      </View>\r\n    </Page>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state: AppState) => {\r\n  return {\r\n    sales: state.sales!.sales,\r\n    partners: state.partners!.partners,\r\n    items: state.items!.items,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: any) => {\r\n  return {\r\n    onSaleAdded: (sale: Sale) => {\r\n      dispatch(salesActions.onAddSale(sale));\r\n    },\r\n    onSaleEdited: (sale: Sale) => {\r\n      dispatch(salesActions.onEditSale(sale));\r\n    },\r\n    onModalTitleChanged: (modalTitle: string) => {\r\n      dispatch(modalActions.onTitleChange(modalTitle));\r\n    },\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(AddSaleScreen);\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport Table from \"../../Table\";\r\nimport { AppState } from \"../../../../redux/store\";\r\nimport TableModel from \"./TableModel\";\r\nimport { actionCreators } from \"../../../../redux/salesActions\";\r\nimport AddSaleScreen from \"../../../../screens/sales/AddSaleScreen\";\r\n\r\nclass SalesTable extends TableModel {\r\n  render() {\r\n    const { listableItems, columns, showDeleted } = this.props;\r\n    return (\r\n      <Table\r\n        data={listableItems}\r\n        columns={columns}\r\n        deleteProps={{\r\n          title: \"Изтриване на продажба\",\r\n          content: \"Желаете ли да изтриете избраната продажба\",\r\n          cancelBtnTxt: \"Отказ\",\r\n          acceptBtnTxt: \"Изтриване\",\r\n          onAction: this.onDelete,\r\n        }}\r\n        onEdit={this.onEdit}\r\n        showDeleted={showDeleted}\r\n      />\r\n    );\r\n  }\r\n\r\n  public onDelete = (id: string) => {\r\n    const { dispatch } = this.props;\r\n\r\n    dispatch(actionCreators.onDeleteSale(id));\r\n  };\r\n\r\n  public onEdit = (id: string) => {\r\n    const { navigation } = this.props;\r\n    navigation.navigate(\"Modal\", {\r\n      component: <AddSaleScreen saleId={id} />,\r\n    });\r\n  };\r\n}\r\n\r\nconst mapStateToProps = (state: AppState) => {\r\n  return { sales: state.sales!.sales };\r\n};\r\n\r\nexport default connect(mapStateToProps)(SalesTable);\r\n","import { useNavigation } from \"@react-navigation/native\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Page } from \"../../components/Page\";\r\nimport SalesTable from \"../../components/Table/types/classes/SalesTable\";\r\nimport { IListable, Partner, Sale } from \"../../helpers/models\";\r\nimport { isMobile } from \"../../helpers/screenSizing\";\r\nimport { actionCreators as salesActions } from \"../../redux/salesActions\";\r\nimport { actionCreators as partnersActions } from \"../../redux/partnerActions\";\r\nimport { actionCreators as itemActions } from \"../../redux/itemActions\";\r\nimport { AppState } from \"../../redux/store\";\r\nimport { getDateFormated, toDecimalFormat } from \"../../helpers/extensions\";\r\n\r\ninterface Props {\r\n  onSalesLoaded: () => void;\r\n  onSaleRecovery: (itemId: string) => void;\r\n  onAllSalesLoaded: () => void;\r\n  onPartnersLoaded: () => void;\r\n  onItemsLoaded: () => void;\r\n  sales: Sale[];\r\n  partners: Partner[];\r\n  setShowDeleted: (showDeleted: boolean) => void;\r\n  showDeleted: boolean;\r\n}\r\n\r\ninterface SaleListable extends IListable {\r\n  partner: string;\r\n  date: string;\r\n  description: string;\r\n  total: string;\r\n}\r\n\r\nconst mapStateToProps = (state: AppState) => {\r\n  return {\r\n    sales: state.sales?.sales || [],\r\n    partners: state.partners?.partners || [],\r\n    showDeleted: state.sales!.showDeleted,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: any) => {\r\n  return {\r\n    onSalesLoaded: () => {\r\n      dispatch(salesActions.onLoadSales());\r\n    },\r\n    onSaleRecovery: (saleId: string) => {\r\n      dispatch(salesActions.onSaleRecovery(saleId));\r\n    },\r\n    onAllSalesLoaded: () => {\r\n      dispatch(salesActions.onLoadAllSales());\r\n    },\r\n    onPartnersLoaded: () => {\r\n      dispatch(partnersActions.onLoadPartners());\r\n    },\r\n    onItemsLoaded: () => {\r\n      dispatch(itemActions.onLoadAllItems());\r\n    },\r\n    setShowDeleted: (showDeleted: boolean) => {\r\n      dispatch(salesActions.setShowDeleted(showDeleted));\r\n    },\r\n  };\r\n};\r\n\r\nconst SalesListScreen: React.FunctionComponent<Props> = ({\r\n  sales,\r\n  partners,\r\n  onSalesLoaded,\r\n  onSaleRecovery,\r\n  onItemsLoaded,\r\n  onPartnersLoaded,\r\n  onAllSalesLoaded,\r\n  showDeleted,\r\n  setShowDeleted,\r\n}) => {\r\n  const navigation = useNavigation();\r\n\r\n  useEffect(() => {\r\n    showDeleted ? onAllSalesLoaded() : onSalesLoaded();\r\n    onItemsLoaded();\r\n    onPartnersLoaded();\r\n  }, [showDeleted]);\r\n\r\n  const columns = [\r\n    { name: \"Име на стока\", propName: \"partner\", flex: 6 },\r\n    {\r\n      name: \"Дата\",\r\n      propName: \"date\",\r\n      flex: isMobile ? 2 : 1,\r\n      isRight: true,\r\n    },\r\n    {\r\n      name: \"Обща сума\",\r\n      propName: \"total\",\r\n      flex: isMobile ? 2 : 1,\r\n      isRight: true,\r\n    },\r\n  ];\r\n\r\n  return (\r\n    <Page>\r\n      <SalesTable\r\n        columns={columns}\r\n        listableItems={sales.map(\r\n          (sale) =>\r\n            ({\r\n              id: sale.id,\r\n              partner:\r\n                partners.find((partner) => partner.id === sale.partnerId)\r\n                  ?.name ?? \"\",\r\n              date: getDateFormated(sale.date),\r\n              description: sale.description,\r\n              total: toDecimalFormat(sale.totalAmount),\r\n              isDeleted: sale.isDeleted,\r\n            } as SaleListable)\r\n        )}\r\n        navigation={navigation}\r\n        showDeleted={{\r\n          setShowDeleted,\r\n          showDeleted,\r\n          recoverProps: {\r\n            title: \"Възстановяване на продажба\",\r\n            content: \"Желаете ли да възстановите избраната продажба\",\r\n            cancelBtnTxt: \"Отказ\",\r\n            acceptBtnTxt: \"Възстановяване\",\r\n            onAction: onSaleRecovery,\r\n          },\r\n        }}\r\n      />\r\n    </Page>\r\n  );\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(SalesListScreen);\r\n","import { FontAwesome } from \"@expo/vector-icons\";\r\nimport {\r\n  NavigationContainer,\r\n  DefaultTheme,\r\n  DarkTheme,\r\n} from \"@react-navigation/native\";\r\nimport { createNativeStackNavigator } from \"@react-navigation/native-stack\";\r\nimport * as React from \"react\";\r\nimport { ColorSchemeName, Pressable } from \"react-native\";\r\nimport ModalScreen from \"../screens/ModalScreen\";\r\nimport NotFoundScreen from \"../screens/NotFoundScreen\";\r\nimport ItemsListScreen from \"../screens/items/ItemsListScreen\";\r\nimport { RootStackParamList } from \"../types\";\r\nimport LinkingConfiguration from \"./LinkingConfiguration\";\r\nimport Register from \"../screens/authentication/Register\";\r\nimport { createDrawerNavigator } from \"@react-navigation/drawer\";\r\nimport { connect } from \"react-redux\";\r\nimport { ModalState } from \"../redux/modalActions\";\r\nimport AddItemScreen from \"../screens/items/AddItemScreen\";\r\nimport PartnersListScreen from \"../screens/PartnersListScreen\";\r\nimport AddPartnerScreen from \"../screens/AddPartnerScreen\";\r\nimport SalesListScreen from \"../screens/sales/SalesListScreen\";\r\nimport AddSaleScreen from \"../screens/sales/AddSaleScreen\";\r\n\r\ntype Props = {\r\n  colorScheme: ColorSchemeName;\r\n  title: string;\r\n};\r\n\r\nconst Navigation: React.FunctionComponent<Props> = ({\r\n  colorScheme,\r\n  title,\r\n}: Props) => {\r\n  return (\r\n    <NavigationContainer\r\n      linking={LinkingConfiguration}\r\n      theme={colorScheme === \"dark\" ? DarkTheme : DefaultTheme}\r\n    >\r\n      <RootNavigator title={title} />\r\n    </NavigationContainer>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state: ModalState) => state.title;\r\n\r\nexport default connect(mapStateToProps, null)(Navigation);\r\n\r\nconst Stack = createNativeStackNavigator<RootStackParamList>();\r\n\r\nfunction RootNavigator({ title }: { title: string }) {\r\n  return (\r\n    <Stack.Navigator>\r\n      <Stack.Screen\r\n        name=\"Root\"\r\n        component={BottomTabNavigator}\r\n        options={{ headerShown: false }}\r\n      />\r\n      <Stack.Group screenOptions={{ presentation: \"modal\" }}>\r\n        <Stack.Screen\r\n          name=\"Modal\"\r\n          component={ModalScreen}\r\n          options={{\r\n            title,\r\n            headerTitleAlign: \"center\",\r\n          }}\r\n        />\r\n      </Stack.Group>\r\n    </Stack.Navigator>\r\n  );\r\n}\r\n\r\nfunction BottomTabNavigator({ navigation }: any) {\r\n  const Drawer = createDrawerNavigator<RootStackParamList>();\r\n\r\n  return (\r\n    <Drawer.Navigator>\r\n      <Drawer.Group>\r\n        <Drawer.Screen\r\n          name=\"SalesListScreen\"\r\n          component={SalesListScreen}\r\n          options={{\r\n            title: \"Списък с продажби\",\r\n            headerTitleAlign: \"center\",\r\n            headerRight: () => (\r\n              <Pressable\r\n                onPress={(e) => {\r\n                  e.preventDefault();\r\n                  navigation.navigate(\"Modal\", {\r\n                    component: <AddSaleScreen />,\r\n                  });\r\n                }}\r\n                style={({ pressed }) => ({\r\n                  opacity: pressed ? 0.5 : 1,\r\n                })}\r\n              >\r\n                <FontAwesome\r\n                  name=\"plus-circle\"\r\n                  size={25}\r\n                  color=\"green\"\r\n                  style={{ marginRight: 15 }}\r\n                />\r\n              </Pressable>\r\n            ),\r\n          }}\r\n        />\r\n        <Drawer.Screen\r\n          name=\"ItemsListScreen\"\r\n          navigationKey=\"/ItemsListScreen\"\r\n          component={ItemsListScreen}\r\n          options={{\r\n            title: \"Списък със стоки\",\r\n            headerTitleAlign: \"center\",\r\n            headerRight: () => (\r\n              <Pressable\r\n                onPress={(e) => {\r\n                  e.preventDefault();\r\n                  navigation.navigate(\"Modal\", {\r\n                    component: <AddItemScreen />,\r\n                  });\r\n                }}\r\n                style={({ pressed }) => ({\r\n                  opacity: pressed ? 0.5 : 1,\r\n                })}\r\n              >\r\n                <FontAwesome\r\n                  name=\"plus-circle\"\r\n                  size={25}\r\n                  color=\"green\"\r\n                  style={{ marginRight: 15 }}\r\n                />\r\n              </Pressable>\r\n            ),\r\n          }}\r\n        />\r\n        <Drawer.Screen\r\n          name=\"PartnersListScreen\"\r\n          navigationKey=\"PartnersListScreen\"\r\n          component={PartnersListScreen}\r\n          options={{\r\n            title: \"Списък с партньори\",\r\n            headerTitleAlign: \"center\",\r\n            headerRight: () => (\r\n              <Pressable\r\n                onPress={(e) => {\r\n                  e.preventDefault();\r\n                  navigation.navigate(\"Modal\", {\r\n                    component: <AddPartnerScreen />,\r\n                  });\r\n                }}\r\n                style={({ pressed }) => ({\r\n                  opacity: pressed ? 0.5 : 1,\r\n                })}\r\n              >\r\n                <FontAwesome\r\n                  name=\"plus-circle\"\r\n                  size={25}\r\n                  color=\"green\"\r\n                  style={{ marginRight: 15 }}\r\n                />\r\n              </Pressable>\r\n            ),\r\n          }}\r\n        />\r\n\r\n        <Drawer.Screen name=\"Register\" component={Register} />\r\n      </Drawer.Group>\r\n    </Drawer.Navigator>\r\n  );\r\n}\r\n","import { Action } from \"redux\";\r\nimport { ThunkAction } from \"redux-thunk\";\r\nimport * as items from \"./itemActions\";\r\nimport * as title from \"./modalActions\";\r\nimport * as partners from \"./partnerActions\";\r\nimport * as sales from \"./salesActions\";\r\n\r\nexport interface AppState {\r\n  items: items.ItemsState;\r\n  title: title.ModalState;\r\n  partners: partners.PartnersState;\r\n  sales: sales.SalesState;\r\n}\r\n\r\nexport const reducers = {\r\n  items: items.reducer,\r\n  title: title.reducer,\r\n  partners: partners.reducer,\r\n  sales: sales.reducer,\r\n};\r\n\r\nexport type AppThunk<ReturnType, ActionType> = ThunkAction<\r\n  ReturnType,\r\n  AppState,\r\n  null,\r\n  Action<ActionType>\r\n>;\r\n","import { applyMiddleware, combineReducers, compose, createStore } from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport { AppState, reducers } from \"./store\";\r\n\r\nexport default function configureStore(initialState?: AppState) {\r\n  const middleware = [thunk];\r\n\r\n  const rootReducer = combineReducers({\r\n    ...reducers,\r\n  });\r\n\r\n  const enhancers = [];\r\n  const windowIfDefined =\r\n    typeof window === \"undefined\" ? null : (window as any);\r\n  if (windowIfDefined && windowIfDefined.__REDUX_DEVTOOLS_EXTENSION__) {\r\n    enhancers.push(windowIfDefined.__REDUX_DEVTOOLS_EXTENSION__());\r\n  }\r\n\r\n  return createStore(\r\n    rootReducer,\r\n    initialState,\r\n    compose(applyMiddleware(...middleware), ...enhancers)\r\n  );\r\n}\r\n","import { StatusBar } from \"expo-status-bar\";\r\nimport { SafeAreaProvider } from \"react-native-safe-area-context\";\r\nimport { Provider } from \"react-redux\";\r\nimport { AlertsProvider } from \"react-native-paper-alerts\";\r\nimport { Provider as PaperProvider } from \"react-native-paper\";\r\n\r\nimport useCachedResources from \"./hooks/useCachedResources\";\r\nimport useColorScheme from \"./hooks/useColorScheme\";\r\nimport Navigation from \"./navigation\";\r\nimport configureStore from \"./redux/configureStore\";\r\n\r\nimport \"./helpers/styleFunctions\";\r\n\r\nexport default function App() {\r\n  const isLoadingComplete = useCachedResources();\r\n  const colorScheme = useColorScheme();\r\n\r\n  const store = configureStore();\r\n\r\n  if (!isLoadingComplete) {\r\n    return null;\r\n  } else {\r\n    return (\r\n      <SafeAreaProvider>\r\n        <Provider store={store}>\r\n          <PaperProvider>\r\n            <AlertsProvider>\r\n              <Navigation\r\n                colorScheme={colorScheme}\r\n                title={store.getState().title.title}\r\n              />\r\n            </AlertsProvider>\r\n          </PaperProvider>\r\n        </Provider>\r\n        <StatusBar />\r\n      </SafeAreaProvider>\r\n    );\r\n  }\r\n}\r\n","import { FontAwesome } from '@expo/vector-icons';\r\nimport * as Font from 'expo-font';\r\nimport * as SplashScreen from 'expo-splash-screen';\r\nimport { useEffect, useState } from 'react';\r\n\r\nexport default function useCachedResources() {\r\n  const [isLoadingComplete, setLoadingComplete] = useState(false);\r\n\r\n  // Load any resources or data that we need prior to rendering the app\r\n  useEffect(() => {\r\n    async function loadResourcesAndDataAsync() {\r\n      try {\r\n        SplashScreen.preventAutoHideAsync();\r\n\r\n        // Load fonts\r\n        await Font.loadAsync({\r\n          ...FontAwesome.font,\r\n          'space-mono': require('../assets/fonts/SpaceMono-Regular.ttf'),\r\n        });\r\n      } catch (e) {\r\n        // We might want to provide this error information to an error reporting service\r\n        console.warn(e);\r\n      } finally {\r\n        setLoadingComplete(true);\r\n        SplashScreen.hideAsync();\r\n      }\r\n    }\r\n\r\n    loadResourcesAndDataAsync();\r\n  }, []);\r\n\r\n  return isLoadingComplete;\r\n}\r\n","import { Platform } from \"react-native\";\r\n\r\nexport const injectWebCss = () => {\r\n  if (Platform.OS !== \"web\") return;\r\n\r\n  const style = document.createElement(\"style\");\r\n  style.textContent = `textarea, select, input, button { outline: none !important; }`;\r\n  style.textContent += `div::-webkit-scrollbar { width: 0; }`;\r\n  return document.head.append(style);\r\n};\r\n\r\ninjectWebCss();\r\n","module.exports = __webpack_public_path__ + \"./fonts/SpaceMono-Regular.ttf\";"],"sourceRoot":""}